#!/usr/bin/env bash

set -e

################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################

# Full help message:
function atp_help() {
    echo "atp is a tool that adds a specified path to the PATH environment variable." 1>&2
    echo "If no path is provided, it assumes you want to add the current working directory" 1>&2
    echo "to PATH. By default, the change is not permanent, but there is an option to specify" 1>&2
    echo "a permanent addition." 1>&2
    atp_usage
}

# Usage message:
function atp_usage() {
    echo "Usage:" 1>&2
    echo "  atp [-p] [path]" 1>&2
    echo "Options:" 1>&2
    echo "  -p : switch that tells atp to make the addition permanent" 1>&2
    echo "  -h --help : print this help message" 1>&2
}

# Ensures that we have a .path file to work with
function set_path_file() {
    if [[ ! -f ~/.path ]]; then
        echow "No .path file found in home directory"
        echo "Creating .path file..." 1>&2
        touch ~/.path
        PATH_FILE=~/.path
        echo -n "#!/usr/bin/env bash" >> "$PATH_FILE"
    fi
}

# Takes care of any final operations
function cleanup() {
    local f
    for f in ~/.{dirs,vars,path}; do
        source "$f"
    done
}
trap cleanup EXIT

# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }


################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

# The path to add to the .path file
to_add=$(shortpath "$(pwd)");

# A boolean value specifying whether or not to make the change permanent.
permanent=false


################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

# Display help messaage if the user asks.
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo atp_help
    exit 0
fi

set_path_file

# Get options
while getopts ":p" o; do
    case "${o}" in
        p)
            permanent=true
            ;;
        *)
            echoe "Unknown operand $o"
            atp_usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# Adds a directory to the PATH environment variable.
# By default adds the working directory, but can take
# an argument as well
if [[ "$#" -eq 1 ]]; then
    to_add="$1" && to_add=$(shortpath "$to_add");
fi

# Edit the .path file if the change is permanent.
# Otherwise, just add the path to PATH and export it
if $permanent ; then
    grep --color=never -ho "^export\ PATH=\"\$PATH:$to_add\"" "$PATH_FILE" >> /dev/null
    if [ $? -ne 0 ]; then
        PATH=$PATH:$to_add
        sed -i "s|^export\ PATH=\"\$PATH:$to_add\"||g" "$PATH_FILE"
        sed -i "/^$/d" "$PATH_FILE"
        perl -pi -e 'chomp if eof' ~/.path && echo >> "$PATH_FILE"
        echo -n "export PATH=\"\$PATH:$to_add\"" >> "$PATH_FILE"
        source "$PATH_FILE"
        src
    else
        echoe "Path already exists"
        exit 1
    fi
else
    PATH="$PATH:$to_add"
    export PATH
fi