#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                               Usage Functions                              ##
##                                                                            ##
################################################################################

# Full help message
function gref_help() {
    echo "gref is a tool for searching for files based on a pattern. It stands for 'grep find,'" 1>&2
    echo "since it uses a combination of these tools to search." 1>&2
}

# Usage message
function gref_usage() {
    echo "Usage:" 1>&2
    echo "    gref [options] [pattern to search files for]" 1>&2
    echo "Options:" 1>&2
    echo "    --dir | -d             -   the base directory to search in" 1>&2
    echo "    --file | -f            -   a file pattern to narrow down search results" 1>&2
    echo "    --pattern | -p         -   the actual string pattern to search for (can also be entered" 1>&2
    echo "                               without any flags after all other arguments have been entered)" 1>&2
    echo "    --non-recursive | -n   -   specify the search to only check the working directory for matches" 1>&2
    echo "    --help | h             -   print help message and exit" 1>&2
}

################################################################################
##                                                                            ##
##                               Exit Functions                               ##
##                                                                            ##
################################################################################

# Exit the program if the user requests help
function exit_if_help_requested() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        gref_help
        exit 0
    fi
}

# Exit program if user doesn't supply correct input
function exit_if_input_incorrect() {
    if [[ "$#" -eq 0 || ("$#" -eq 1 && $1 =~ \-.*) ]]; then
        echoe "You must supply a pattern to search for"
        gref_usage
        exit 2
    fi
}

################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################

# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

dir_path="."
file_pattern="*"
grep_pattern=""
recursive=true

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

# Exit conditions:
exit_if_help_requested "$@"
exit_if_input_incorrect "$@"

# Parse user input:
for arg in "$@"; do
    case "$arg" in
        --dir | -d)
            dir_path="$2"
            shift 2
            ;;
        --file | -f)
            file_pattern="$2"
            shift 2
            ;;
        --pattern | -p)
            grep_pattern="$2"
            shift 2
            ;;
        --non-recursive | -n)
            recursive=false
            ;;
        --* | -*)
            echoe "Unknown argument $arg"
            gref_usage
            exit 3
    esac
done

# If user enters the grep pattern without any flags, just accept it as is:
if [[ "$#" -gt 0 ]]; then
    grep_pattern="$1"
fi

# Actually perform the search:
if $recursive ; then
    find "$dir_path" -type f -name "$file_pattern" -exec grep -l "$grep_pattern" {} \;
else
    find "$dir_path" -maxdepth 1 -type f -name "$file_pattern" -exec grep -l "$grep_pattern" {} \;
fi