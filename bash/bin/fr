#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                               Usage Functions                              ##
##                                                                            ##
################################################################################

# Full help message
function fr_help() {
    echo "fr is a find/replace tool that uses a combination of find and sed in order" 1>&2
    echo "to replace string patterns with new ones in files." 1>&2
    fr_usage
}

# Usage message
function fr_usage() {
    echo "Usage:" 1>&2
    echo "    fr [options] [search pattern] [replace pattern]" 1>&2
    echo "Options:" 1>&2
    echo "    --dir | -d <directory path> " 1>&2
    echo "        the base directory to search in" 1>&2
    echo "    --file-pattern | -f <pattern>" 1>&2
    echo "        a file pattern to narrow down search results" 1>&2
    echo "    --search | -s <pattern>" 1>&2
    echo "        the pattern to search for in the file heirarchy" 1>&2
    echo "        (can also be entered as the first argument after all options)" 1>&2
    echo "    --replace | -r <string>" 1>&2
    echo "        the string to replace all matches with in the file heirarchy" 1>&2
    echo "        (can also be entered as the second argument after all options)" 1>&2
    echo "    --non-recursive | -n" 1>&2
    echo "        tell fr to only check the working directory for matches" 1>&2
    echo "    --max-depth | -M <int>        " 1>&2
    echo "        the maximum level of directories to recurse down when searching" 1>&2
    echo "    --min-depth | -m <int>        " 1>&2
    echo "        the minimum level of directories to recurse down when searching" 1>&2
    echo "    --help | -h                   " 1>&2
    echo "        print help message and exit" 1>&2
}


################################################################################
##                                                                            ##
##                               Exit Functions                               ##
##                                                                            ##
################################################################################

# Exit the program if the user requests help
function exit_if_help_requested() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        fr_help
        exit 0
    fi
}

# Exit program if user doesn't supply correct input
function exit_if_input_incorrect() {
    if [[ "$search" == "" || "$replace" == "" ]]; then
        echoe "You must supply a search pattern and a replace string"
        fr_usage
        exit 1
    fi
}

################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################


# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

search=""
replace=""
dir_path="."
file_pattern="\"*\""
max_depth=""
min_depth=""

find_args=""

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

# Parse user input:
for arg in "$@"; do
    case "$arg" in
        --dir | -d)
            dir_path="$2"
            shift 2
            ;;
        --file-pattern | -f)
            file_pattern="-iname \"$2\""
            shift 2
            ;;
        --search | -s)
            search="$2"
            shift 2
            ;;
        --replace | -r)
            replace="$2"
            shift 2
            ;;
        --non-recursive | -n)
            max_depth="-maxdepth 1"
            min_depth=""
            shift 1
            ;;
        --max-depth | -M)
            max_depth="-maxdepth $2"
            shift 2
            ;;
        --min-depth | -m)
            min_depth="-mindepth $2"
            shift 2
            ;;
        --* | -*)
            echoe "Unknown argument '$arg' to fr"
            fr_usage
            exit 2
    esac
done

# If the user enters the find and replace strings as regular arguments,
# parse them here:
if [[ "$1" != "" ]]; then
    search="$1"
    shift 1
fi
if [[ "$1" != "" ]]; then
    replace="$1"
    shift 1
fi

# Exit conditions:
exit_if_help_requested
exit_if_input_incorrect

# Put the find arguments together to be evaluated:
find_args="$dir_path"
for param in "$dir_path" "$file_pattern" "$search" "$replace" "$max_depth" "$min_depth"; do
    if [[ "$param" != "" ]]; then
        find_args="$find_args $param"
    fi
done
find_args="$find_args -print0"

# Perform the actual find/replace
eval "find $find_args" | xargs -0 sed -i.bak "s:$search:$replace:g"