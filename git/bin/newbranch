#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################

# Full help message:
function newbranch_help() {
    echo "Creates a new branch in the current git repository with a specified" 1>&2
    echo "name. By default, it sets the upstream branch to origin/master," 1>&2
    echo "but this can be overridden with an optional argument." 1>&2
    newbranch_usage
}

# Usage message:
function newbranch_usage() {
    echo "Usage:" 1>&2
    echo "    newbranch [-u <upstream> -b <branch name> -n]" 1>&2
    echo "Options:" 1>&2
    echo "    -u <upstream>    : sets the upstream branch tracked by the new branch" 1>&2
    echo "                       to a branch specified by the user. If this arguemnt" 1>&2
    echo "                       is not provided, the upstream branch defaults to origin/master" 1>&2
    echo "    -b <branch name> : sets the value of the new branch name. If this argument" 1>&2
    echo "                       is ommitted, the user will be prompted to provide a names" 1>&2
    echo "    -n               : signals that the local branch should not track a remote branch" 1>&2
    echo "    -h --help        : prints the help message (this message)" 1>&2
}

# Gets the new branch's name from the user:
function get_branch_name_from_user() {
    local new_branch_name=""
    while [[ "$new_branch_name" == "" ]]; do
        echo -n "Enter a name for the branch you wish to create:" 1>&2
        read -r new_branch_name
    done
    echo "$new_branch_name"
}

# Decides how to create the local branch based on user input:
function create_local_branch() {
    if [[ "$#" -ne 3 ]]; then
        echoe "Incorrect number of arguments passed to create_local_branch"
        exit 2
    fi

    local new_branch_name="$1"
    local upstream="$2"
    local track_upstream="$3"

    if $track_upstream ; then
        git checkout -b "$new_branch_name" --track "$upstream"
    else
        git checkout -b "$new_branch_name"
    fi
}

# Checks whether or not a local branch with the given name already exists
# in the repository:
function check_branch_exists() {
    if [[ "$#" -ne 1 ]]; then
        echoe "Incorrect number of arguments passed to check_branch_exists"
        exit 3
    fi

    local new_branch_name="$1"

    git rev-parse --verify "$new_branch_name"
    if [[ "$?" == 0 ]]; then
        echoe "Branch with name $new_branch_name already exists in this repository." 1>&2
        return 1
    else
        return 0
    fi
}

# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }


################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

upstream="origin/master"
new_branch_name=""
track_upstream=true
branch_exists=""

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

# Print help message if the user requests it:
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo newbranch_help
    exit 0
fi

# Get options:
while getopts ":u:b:n" o; do
    case "${o}" in
        u)
            upstream="${OPTARG}"
            ;;
        b)
            new_branch_name="${OPTARG}"
            ;;
        n)
            track_upstream=false
            ;;
        *)
            echoe "Unknown operand $o"
            newbranch_usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# Ask the user for the branch name if it hasn't already been specified:
if [[ -z "$new_branch_name" ]]; then
    new_branch_name="$(get_branch_name_from_user)"
fi

while [[ ! $(check_branch_exists "$new_branch_name") ]] ; do
    new_branch_name="$(get_branch_name_from_user)"
done

create_local_branch "$new_branch_name" "$upstream" "$track_upstream"