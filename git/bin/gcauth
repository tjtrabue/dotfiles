#!/usr/bin/env bash

# Changes the author information (name and email) for a list of commits
# specified by the user.
#
# IMPORTANT: This is untested as of yet! It is a dangerous, screwy, horrible
# binary that could do terrible things to your git repository. Please, for the
# love of Pete make sure you read through the whole binary before you use it,
# if you must. I intend to flesh it out and test it thoroughly soon, but for
# now just know that it's very dangerous.

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

user_name=""
user_email=""

commit_indecies_to_amend=()
commits_to_amend=()
commit_arr=()


################################################################################
##                                                                            ##
##                           Supporting Functions                             ##
##                                                                            ##
################################################################################

# Checks whether or not the user is in a git repo, and exits if not:
function exit_if_not_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        exit 1
    fi
}

# Prompts user for their git username and email, and then changes their
# gitconfig accordingly:
function get_and_set_user_info() {
    echo -n "Enter username: " 1>&2
    read -r user_name

    echo -n "Enter email: " 1>&2
    read -r user_email

    git config user.name "$user_name"
    git config user.email "$user_email"
}

# Prompts user for indecies of commits they want amend, and builds an array
# of commit IDs for those commits:
function get_commit_indecies() {
    local done_entering_commit_indecies=false
    local response=""
    while ! $done_entering_commit_indecies; do
        if [[ ${#commit_indecies_to_amend[@]} -gt 0 ]]; then
            echo "Indecies entered:" 1>&2
            for i in ${commit_indecies_to_amend[@]}; do
                echo -e "${BLUE}$i${NC}"
            done
        fi

        echo -n "Enter commit index: " 1>&2
        read -r response
        if [[ "$response" =~ [0-9]+ ]]; then
            commit_indecies_to_amend+=("$response")
        elif [[ "$response" =~ [Dd][Oo][Nn][Ee] ]]; then
            done_entering_commit_indecies=true
        elif [[ "$response" =~ [Ii][Nn][Ff][Oo] ]]; then
            show_commit_info
        fi
    done

    # Add selected commits to array for amending:
    for i in ${commit_indecies_to_amend[@]}; do
        if [[ "$i" -le ${#commit_arr[@]} ]]; then
            commits_to_amend+=("${commit_arr[$i]}")
        fi
    done
}

# Finalizes the changes made to the commits and pushes them:
function finalize_and_push() {
    git log
    local response=""
    while [[ ! $response =~ [Yy] && ! $response =~ [Nn] ]]; do
        echo "Ready to push? [y/n]" 1>&2
        read -sn 1 response
    done
    if [[ "$response" =~ [Yy] ]]; then
        git push -f
    else
        echo "Aborting" 1>&2
        exit 3
    fi
}

# Actually does the magic of changing the desired commits with the new
# user-supplied information:
function change_commits() {
    local response=""
    while [[ ! $response =~ [Yy] && ! $response =~ [Nn] ]]; do
        echo "Are you sure you want to amend these commits? [y/n]" 1>&2
        read -sn 1 response
    done

    if [[ "$response" =~ [Yy] ]]; then
        echo "Amending commits..." 1>&2
        for com_num in ${commits_to_amend[@]}; do
            local new_commit_number="$(git log -1 --no-color | grep --color=never "^commit" | sed "s/^commit //")"
            git checkout "$com_num"
            git commit --amend --author "$user_name <$user_email>"
            git replace "$com_num" "$new_commit_number"
            git filter-branch -- --all
            git replace -d "$com_num"
            finalize_and_push
        done
    else
        echo "Aborting" 1>&2
        exit 2
    fi
}

# Displays a list of past commit messages along with their corresponding
# indecies:
function show_commit_info() {
    local message_arr=( "$(git log --pretty=oneline --abbrev-commit --no-color -15 | grep -o --color=never " .*")" )
    local ind=0
    local spacer=10 # The amount of space between an index and its message
    for msg in ${message_arr[@]}; do
        printf "%-${spacer}%s%s" "$ind" "$msg"
        ((ind+=1))
    done
}

################################################################################
##                                                                            ##
##                                Main Program                                ##
##                                                                            ##
################################################################################

# Make sure that the working directory is a git repo:
exit_if_not_git_repo
commit_arr=( $(git log --no-color | grep --color=never "^commit" | sed "s/^commit //") )

echo "Ugh, ok. Time to rewrite some git history. Ok champ, let's start by getting" 1>&2
echo "your username and email." 1>&2
get_and_set_user_info

echo "Starting with HEAD at index 0, what are the indecies of the commits you want" 1>&2
echo "to adjust?" 1>&2
echo "Type 'done' when finshsed" 1>&2
echo "Type 'info' to see a list of commit messages with their corresponding indecies" 1>&2
get_commit_indecies

for entry in ${commits_to_amend[@]}; do
    echo "Entry: $entry" 1>&2
done

change_commits