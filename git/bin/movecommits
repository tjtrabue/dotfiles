#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                               Usage Functions                              ##
##                                                                            ##
################################################################################

# Full help message:
function movecommits_help() {
    echo "movecommits takes the last n commits of the current branch and moves" 1>&2
    echo "them on top of HEAD on another branch. Thus," 1>&2
    echo "    movecommits -n 2 destination_branch" 1>&2
    echo "moves the top 2 commits of the current HEAD and puts them on top of" 1>&2
    echo "HEAD on destination_branch." 1>&2
    movecommits_usage
}

# Usage message:
function movecommits_usage() {
    echo "Usage:" 1>&2
    echo "    movecommits [-n <number of commits>] destination_branch" 1>&2
    echo "Options:" 1>&2
    echo "    -n <number of commits> : the number of commits to move from the" 1>&2
    echo "                             current branch to the destination branch" 1>&2
}

################################################################################
##                                                                            ##
##                           Supporting Functions                             ##
##                                                                            ##
################################################################################

function move_commits() {
    local num_commits_to_move="$1"
    local destination_branch="$2"

    local commit_id_array=(
                            $(git log -2 --no-color \
                            | egrep --color=never '^commit' \
                            | sed -e 's/^commit[ \t]*//')
                            )

    git checkout "$destination_branch"
    for (( idx=${#commit_id_array[@]}-1 ; idx>=0 ; idx-- )); do
        git cherry-pick "${commit_id_array[$idx]}"
    done
}

# Aborts the program if the user requests help
function exit_if_help_requested() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo movecommits_help
        exit 0
    fi
}

# Aborts the program if the user didn't supply the correct parameters
function exit_if_input_incorrect() {
    if [[ "$#" -gt 2 ]]; then
        echoe "Too many parameters supplied"
        exit 2
    fi
}

# Aborts the program if the user isn't in a git repo
function exit_if_not_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        echoe "Not inside a git repo"
        echo "Aborting" 1>&2
        exit 5
    fi
}

# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

destination_branch=""
num_commits_to_move=1

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

exit_if_help_requested
exit_if_not_git_repo
exit_if_input_incorrect

while getopts ":n:" o; do
    case "${o}" in
        n)
            num_commits_to_move="${OPTARG}"
            ;;
        *)
            echoe "Unknown operand $o"
            movecommits_usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

move_commits "$@"