#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

branch_to_switch="master"

################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################

# Usage message:
function sw_usage() {
    echo "A git branch-switching alias with some memory thrown in for good measure." 1>&2
    echo "USAGE:" 1>&2
    echo "  sw [-<integer> | branch_name]" 1>&2
    echo "OPTIONS:" 1>&2
    echo "  -<integer>  : a flag passed in like '-1' or '-3' which mean 'return" 1>&2
    echo "                to the last branch' and 'return to the branch I was on" 1>&2
    echo "                before the last two' respectively." 1>&2
    echo "  branch_name : the name of the branch to switch to." 1>&2
}

# Takes care of cleanup:
function cleanup() {
    # Clean any empty lines from the .git_hist file:
    if [[ -f "$(git rev-parse --show-toplevel)/.branch_hist" ]]; then
        sed -i -e '/^$/d' "$(git rev-parse --show-toplevel)/.branch_hist"
        delete_old_branches
    fi
}
trap cleanup EXIT

# Exits the program if not in a git repo:
function exit_if_not_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        echoe "Not inside a git repo"
        echo "Aborting" 1>&2
        exit 5
    fi
}

# Exits the program if the user passes in a -h or --help flag:
function exit_if_help_requested() {
    if [[ "$@" == "--help" || "$@" == "-h" ]]; then
        echo sw_usage
        exit 0
    fi
}

# Exits if the user supplied incorrect input:
function exit_if_input_incorrect() {
    if [[ "$#" -gt 1 ]]; then
        echoe "Too many parameters supplied."
        sw_usage
        exit 1
    fi
}

# Adds a .branch_hist file to the repo if it's not already there.
function make_branch_hist_if_neccessary() {
    if [[ ! -f "$(git rev-parse --show-toplevel)/.branch_hist" ]]; then
        echo "Making .branch_hist file..." 1>&2
        touch "$(git rev-parse --show-toplevel)/.branch_hist"
    fi
}

# Gets the user's input param (if any) and calls parse_user_input:
function get_user_input() {
    if [[ "$#" -eq 1 ]]; then
        local input_param="$1"
        parse_user_input "$input_param"
    else
        do_switch "$branch_to_switch"
    fi
}

# Actually makes the branch change:
function do_switch() {
    add_current_branch
    git checkout "$branch_to_switch"
}

# Figures out the branch to switch to based on the repo's branch history:
function translate_branch_hist() {
    local num_branches_to_go_back="$@"
    local branch_hist_file="$(git rev-parse --show-toplevel)/.branch_hist"
    local total_branches="$(wc -l < "$branch_hist_file" | sed 's/^ *//')"
    local branch_to_return=$(( total_branches - num_branches_to_go_back + 1 ))
    sed -n -e ${branch_to_return}p
}

# Parses the user's input:
function parse_user_input() {
    local user_input="$1"
    if [[ "$user_input" =~ \-.* ]]; then
        local num_branches_to_go_back="$(echo "$user_input" | sed 's:^\-::')"
        local to_switch="$(translate_branch_hist "$num_branches_to_go_back")"
        do_switch "$to_switch"
    else
        do_switch "$user_input"
    fi
}

# Deletes branches in .branch_hist that were viewed more than 5 times ago:
function delete_old_branches() {
    local branch_hist_file="$(git rev-parse --show-toplevel)/.branch_hist"
    local total_branches="$(wc -l < "$branch_hist_file")"
    if [[ "$total_branches" -gt 5 ]]; then
        local num_to_delete=$(( total_branches - 5 ))
        sed -i -e "1,${num_to_delete}d" "$branch_hist_file"
    fi
}

# Adds the current branch name to the end of the .branch_hist file:
function add_current_branch() {
    local branch_name="$(git rev-parse --abbrev-ref HEAD)"
    echo "$branch_name" >> "$(git rev-parse --show-toplevel)/.branch_hist"
}

# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

exit_if_help_requested "$@"
exit_if_not_git_repo
exit_if_input_incorrect

make_branch_hist_if_neccessary
# translate_branch_hist 2
delete_old_branches

cleanup