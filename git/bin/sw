#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################




################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################

# Usage message:
function sw_usage() {
    echo "A git branch-switching alias with some memory thrown in for good measure." 1>&2
    echo "USAGE:" 1>&2
    echo "  sw [-<integer> | branch_name]" 1>&2
    echo "OPTIONS:" 1>&2
    echo "  -<integer>  : a flag passed in like '-1' or '-3' which mean 'return" 1>&2
    echo "                to the last branch' and 'return to the branch I was on" 1>&2
    echo "                before the last two' respectively." 1>&2
    echo "  branch_name : the name of the branch to switch to." 1>&2
}

# Exits the program if not in a git repo:
function exit_if_not_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        echoe "Not inside a git repo"
        echo "Aborting" 1>&2
        exit 5
    fi
}

# Exits the program if the user passes in a -h or --help flag:
function exit_if_help_requested() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo sw_usage
        exit 0
    fi
}

# Adds a .branch_hist file to the repo if it's not already there.
function make_branch_hist_if_neccessary() {
    if [[ ! -f "$(git rev-parse --show-toplevel)/.branch_hist" ]]; then
        echo "Making .branch_hist file..." 1>&2
        touch "$(git rev-parse --show-toplevel)/.branch_hist"
    fi
}

# Used for printing errors:
function echoe () { echo -e "${RED}ERROR${NC}: $@" 1>&2 ; }

# Used for printing warnings:
function echow () { echo -e "${BROWN_ORANGE}WARNING${NC}: $@" 1>&2 ; }

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################