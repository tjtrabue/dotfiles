#!/usr/bin/env bash

################################################################################
##                                                                            ##
##                             Supporting Functions                           ##
##                                                                            ##
################################################################################

# Full help message:
function sw_help() {
    echo "sw is an intelligent git-checkout alias that can take the user back through branches" 1>&2
    echo "that they've previously visited as well as to specific branches by specifying the name." 1>&2
    echo "For instance, inputting" 1>&2
    echo "    sw -1" 1>&2
    echo "will take the user to the previously visited branch, while inputting" 1>&2
    echo "    sw branch_one" 1>&2
    echo "will take the user to a branch named branch_one. Inputting" 1>&2
    echo "    sw" 1>&2
    echo "with no arguments will take the user back to master." 1>&2
    sw_usage
}

# Usage message:
function sw_usage() {
    echo "Usage:" 1>&2
    echo "    sw [branch_name | -n (where n is the number of the branch in history to go back)]" 1>&2
    echo "    NOTE: if no options are supplied, sw takes the user back to the git repository's" 1>&2
    echo "          master branch." 1>&2
}

# Exits the program if not in a git repo:
function exit_if_not_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        echoe "Not inside a git repo"
        echo "Aborting" 1>&2
        exit 5
    fi
}

# Exits the program if the user passes in a -h or --help flag:
function exit_if_help_requested() {
    if [[ "$@" == "--help" || "$@" == "-h" ]]; then
        echo sw_usage
        exit 0
    fi
}

# Exits if the user supplied incorrect input:
function exit_if_input_incorrect() {
    if [[ "$#" -gt 1 ]]; then
        echoe "Too many parameters supplied."
        sw_usage
        exit 1
    fi
}

# Actually makes the branch change:
function do_switch() {
    local to_switch="$@"
    if [[ "$to_switch" != "$(git rev-parse --abbrev-ref HEAD)" ]]; then
        git checkout "$to_switch"
    else
        echo -e "Already on branch ${BLUE}$to_switch${NC}" 1>&2
    fi
}

# Parses user input and decides which branch to choose:
# Syntax:
#    parse_user_input $branch_indicator
function parse_user_input() {
    local input="$1"
    if [[ "$input" =~ \-[0-9]+ ]]; then
        echo "@{$input}"
    else
        echo "$input"
    fi
}

################################################################################
##                                                                            ##
##                                  Variables                                 ##
##                                                                            ##
################################################################################

destination_branch="master"

################################################################################
##                                                                            ##
##                                 Main Program                               ##
##                                                                            ##
################################################################################

# Exit if some condition is incorrect:
exit_if_help_requested
exit_if_not_git_repo
exit_if_input_incorrect

if [[ "$#" -gt 0 ]]; then
    destination_branch="$(parse_user_input "$@")"
fi

do_switch "$destination_branch"