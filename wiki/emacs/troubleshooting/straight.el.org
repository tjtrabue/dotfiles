#+title:    Troubleshooting straight.el
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2021:07:01
#+property: header-args:emacs-lisp :lexical t
#+tags:
#+STARTUP: fold

Sometimes =straight.el= doesn't behave as expected when you attempt to bootstrap
a new Emacs installation, or when upgrading an old installation. This guide is
here to help you navigate some of the pitfalls you may encounter.

* The golden rule of troubleshooting =straight.el= problems
** Always run straight-rebuild-package on the problematic packages!
   Package fails to build? Refresh your package recipe repos and rebuild the
   package manually. Package fails to load when you call an autoloaded function?
   Rebuild the package manually. Strange issues with package dependencies?
   Rebuild manually. I cannot stress enough just how many problems with
   =straight.el= can be resolved by simply rebuilding the packages in
   question. I don't know why this is the case, but it is. Probably because
   several dependencies want different versions of the same package.

   Sometimes, =straight-pull-all= followed by =straight-rebuild-all= helps.

* =straight.el= cannot find package in repos although you know it's there
  If =straight.el= reports that it cannot find a certain package in its
  configured repositories even though you know full well that the package /is/
  there, educate =straight.el= by doing the following:

  - Update your package repos by running =straight-pull-package= for each of
    your package repositories,
  - run =straight-pull-package= on =straight= itself,
  - run =straight-rebuild-package= on =straight=,
  - restart Emacs.

  At this point, try pulling the problematic package again. =straight.el= should
  now be able to locate it.

* Package fails to build...
** ...due to files being excluded from the build step
*** Problem
    The files you need are downloaded along with everything else in the package,
    but =straight.el= fails to symlink those files into the =build= directory,
    resulting in a "file not found" type of error.
*** Solution
    First, refresh your recipe repositories with =straight-pull-package
    "repo-name"=. This will ensure that your repositories are up-to-date before
    trying anything else. I also have a custom
    =straight-pull-recipe-repositories= function that refreshes all of them at
    once. Next, try manually running =M-x straight-rebuild-package= for the
    given package from inside Emacs.

** ...due to a void variable or function definition
*** Problem
    When activating a plugin, Emacs will bork itself, and you'll see a large
    stack trace reporting a =void variable= or =void function= at the top.  You
    check the plugin's source code file and, just like Emacs says, you don't
    find the variable or function. However, you then check the GitHub repository
    for the plugin, and sure enough, you find the variable or function! How
    could this be?
*** Solution
    The issue is most likely that your local copy of the plugin's repository is
    behind =master= or =main=. This is a known weakness of =straight.el=, and
    happens when a plugin you want to use explicitely with a =use-package= macro
    is also a dependency of another plugin which needs a different version of
    the same plugin. However, most of the time the latest stable version of the
    plugin is good enough for everyone involved. Jump into your local
    repository, check your current branch, and if you're in a detached HEAD
    state, switch back to =master= (or =main=) and then run =git pull=. Restart
    Emacs, and see if this fixes your issue.

    *UPDATE:* I have written a convenience shell function called
    =straight_update_repos= which will perform the above action automatically
    for each repository =straight.el= has cloned. Running this in your shell
    session should help resolve your issues quickly.
