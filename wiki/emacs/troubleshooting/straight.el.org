#+title:    Troubleshooting straight.el
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2021:07:01
#+property: header-args:emacs-lisp :lexical t
#+tags:
#+STARTUP: fold

Sometimes =straight.el= doesn't behave as expected when you attempt to bootstrap
a new Emacs installation, or when upgrading an old installation. This guide is
here to help you navigate some of the pitfalls you may encounter.


* The golden rule of troubleshooting straight.el problems
** Always run straight-rebuild-package on the problem packages!
   Package fails to build? Refresh your package recipe repos and rebuild the
   package manually. Package fails to load when you call an autoloaded function?
   Rebuild the package manually. Strange issues with package depdencies? Rebuild
   manually. I cannot stress enough just how many problems with =straight.el=
   can be resolved by simply rebuilding the packages in question. I don't know
   why this is the case, but it is. Probably because several depdencies want
   different versions of the same package.

* Package fails to build...
** ...due to files being excluded from the build step
*** Problem
    The files you need are downloaded along with everything else in the package,
    but =straight.el= fails to symlink those files into the =build= directory,
    resulting in a "file not found" type of error.
*** Solution
    First, refresh your recipe repositories with =straight-pull-package
    "repo-name"=. This will ensure that your repositories are up-to-date before
    trying anything else. I also have a custom
    =straight-pull-recipe-repositories= function that refreshes all of them at
    once. Next, try manually running =M-x straight-rebuild-package= for the
    given package from inside Emacs.
