#!/usr/bin/env bash

# Trap errors and print error message
set -Eeuo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

# Logging variables
declare LOG_TO_FILE=""
declare LOG_LEVEL=3

declare IMPORT="${DOTFILES_REPO}/shell/bash/source"

declare USER_BASH_COMPLETION_DIR="${HOME}/.bash_completion.d"
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh"
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

<insert description here>

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

create_dirs() {
  log_info "Creating special dirs"
  mkdir -p "${USER_BASH_COMPLETION_DIR}"
}

install_z() {
  log_info "Installing z"
  curl "https://raw.githubusercontent.com/rupa/z/master/{z.sh}" \
    -o "${USER_BASH_COMPLETION_DIR}/#1"
}

install_fz() {
  log_info "Installing fz"
  # NOTE: We add in extra 'z' characters as a prefix to fz.sh because fz.sh must
  # be sourced AFTER z.sh, so we want it to come later alphabetically.
  curl "https://raw.githubusercontent.com/changyuheng/fz/master/{fz.sh}" \
    -o "${USER_BASH_COMPLETION_DIR}/zzz#1"
}

# forgit is an amazing, interactive CLI git client that leverages fuzzy finding
# for fast results. You must have fzf installed to use it.
install_forgit() {
  if [ ! -d "${WS}/forgit" ]; then
    log_info "Installing forgit git client"
    git -C "${WS}" clone "git@github.com:wfxr/forgit.git"
  fi
}

main() {
  print_header "Initializing Shell Tools"
  create_dirs
  install_z
  install_fz
  install_forgit
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help-n 'init_<name_here>' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
