#!/usr/bin/env bash

# Trap errors and print error message
trap 's=$?; echo "$0: Error on line "${LINENO}": ${BASH_COMMAND}"; exit $s' ERR

# Variables {{{
declare DOTFILES_HOME="${HOME}/.dotfiles"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

# Logging variables
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_HOME}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

Initialize a PostgreSQL installation on a new system.

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

perform_initial_configuration() {
  local databaseClusterLocation="/var/lib/postgres/data"

  log_info "Creating PostgreSQL database cluster"
  sudo -iu postgres initdb -D "${databaseClusterLocation}"
}

# Set the postgres user's password to the default.
change_postgres_user_password() {
  local defaultPostgresPassword="postgres"

  log_info "Setting postgres user's password to: ${defaultPostgresPassword}"
  printf "%s\n%s\n" "${defaultPostgresPassword}" "${defaultPostgresPassword}" |
    sudo passwd postgres
}

# Enable and start the PostgreSQL SystemD service.
start_postgres_server() {
  log_info "Starting PostgreSQL SystemD service"
  sudo systemctl enable postgresql.service
  sudo systemctl start postgresql.service
}

main() {
  print_header "Initializing PostgreSQL"
  perform_initial_configuration
  change_postgres_user_password
  start_postgres_server
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'init_postgresql' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
