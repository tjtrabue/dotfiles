#!/usr/bin/env bash

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

declare IMPORT="${DOTFILES_REPO}/shell/bash/source"

declare LOG_LEVEL=3
declare LOG_TO_FILE=""

# Home directory for sdkman program.
declare SDKMAN_HOME="${HOME}/.sdkman"

# A list of all Java versions to install with sdkman.
# You may want to tweak these versions to suit your needs.
declare JAVA_VERSIONS_TO_INSTALL=(
  "8.0.282.hs-adpt"
  "15.0.2.hs-adpt"
)
# }}}

# Imports {{{
. "${IMPORT}/colors.bash"
. "${IMPORT}/functions_log.bash"
. "${IMPORT}/functions_java.bash"
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

Initialize the Java development environment in a platform-neutral way.

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

# Install java versions.
install_java() {
  log_info "Installing Java versions: ${JAVA_VERSIONS_TO_INSTALL[*]}..."
  local version

  # Install latest stable java
  sdk install java

  for version in "${JAVA_VERSIONS_TO_INSTALL[@]}"; do
    # Install each specified version of java
    echo "n" | sdk install java "${version}"
  done
}

# Get the latest version of the given sdkman candidate.
get_latest_candidate() {
  local candidate="${1}"

  if [ -z "${candidate}" ]; then
    err "No candidate given"
    return 1
  fi

  basename "$(find "${SDKMAN_HOME}/candidates/${candidate}" \
    -maxdepth 1 -mindepth 1 -type d | sort -V | tail -1)"
}

# Install Apache Maven.
install_maven() {
  log_info "Installing latest Maven..."
  sdk install maven
  sdk default maven "$(get_latest_candidate maven)"
}

# Install Apache Gradle.
install_gradle() {
  log_info "Installing latest Gradle..."
  sdk install gradle
  sdk default maven "$(get_latest_candidate gradle)"
}

# Main point of entry.
main() {
  print_header "Initializing Java Development Environment"
  install_sdkman
  initialize_sdkman_for_shell
  install_java
  install_maven
  install_gradle
  succ "Done!"
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'init_<name_here>' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
