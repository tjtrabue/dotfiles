#!/usr/bin/env bash

# Trap errors and print error message
set -uo pipefail
trap 's=$?; echo "$0: Error on line "${LINENO}": ${BASH_COMMAND}"; exit $s' ERR

# Variables {{{
declare DOTFILES_HOME="${HOME}/.dotfiles"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

# Logging variables
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_HOME}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

asdf is a version manager for many languages, such as Java, Ruby, Python,
Erlang, Elixir, and many more. It's a one-stop-shop for managing programming
platforms on a project-by-project basis. You can think of asdf like rvm, nvm,
pyenv, and jenv all combined, but better!

The only configuration needed on the user's part is to put an initialization
statement in their shell's config file.

Bash:
  . \$HOME/.asdf/asdf.sh

Zsh:
  . \$HOME/.asdf/asdf.sh

Fish:
  source \$HOME/.asdf/asdf.fish

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

main() {
  print_header "Initializing asdf version manager"
  clone_asdf
  src_asdf_for_profile
  add_asdf_plugins
  log_info "Done!"
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'init_<name_here>' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
