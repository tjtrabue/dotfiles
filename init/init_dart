#!/usr/bin/env bash

# Trap errors and print error message
set -euo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

declare VERBOSE=false
# }}}

# Imports {{{
source "${DOTFILES_REPO}/shell/common/source/common.sh"
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

<insert description here>

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.

  -v | --verbose
    Run with extra logging output.
EOF
}

# Make sure that dart is installed before proceeding with configuration.
check_dart_installed() {
  if [ ! -x "$(command -v dart)" ]; then
    err "No dart found on \$PATH. Please install dart and try again."
    exit 1
  fi
}

# Entry point for script setup.
setup() {
  check_dart_installed
}

# Install global Dart packages
install_global_packages() {
  pub global activate \
    dart_style \
    ;
}

# Main program entry point.
main() {
  print_header "Initializing Dart Programming Platform"
  setup
  install_global_packages
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o hv --long help,verbose -n 'init_<name_here>' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
    -v | --verbose)
      VERBOSE=true
      shift
      ;;

    -h | --help)
      _help
      exit 0
      ;;

    --)
      shift
      break
      ;;

    *)
      err "Unknown option $1 to ${THIS_EXEC}"
      exit 2
      ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
