#!/usr/bin/env bash

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

declare VERBOSE=false;
declare FORCE=false;

# The home directory for all custom xrandr configuration.
declare XRANDR_HOME="${HOME}/.xrandr"
# The xrandr configuration subdirextory in this dotfiles repository
declare XRANDR_DOT="${DOTFILES_REPO}/copy/xrandr"
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

Initialize configuration for the xrandr display manipulation tool.

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.

  -v | --verbose
    Run with extra logging output.

  -f | --force
    Force overwriting of any existing xrandr config directories on the file
    system. Please exercise caution when using this option, as it may destroy
    your personal configuration!
EOF
}

copy_xrandr_config_files() {
  log_info "Copying xrandr configuration files to ${XRANDR_HOME}"
  if [ -d "${XRANDR_HOME}" ] && ! "${FORCE}"; then
    warn "${XRANDR_HOME} already exists! Not overwriting." \
      "Re-run with --force to force overwriting of this directory."
    return 1
  elif "${FORCE}"; then
    rm -rf "${XRANDR_HOME}"
  fi
  cp -r "${XRANDR_DOT}" "${XRANDR_HOME}"
}

main() {
  copy_xrandr_config_files

  cat <<EOF
Done! Don't forget to look at the xrandr script located at:
  ${XRANDR_HOME}
and make any adjustments necessary for your particular output device setup.

This script is executed in ~/.xprofile by default. If you do not want the xrandr
script to be run when you login to an X session, see the relevant section of
~/.xprofile and remove that block of code.

The example script contains a configuration that worked for the script's author,
but it likely will not work for you without tweaking the names of the output
devices at the very least.
EOF
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o hvf --long help,verbose,force -n 'init_xrandr' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
    -v | --verbose)
      VERBOSE=true
      shift
      ;;

    -h | --help)
      _help
      exit 0
      ;;

    -f | --force)
      FORCE=true
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      err "Unknown option $1 to ${THIS_EXEC}"
      exit 2
      ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
