#!/usr/bin/env bash

# Trap errors and print error message
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

declare IMPORT="${DOTFILES_REPO}/bash/source"
declare VERBOSE=false
# }}}

# Imports {{{
source "${IMPORT}/colors.bash"
source "${IMPORT}/functions_log.bash"
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

Clones and installs the icons-in-terminal package

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.

  -v | --verbose
    Run with extra logging output.
EOF
  exit 0
}

# Install icons-in-terminal from GitHub
install_icons_in_terminal() {
  log_info "Cloning icons-in-terminal"
  local iotUrl="git@github.com:sebastiencs/icons-in-terminal.git"
  local iotDest="${WS}/icons-in-terminal"
  git clone "$iotUrl" "$iotDest"
  # Run the installer
  log_info "Installing icons-in-terminal"
  (
    cd "$iotDest"
    ./install.sh
  )
}

# Install ls-icons from GitHub
install_ls_icons() {
  log_info "Cloning ls-icons"
  local lsIconsUrl="git@github.com:sebastiencs/ls-icons.git"
  local lsIconsDest="${WS}/ls-icons"
  git clone "$lsIconsUrl" "$lsIconsDest"
  log_info "Installing ls-icons"
  (
    cd "$lsIconsDest"
    ./bootstrap
    # Execute this line _only_ if your terminal doesn't support true colours
    # export CFLAGS=-DNO_TRUE_COLOURS=1
    export CC=clang CXX=clang++
    ./configure --prefix=/opt/coreutils
    make
    sudo make install
    # /opt/coreutils/bin/ls
  )
}

main() {
  install_icons_in_terminal
  install_ls_icons
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o hvf --long help,verbose,full-install -n 'init_arch' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -v | --verbose)
    VERBOSE=true
    shift
    ;;

  -h | --help)
    _help
    shift
    break
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main

# vim:foldenable:foldmethod=marker:
