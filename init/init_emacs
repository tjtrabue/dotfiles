#!/usr/bin/env bash

trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare DOTFILES_EMACS="${DOTFILES_REPO}/link/emacs"
declare EMACS_CONF="${HOME}/.emacs.d"
declare ORG_CONFIG_FILE_NAME="my-init.org"
declare EMACS_CONF_ORG_DOT="${DOTFILES_EMACS}/${ORG_CONFIG_FILE_NAME}"
declare EMACS_CONF_ORG_HOME="${EMACS_CONF}/${ORG_CONFIG_FILE_NAME}"
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh" && src
# }}}

# Functions {{{

# Prepare the user's home Emacs config directory.
init_emacs_d() {
  local d
  mkdir -p "${EMACS_CONF}"

  # Clear out any existing config directories and link our dotfiles
  # directories under .emacs.d/
  log_info "Linking directories under ${EMACS_CONF}"
  find "${DOTFILES_EMACS}" -maxdepth 1 -mindepth 1 -type d \
    -exec ln -sf -t "${EMACS_CONF}" '{}' \;
}

# Link all standard configuration files in the ~/.dotfiles/link/emacs directory
# to ~/.emacs.d/
link_emacs_config_files() {
  log_info "Linking emacs config filest to ${EMACS_CONF}"
  find "${DOTFILES_EMACS}" -maxdepth 1 -mindepth 1 -type f \
    -exec ln -sf -t "${EMACS_CONF}" '{}' \;
}

make_emacs_directories() {
  log_info "Creating additional emacs config directories"
  mkdir -p "${EMACS_CONF}/plugin"
}

# Main entry point for emacs initialization.
main() {
  print_header "Initializing Emacs"
  init_emacs_d
  link_emacs_config_files
  make_emacs_directories
  clone_roam_notes
  log_info "Done"
}
# }}}

main

# vim:foldenable:foldmethod=marker:
