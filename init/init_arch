#!/usr/bin/env bash

# Variables {{{
declare DOTFILES_REPO="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

declare VERBOSE=false
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

<insert description here>

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.

  -v | --verbose
    Run with extra logging output.
EOF
}

# Adjust the /etc/makepkg.conf file to suit our needs.
edit_makepkg_file() {
  local systemMkpkgConfFile="/etc/makepkg.conf"
  if [ -f "${systemMkpkgConfFile}" ]; then
    log_info "Configuring ${systemMkpkgConfFile}"
    # Make sure that the makepkg utility utilized all processor cores to speed up
    # pacman package builds.
    sudo sed -i -r "s/^(MAKEFLAGS)=.*/\1=\"-j\$(nproc)\"/" \
      "${systemMkpkgConfFile}"
  else
    warn "No ${systemMkpkgConfFile} file found!"
  fi
}

main() {
  print_header "Initializing Arch Linux"
  edit_makepkg_file
  # Make sure that an AUR helper program is available to the user
  install_aur_helper
  succ "Done initializing Arch Linux!"
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o hv --long help,verbose -n 'init_<name_here>' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -v | --verbose)
    VERBOSE=true
    shift
    ;;

  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
