#!/usr/bin/env bash

# Trap errors and print error message
trap 's=$?; echo "$0: Error on line "${LINENO}": ${BASH_COMMAND}"; exit $s' ERR

# Variables {{{
declare DOTFILES_HOME="${HOME}/.dotfiles"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

# Logging variables
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_HOME}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  cat <<EOF
${THIS_EXEC}

Initialize a macOS computer with necessary tools and configuration to get
cracking.

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

main() {
  print_header "Initializing macOS"
  install_mac_developer_tools
  install_homebrew
  # Install the most important tools first.
  install_gnu_cli_tools_for_mac
  # Make sure the GNU CLI tools are used instead of the terrible BSD versions
  # which are used by default.
  create_gnu_cli_tool_aliases_for_mac
  # Install remaining macOS packages.
  install_mac_packages
  succ "Done!"
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'init_mac' -- "$@")
eval set -- "${args}"

# extract options and their arguments into variables.
while true; do
  case "$1" in
    -h | --help)
      _help
      exit 0
      ;;

    --)
      shift
      break
      ;;

    *)
      err "Unknown option $1 to ${THIS_EXEC}"
      exit 2
      ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
