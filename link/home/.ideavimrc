" Configuration file for IdeaVim plugin for IntelliJ IDEA.

" Emulated Plugins {{{
" These plugins are based on popular Vim plugins, and must be activated
" specially.

Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'tommcdo/vim-exchange'
Plug 'machakann/vim-highlightedyank'
Plug 'kana/vim-textobj-entire'
Plug 'dbakker/vim-paragraph-motion'
Plug 'michaeljsmith/vim-indent-object'
Plug 'vim-matchit'
" }}}

" General {{{
" Make Vim more useful
set nocompatible

" Use system clipboard from IdeaVim and vice versa.
set clipboard+=unnamed
set clipboard+=ideaput

" Allow backspace in insert mode
set backspace=indent,eol,start

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Don’t add empty newlines at the end of files
set binary
set noeol

" Use F2 to toggle paste mode for pasting in text from the system clipboard
set pastetoggle=<F2>

" Set to auto read when a file is changed from the outside
set autoread

" Tell Vim where to find files when autocompleting. Vim first looks in the directory containing the
" current file (.), then the current working directory (,,), then each directory under the
" current directory (**)
set path=.,,**

" Hide old buffers instead of close them when editing a new one. That is, allow
" the user to have unsaved changes in a buffer and still be able to open a new
" one.
set hidden

" Remember info about open buffers on close
set viminfo^=%

set ideajoin
set idearefactormode=keep
" }}}

" Mapleader {{{

" Mapleader is a special key that, when pressed in normal mode, acts as a
" prefix for launching special editor actions. This is where we define the key
" to act as the mapleader. Later on, any normal mode mapping that includes
" <leader> will refer to this binding.
let mapleader=","
" }}}

" Backups {{{
" Set lines of history for Vim to remember to 700
set history=700

" Open files with cursor at last edited position
if has('autocmd')
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif
endif
" }}}

" UI Config {{{
" Draw a vertical ruler at 1 character after textwidth to designate max width
" for coding
set colorcolumn=+1
:highlight ColorColumn ctermbg=lightgrey guibg=lightgrey

" Set text width to 80 characters
set textwidth=80

" Wrap lines
set wrap

" Copy the previous indentation on autoindenting
set copyindent

" Enhance command-line completion
set wildmenu

" Ignore these file extensions when autocompleting
set wildignore=*.swp,*.bak,*.pyc,*.class

" Only redraw screen when needed (makes for faster macros)
set lazyredraw

" Show matching [{()}]
set showmatch

" Show partial commands in the last line of the screen
 set showcmd

" Enable syntax highlighting
syntax enable

" Respect modeline in files
set modeline
set modelines=1

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Highlight current line
set cursorline

" Show “invisible” characters
" Mark lines that extend past the end of the screen with a '#'
set lcs=tab:▸\ ,trail:·,extends:#,eol:¬,nbsp:_
set list

" Always show status line
set laststatus=2

" Enable mouse in all modes
set mouse=a

" Disable error bell
set noerrorbells

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Don’t reset cursor to start of line when moving around
set nostartofline

" Show the cursor position
set ruler

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Set the command window height to 2 lines, to avoid many cases of having to
" 'press <Enter> to continue'
set cmdheight=2

" Use hybrid line numbers (found by setting both number and relativenumber)
if exists("&relativenumber")
    set number relativenumber
    au BufReadPost * set number relativenumber
endif

" Switch to absolute line numbers if Vim loses focus
:au FocusLost * :set number norelativenumber
:au FocusGained * :set number relativenumber

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Start scrolling three columns before vertical border of window
set sidescrolloff=3

" Cause pane splits to occur below (for horizontal split) and to the right
" (for vertical splits)
set splitbelow
set splitright
" }}}

" Searching {{{
" Use normal regular expression syntax and character meaning
" (should be on by default anyway)
set magic

" Highlight searches
set hlsearch

" Highlight dynamically as pattern is typed
set incsearch

" Ignore case when searching
set ignorecase

" Turn on case-sensitivity if user types an upper-case letter
set smartcase
" }}}

" Tabs and Spaces {{{
" Translate tabs to spaces
set expandtab

" Set tab size to 4 spaces
set tabstop=2

" Don't use soft tabs, so as to avoid compatibility errors with other editors
set softtabstop=2
set shiftwidth=2

" Use multiples of shiftwidth when indenting with '<' and '>'
set shiftround

" Insert tabs on the start of a line according to shiftwidth, not tabstop
set smarttab
" }}}

" Indentation {{{
" Use auto-indent
set autoindent
filetype indent plugin on
set smartindent
" }}}

" Folding {{{
" Basic command reference:
"   Open all folds  : zR
"   Close all folds : zM

" Enable folding (code block collapsing)
set foldenable

" Start folding from the very beginning
set foldlevel=0

" Nest at most 10 folds
set foldnestmax=10

" Fold based on language syntax by default
set foldmethod=syntax
" }}}

" Movement {{{
" Disable arrow keys in all modes *gasp!*
" I know, but get over it. You need to learn to use Vim's intended movement
" buttons, and trust me, you'll thank me when you do.
map <UP> <NOP>
map <DOWN> <NOP>
map <LEFT> <NOP>
map <RIGHT> <NOP>
imap <UP> <NOP>
imap <DOWN> <NOP>
imap <LEFT> <NOP>
imap <RIGHT> <NOP>

" Move up and down by visual line, not actual line.
" i.e., if a line gets visually wrapped due to your text wrapping setting, j will not skip
" over the "fake" part of the visual line in favor of the "real" one.
nnoremap j gj
nnoremap k gk

" Highlight last inserted text
nnoremap gV `[v`]
" }}}

" Normal Mode Mappings {{{

" Editing and Reloading the ~/.ideavimrc file
nnoremap <leader>e :e ~/.ideavimrc<CR>
nnoremap <leader>R :action IdeaVim.ReloadVimRc.reload<CR>

" Use 'ZC' to enter command mode
nnoremap ZC :

" Move lines with Alt-j and Alt-k
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==

" Make 'Y' yank to the end of the current line.
" This makes 'Y' behave more like other 'capital letter' commands.
nnoremap Y y$

" Navigate IntelliJ editor tabs with vim-unimpaired style bindings.
nnoremap [b :action PreviousTab<CR>
nnoremap ]b :action NextTab<CR>

" Method navigation
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>

" Refactoring/Optimizing
nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>= :action ReformatCode<CR>
nnoremap <leader>o :action OptimizeImports<CR>

" Searching and Source Code Navigation
nnoremap <c-/> :action FindInPath<CR>
nnoremap <c-a> :action GotoAction<CR>
nnoremap <c-f> :action GotoFile<CR>
nnoremap <leader>a :action GotoAction<CR>
nnoremap <leader>b :action ShowNavBar<CR>
nnoremap <leader>f :action GotoFile<CR>
nnoremap <leader>h :action CallHierarchy<CR>
nnoremap <leader>s :action GotoRelated<CR>
nnoremap <leader>u :action FindUsages<CR>
nnoremap <c-s> :action FileStructurePopup<CR>
nnoremap <c-o> :action GotoSymbol<CR>
nnoremap gc :action GotoClass<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gd :action GotToDeclaration<CR>
nnoremap gp :action GotToSuperMethod<CR>
nnoremap gt :action GotoTest<CR>
nnoremap gb :action Back<CR>
nnoremap gf :action Forward<CR>
" }}}

" Insert Mode Mappings {{{
" Use 'jk' as an Escape alias to exit insert and visual modea.
inoremap jk <ESC>

" Move lines with Alt-j and Alt-k
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
" }}}

" Visual Mode Mappings {{{
" Move lines with Alt-j and Alt-k
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

vnoremap < <gv
vnoremap > >gv

" Pressing * or # searches for the current visual selection
vnoremap <silent> * :call setreg("/",
    \ substitute(<SID>GetSelectedText(),
    \ '\_s\+',
    \ '\\_s\\+', 'g')
    \ )<Cr>n

vnoremap <silent> # :call setreg("?",
    \ substitute(<SID>GetSelectedText(),
    \ '\_s\+',
    \ '\\_s\\+', 'g')
    \ )<Cr>n
" }}}

" Buffer Configuration {{{

" Jump to buffer number 1-9 with ',<N>' or 1-99 with '<N>gb'
let c = 1
while c <= 99
  if c < 10
    execute "nnoremap <silent> <leader>" . c . " :" . c . "b<CR>"
  endif
  execute "nnoremap <silent> " . c . "gb :" . c . "b<CR>"
  let c += 1
endwhile

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry
" }}}

" Autocommands {{{

" EVERY auto command in this section should be inside of the enclosing 'if'
" statement to avoid compatibility issues with versions of Vim that do not have
" autocmd functions.
if has('autocmd')
    " Make line numbers absolute upon entering insert mode, and
    " make them relative upon leaving insert mode.
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set number relativenumber

    " Enable file type detection
    filetype on

    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript

    " Treat .md files as Markdown
    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown

    " Strip trailing whitespace on buffer write
    autocmd BufWritePre * :%s/\s+$//e

    " Move cursor to last known position when reopening a file
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
          \| exe "normal! g'\"" | endif

    " Interpret config files for IDE Vim plugins as Vim syntax
    autocmd BufNewFile,BufRead .vrapperrc set filetype=vim syntax=vim
endif
" }}}

" vim:foldenable:foldmethod=marker
