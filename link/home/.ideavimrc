" Configuration file for IdeaVim plugin for IntelliJ IDEA.

" General {{{

" Use system clipboard from IdeaVim and vice versa.
set clipboard+=unnamed
set clipboard+=ideaput

" Add the g flag to search/replace by default
set gdefault

" Remember info about open buffers on close
set viminfo^=%

" Time in milliseconds to wait for a key sequence to complete.
" It is 1000 by default.
" Set it to a longer time interval for better 'which-key' behavior.
set timeoutlen=5000
" }}}

" IntelliJ specific settings {{{

" Make the IDE perform the join command.
set ideajoin

" Define the mode that would be enabled during the refactoring
" (renaming, live template, introduce variable, etc).
"
" Use one of the following values:
"   keep  - keep the mode that was enabled before starting a refactoring
"   select - start refactoring in select mode
"   visual - start refactoring in visual mode
set idearefactormode=keep
" }}}

" Mapleader {{{

" Mapleader is a special key that, when pressed in normal mode, acts as a
" prefix for launching special editor actions. This is where we define the key
" to act as the mapleader. Later on, any normal mode mapping that includes
" <leader> will refer to this binding.
let mapleader=","
" }}}

" Backups {{{
" Set lines of history for Vim to remember to 700
set history=700

" Open files with cursor at last edited position
if has('autocmd')
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif
endif
" }}}

" UI Config {{{

" Show partial commands in the last line of the screen
 set showcmd

" Use visual bell instead of beeping when doing something wrong
set visualbell

" Don’t reset cursor to start of line when moving around
set nostartofline

" Show the current mode
set showmode

" Show the (partial) command as it’s being typed
set showcmd

" Always show line numbers
set number
" When used in conjunction with `set number`, show hybrid line numbers.
set relativenumber

" Switch to absolute line numbers if Vim loses focus
:au FocusLost * :set number norelativenumber
:au FocusGained * :set number relativenumber

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Start scrolling three columns before vertical border of window
set sidescrolloff=3
" }}}

" Searching {{{

" Highlight searches
set hlsearch

" Highlight dynamically as pattern is typed
set incsearch

" Ignore case when searching
set ignorecase

" Turn on case-sensitivity if user types an upper-case letter
set smartcase

" Searches wrap around the end of file.
set wrapscan
" }}}

" Movement {{{
" Disable arrow keys in all modes *gasp!*
" I know, but get over it. You need to learn to use Vim's intended movement
" buttons, and trust me, you'll thank me when you do.
map <UP> <NOP>
map <DOWN> <NOP>
map <LEFT> <NOP>
map <RIGHT> <NOP>
imap <UP> <NOP>
imap <DOWN> <NOP>
imap <LEFT> <NOP>
imap <RIGHT> <NOP>

" Move up and down by visual line, not actual line.
" i.e., if a line gets visually wrapped due to your text wrapping setting, j will not skip
" over the "fake" part of the visual line in favor of the "real" one.
nmap j gj
nmap k gk

" Highlight last inserted text
nmap gV `[v`]
" }}}

" sethandler {{{

" Description of sethandler {{{
" IdeaVim allows defining handlers for the shortcuts that exist for both IDE
" and Vim (e.g. <C-C>).
"
" This option consist of an optional shortcut and a list of space separated
" list of handlers:
"   sethandler <key> <mode-list:handler> [<mode-list:handler> ...]
"
" The mode-list is a dash separated list of modes that is similar to guicursor
" notation and defines the following modes:
"
" n - normal mode
" i - insert mode
" x - visual mode
" v - visual and select modes
" a - all modes
"
" The handler is an argument that may accept the following values:
"
" ide - use IDE handler
" vim - use Vim handler
" }}}

sethandler <C-n> i:ide
sethandler <C-p> i:ide
sethandler <C-j> i:ide
sethandler <C-k> i:ide
" }}}

" Normal Mode Mappings {{{

" Editing and Reloading the ~/.ideavimrc file
nmap <leader>e :e ~/.ideavimrc<CR>
nmap <leader>R :source ~/.ideavimrc<CR>

" Move statements with Alt-j and Alt-k
nmap <A-j> <Action>(MoveStatementDown)
nmap <A-k> <Action>(MoveStatementUp)

" Make 'Y' yank to the end of the current line.
" This makes 'Y' behave more like other 'capital letter' commands.
nmap Y y$

" Navigate IntelliJ editor tabs with vim-unimpaired style bindings
nmap [b <Action>(PreviousTab)
nmap ]b <Action>(NextTab)

" Buffer management {{{
" Delete buffer
nmap <leader>bd :bd<CR>
" }}}

" Terminal {{{
nmap <C-t> <Action>(ActivateTerminalToolWindow)
nmap <leader>t <Action>(Terminal.OpenInTerminal)
" }}}

" Method navigation {{{
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
" }}}

" Line numbers {{{
nmap <leader>N :set relativenumber!<CR>
" }}}

" Refactoring/Optimizing {{{
nmap <leader>r <Action>(Refactorings.QuickListPopupAction)
vmap <leader>r <Action>(Refactorings.QuickListPopupAction)
nmap <leader>= <Action>(ReformatCode)
nmap <leader>o <Action>(OptimizeImports)
" }}}

" Project Build/Test/Run {{{
nmap <leader>pb <Action>(Compile)
nmap <leader>pd <Action>(Debug)
nmap <leader>pr <Action>(Run)
" }}}

" Breakpoints {{{
nmap <leader>bb <Action>(ToggleLineBreakpoint)
" }}}

" Documentation {{{

" Quick documentation (not only for Java, all languages)
nmap <leader>qd <Action>(QuickJavaDoc)
" Show description of the error under the cursor
nmap <leader>qe <Action>(ShowErrorDescription)
" Quick definition of the thing under the cursor
nmap <leader>qi <Action>(QuickImplementations)
" }}}

" Searching and Source Code Navigation {{{
nmap <C-/> <Action>(FindInPath)
nmap <C-a> <Action>(GotoAction)
nmap <C-p> <Action>(GotoFile)
nmap <leader>a <Action>(GotoAction)
nmap <leader>f <Action>(GotoFile)
nmap <leader>h <Action>(CallHierarchy)
nmap <leader>s <Action>(GotoRelated)
nmap <leader>u <Action>(FindUsages)
nmap <leader>v <Action>(ShowNavBar)
nmap <leader>w <Action>(Switcher)
nmap <C-s> <Action>(FileStructurePopup)
nmap <C-o> <Action>(GotoSymbol)
nmap gC <Action>(GotoClass)
nmap gi <Action>(GotoImplementation)
nmap gd <Action>(GotToDeclaration)
nmap gp <Action>(GotToSuperMethod)
nmap gt <Action>(GotoTest)
nmap gb <Action>(Back)
nmap gf <Action>(Forward)
" }}}
" }}}

" Insert Mode Mappings {{{
" Use 'jk' as an Escape alias to exit insert and visual modea.
imap jk <ESC>

" Move statements with Alt-j and Alt-k
imap <A-j> <Action>(MoveStatementDown)
imap <A-k> <Action>(MoveStatementUp)

" Cycle completion

" NOTE: Broken in IntelliJ 2020
"       Now you have to go to: Settings > Keymap, and map C-j and C-k to Down
"       and Up, respectively. You also need to make sure that C-j and C-k are
"       handled by the IDE in insert mode, instead of being handled by Vim.
" imap <C-j> <Action>(HippieCompletion)
" imap <C-k> <Action>(HippieBackwardCompletion)
" }}}

" Visual Mode Mappings {{{
" Move lines with Alt-j and Alt-k
vmap <A-j> <Action>(MoveStatementDown)
vmap <A-k> <Action>(MoveStatementUp)

" Indent visual blocks in a natural way with < and >
vmap < <gv
vmap > >gv

" Pressing * or # searches for the current visual selection
vmap <silent> * :call setreg("/",
    \ substitute(<SID>GetSelectedText(),
    \ '\_s\+',
    \ '\\_s\\+', 'g')
    \ )<Cr>n

vmap <silent> # :call setreg("?",
    \ substitute(<SID>GetSelectedText(),
    \ '\_s\+',
    \ '\\_s\\+', 'g')
    \ )<Cr>n
" }}}

" Buffer Configuration {{{

" Jump to buffer number 1-9 with ',<N>' or 1-99 with '<N>gb'
let c = 1
while c <= 99
  if c < 10
    execute "nmap <silent> <leader>" . c . " :" . c . "b<CR>"
  endif
  execute "nmap <silent> " . c . "gb :" . c . "b<CR>"
  let c += 1
endwhile

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry
" }}}

" Autocommands {{{

" Treat .json files as .js
autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript

" Treat .md files as Markdown
autocmd BufNewFile,BufRead *.md setlocal filetype=markdown

" Strip trailing whitespace on buffer write
autocmd BufWritePre * :%s/\s+$//e

" Move cursor to last known position when reopening a file
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif

augroup toggleRelativeLineNumbers
  " Make line numbers absolute upon entering insert mode, and
  " make them relative upon leaving insert mode.
  autocmd!
  autocmd InsertEnter,BufLeave,WinLeave,FocusLost * nested
    \ if &l:number && empty(&buftype) |
    \ setlocal norelativenumber |
    \ endif
  autocmd InsertLeave,BufEnter,WinEnter,FocusGained * nested
    \ if &l:number && empty(&buftype) |
    \ setlocal relativenumber |
    \ endif
augroup END
" }}}

" Emulated Plugins {{{
" These plugins are based on popular Vim plugins, and must be activated
" individually before they take effect. IdeaVim supports vim-plug syntax for
" activating plugins, which allows easy interoperability with an existing
" ~/.vimrc file.

set NERDTree
set surround
set multiple-cursors
set commentary
set argtextobj
set exchange
set textobj-entire
set highlightedyank
set vim-paragraph-motion
set textobj-indent
set matchit

" These emulated Vim plugins require additional IntelliJ plugins to be
" installed from the plugin marketplace.
"
" Requires: IdeaVim-EasyMotion, AceJump
set easymotion
" Requires: Which-Key
set which-key

" Plugin Configuration {{{

" EasyMotion {{{
" Use easymotion instead of standard f/t bindings
" Jump to word starting with char
nmap f <Plug>(easymotion-s)
nmap t <Plug>(easymotion-s)
" Jump to word
nmap F <Plug>(easymotion-bd-w)
nmap T <Plug>(easymotion-bd-w)
" Jump to start of line content
nmap L <Plug>(easymotion-bd-jk)
" }}}

" NERDTree {{{
nmap <leader>nt :NERDTree<CR>
nmap <leader>nf :NERDTreeFocus<CR>
nmap <leader>ns :NERDTreeFind<CR>
nmap <leader>nr :NERDTreeRefreshRoot<CR>
" }}}

" multiple cursors {{{
" Don't use defualt mappings
let g:multi_cursor_use_default_mapping=0

" Custom keymappings
" The default '<A-n>', '<A-p>' bindings don't work on macOS because macOS treats
" <A-n> as a 'dead key' in order to enter accented characters.
nmap <C-n>  <Plug>NextWholeOccurrence
xmap <C-n>  <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
nmap <C-x>  <Plug>SkipOccurrence
xmap <C-x>  <Plug>SkipOccurrence
nmap <C-m>  <Plug>RemoveOccurrence
xmap <C-m>  <Plug>RemoveOccurrence

nmap <S-C-n>  <Plug>AllWholeOccurrences
xmap <S-C-n>  <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
" }}}

" }}}
" }}}

" vim:foldenable:foldmethod=marker
