#!/bin/sh

# This file holds environment varibles and should be kept in the user's
# $HOME directory. This file should be tracked by the user's version control
# system, and should not contain any machine-local configuration. If the user
# does need to add local environment variable overrides, they should place those
# variables in ~/.var_overrides. Anything placed in ~/.var_overrides will take
# precedence over the definitions in this file.

# General {{{
export NAME="Thomas Jacob Trabue"
# }}}

# Dotfiles {{{
export VAR_FILE="${HOME}/.vars"
export VAR_OVERRIDES_FILE="${HOME}/.var_overrides"
export PATH_FILE="${HOME}/.path"
export LUA_PATH_FILE="${HOME}/.luapath"
export LEAN_PROFILE="${HOME}/.lean_profile"
export DOTFILES_HOME="${HOME}/.dotfiles"
export DOTFILES_COPY="${DOTFILES_HOME}/copy"
export DOTFILES_LINK="${DOTFILES_HOME}/link"
export DOTFILES_LUA="${DOTFILES_HOME}/lua"
export DOTFILES_CONFIG="${DOTFILES_LINK}/config"
export DOTFILES_INIT="${DOTFILES_HOME}/init"
export DOTFILES_SHELL="${DOTFILES_HOME}/shell"
export DOTSOURCE_BASH="${DOTFILES_SHELL}/bash/source"
export DOTSOURCE_ZSH="${DOTFILES_SHELL}/zsh/source"
export DOTFILES_PACKAGES_DIR="${DOTFILES_HOME}/init/package_files"
export DOTFILES_PLUGINS_DIR="${DOTFILES_HOME}/init/plugin_files"
export DOTFILES_PROJECTS_DIR="${DOTFILES_HOME}/init/project_lists"

# Other directories
export WS="${HOME}/workspace"
export APPS="${HOME}/applications"
export ARCHIVES="${APPS}/archives"
export USER_CONF="${HOME}/.config"

# Directory containing dotfiles not under version control
export EXTRA_DOTFILES="${HOME}/.extra"

# Directory containing directory history files.
# If not set, defaults to /tmp
export DIR_HIST_FILE_DIR="${HOME}/.dir_history"
# The beginning of each directory history file name.
# For example, a prefix of "dir_hist" means the directory history files have
# names like "/tmp/dir_hist.1234567890"
export DIR_HIST_FILE_PREFIX="dir_hist"
# The number of lines to maintain in the DIR_HIST_FILE.
export DIR_HIST_LIMIT=30
# The file containing directory aliases.
export DIR_ALIAS_FILE="${HOME}/.dirs"
# }}}

# Editor {{{
# Use Neovim as default editor if available. Otherwise, fall back on Vim.
if [ -x "$(command -v nvim)" ]; then
  EDITOR="nvim"
elif [ -x "$(command -v vim)" ]; then
  EDITOR="vim"
else
  EDITOR="vi"
fi
export EDITOR

# The user's Neovim config directory.
export NVIM_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}/nvim"

# Set GUI editor.
export VISUAL="emacs"

# Set the editor used by the 'sudoedit' command.
export SUDO_EDITOR="${EDITOR}"

# Also set the editor that Git launches by default to edit commits.
export GIT_EDITOR="${EDITOR}"
# }}}

# Logging {{{
# The log level for logging output functions, such as `err`, `warn`, and
# `log_info`.
# ______________________________
# | Level Number | Ouput Level |
# |            1 | error       |
# |            2 | warning     |
# |            3 | info        |
# |            4 | debug       |
# ______________________________
export LOG_LEVEL=3
# }}}

# Git {{{
export SW_CONFIG_DIR="${USER_CONF}/sw"
export SW_HISTORY_DIR="${SW_CONFIG_DIR}/history"

# Default character used to separate words in a branch name.
# I.e., if this variable is set to ".", then when creating a branch with
# functions in this repostitory, a branch name argument of "this is my branch"
# will become "this.is.my.branch".
export BRANCH_WORD_SEPARATOR="-"

# Default character used to separate the project slug (i.e., 'PROJ-1234') from
# the branch description (i.e., 'add-a-cool-feature') in a project branch name.
#
# The full branch name constructed using the above example components is
# 'PROJ-1234/add-a-cool-feature'.
export BRANCH_SECTION_SEPARATOR="/"

# The default commit message style for Git projects.
# See `pcm -h` for more details.
export PROJECT_MSG_STYLE="colon"

#
export PROJECT_IDENTIFIER=""

#
export PROJECT_TASK_NUMBER=""
# }}}

# Erlang {{{
# This flag is used when building Erlang distributions. It means compile with
# documentation hunks included. Very nice for IDE integration.
export KERL_BUILD_DOCS="yes"
# }}}

# Elixir {{{
# Enable iex shell history for easy access to previously run commands.
export ERL_AFLAGS="-kernel shell_history enabled"

# Directory for custom-managed elixir-ls distributions.
export ELIXIR_LS_HOME="${HOME}/.elixir_ls_installs"
# }}}

# Java {{{
# Commented out because jenv takes care of setting java home for us.
# Can uncomment if jenv is unused.
# export JAVA_HOME="/usr/lib/jvm/default"

# jenv is a Java version manager similar to rbenv for Ruby.
# You can install it by simply cloning its GitHub repo to this directory.
# (see init_jenv for automated install script)
export JENV_HOME="${HOME}/.jenv"

if [ -n "$(command -v jenv)" ]; then
  # Set JAVA_HOME with jenv when possible
  export JAVA_HOME="$(jenv javahome)"
fi

# Home directory for sdkman, the Java toolchain version manager.
export SDKMAN_DIR="${HOME}/.sdkman"

# Make android tools work across reboots
export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions'
# }}}

# Groovy {{{
# Groovy is another tool that SDKMAN can install and setup.
# Uncomment and set if you do not use SDKMAN to manage Groovy.
# export GROOVY_HOME="/usr/local/opt/groovy/libexec"
# }}}

# NodeJS {{{
export NPM_CONFIX_PREFIX="${HOME}/.npm-global"
export NODE_PACKAGES_FILE="${DOTFILES_HOME}/init/package_files/node_packages.txt"
# nvm home directory.
export NVM_DIR="${HOME}/.nvm"

# You can set any NPM config variable as an environment variable by prefixing
# its name with "npm_config_". For example:
#   export npm_config_registry="https://my.npm.registry.domain.com"
# or:
#   export npm_config_email="myaddress@gmail.com"
#
# NOTE: if any desired config settings include hyphens, replace them with
#       underscores in the exported shell variable name. Thus,
#         always-auth = true -> export always_auth=true
#       Also, the case of any exported NPM variables does not matter, i.e.,
#         ALWAYS_AUTH == always_auth == Always_Auth
# }}}

# Go Lang {{{

# Enable Go modules
export GO111MODULE=on

# Package file for Go
export GO_PACKAGES_FILE="${DOTFILES_PACKAGES_DIR}/go_packages.txt"
# }}}

# ls (file listing) {{{
# Whether or not to use ls-icons (if available)
export USE_LS_ICONS=true
# The directory housing the $LS_COLORS database files
export DIRCOLORS_DIR="${USER_CONF}/dircolors"
# The selected $LS_COLORS database file.
export DIRCOLORS_FILE="${DIRCOLORS_DIR}/tomorrow-night-eighties.dircolors"
# }}}

# Pager {{{
# Set the manpager to less, instead of col (the default)
export MANPAGER="less -X"

# If available, use `bat` as a colorized manpager
if [ -x "$(command -v bat)" ]; then
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# The syntax theme to use for bat and related CLI tools, such as git-delta.
# Run `bat --list-themes` to see which themes are available.
export BAT_THEME="OneHalfDark"

# Less and Less termcap variables {{{
export LESS="-X --RAW-CONTROL-CHARS -i"

# Termcap
export LESS_TERMCAP_mb=$(
  tput bold
  tput setaf 1
) # red
export LESS_TERMCAP_md=$(
  tput bold
  tput setaf 4
) # blue
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(
  tput bold
  tput setaf 0
  tput setab 3
) # black on yellow
export LESS_TERMCAP_se=$(
  tput rmso
  tput sgr0
)
export LESS_TERMCAP_us=$(
  tput smul
  tput bold
  tput setaf 2
) # green
export LESS_TERMCAP_ue=$(
  tput rmul
  tput sgr0
)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)
export LESS_TERMCAP_ZN=$(tput ssubm)
export LESS_TERMCAP_ZV=$(tput rsubm)
export LESS_TERMCAP_ZO=$(tput ssupm)
export LESS_TERMCAP_ZW=$(tput rsupm)
export GROFF_NO_SGR=1 # For Konsole and GNOME-Terminal
# }}}
# }}}

# PostgreSQL {{{
# System-dependent. You will need to change this depending on your platform and Postgres version!
# export LD_LIBRARY_PATH="/usr/lib/postgresql/10/lib"

# Directory where the PostgreSQL data cluster will be stored.
# This directory's parent dir should be writable by your user's main group.
export PGDATA="/usr/local/var/postgres"
# }}}

# Python {{{
export PYTHON2_PACKAGES_FILE="${DOTFILES_PACKAGES_DIR}/python2_user_packages.txt"
export PYTHON3_PACKAGES_FILE="${DOTFILES_PACKAGES_DIR}/python3_user_packages.txt"
# Home directory for pyenv.
export PYENV_ROOT="${HOME}/.pyenv"
# Specify the directory where user packages should be installed.
export PYTHONUSERBASE="${HOME}/.local"
# }}}

# Perl {{{
export PERL_PACKAGES_FILE="${DOTFILES_PACKAGES_DIR}/perl_packages.txt"
# CPAN configuration
PERL5LIB="${HOME}/perl5/lib/perl5"
export PERL5LIB
PERL_LOCAL_LIB_ROOT="${HOME}/perl5"
export PERL_LOCAL_LIB_ROOT
PERL_MB_OPT="--install_base \"${HOME}/perl5\""
export PERL_MB_OPT
PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"
export PERL_MM_OPT
# Silence prompts for ExitUtils::MakeMaker,
# opting to use the default response every time.
# This helps make the CPAN install process much more automatic.
# May need to set this to 0 if you find yourself in an infinite loop.
export PERL_MM_USE_DEFAULT=1
# }}}

# Ruby {{{
export RUBY_PACKAGES_FILE="$DOTFILES_PACKAGES_DIR/ruby_packages.txt"
# rvm home directory.
export RVM_DIR="${HOME}/.rvm"
# }}}

# Lua {{{
export LUA_PACKAGES_FILE="${DOTFILES_PACKAGES_DIR}/luarocks_packages.txt"
# }}}

# Common Lisp {{{
COMMON_LISP_PACKAGES_FILE="${DOTFILES_PACKAGES_DIR}/common_lisp_packages.txt"
export COMMON_LISP_PACKAGES_FILE

# Specify the list of paths where ASDF searches for systems.
# Paths that end with a double-slash indicate a directory tree to be scanned
# recursively for systems.
# export CL_SOURCE_REGISTRY="${HOME}/common-lisp//:"
# }}}

# Terminal {{{
# Figure out which terminal program to use by default based on what is installed.
TERMINAL="$(command -v xterm)"
if [ "$(command -v "termite")" != "" ]; then
  TERMINAL="$(command -v "termite")"
elif [ "$(command -v "urxvt")" != "" ]; then
  TERMINAL="$(command -v "urxvt")"
elif [ "$(command -v "terminator")" != "" ]; then
  TERMINAL="$(command -v "terminator")"
else
  TERMINAL="$(command -v "xterm")"
fi
export TERMINAL
# }}}

# Display {{{
# X Environment Variables
export DISPLAY=":0.0"
# }}}

# Ag {{{
# Global rules for ignoring files in Ag searches.
export AG_IGNORE_FILE="${HOME}/.agignore"
# }}}

# FZF {{{
# Set default behavior for FZF on the command line
export FZF_DEFAULT_OPTS="--multi --cycle --border --inline-info --tabstop=2"

# Optimize how FZF lists files by default based on the current working directory
# and all installed search tools.
export FZF_DEFAULT_COMMAND='
if git rev-parse >>/dev/null 2>&1; then
  git ls-files --cached --others --exclude-standard
elif [ -x "$(command -v rg)" ]; then
  rg --ignore-file "${AG_IGNORE_FILE}" --hidden --files --vimgrep
elif [ -x "$(command -v ag)" ]; then
  ag --path-to-ignore "${AG_IGNORE_FILE}" --hidden -g ""
fi
'
# }}}

# ShellCheck {{{
export SHELLCHECK_OPTS="--external-sources"
# b}}}

# Maven {{{

# The location of the user's local Maven repository used as the root directory
# for all resolved dependencies.
export MAVEN_LOCAL_REPO="${HOME}/.m2/repository"

# Default parameters (-D args) passed to `mvn` on the command line.
MAVEN_DEFAULT_PARAMS="-Dhttps.protocols=TLSv1.2"
MAVEN_DEFAULT_PARAMS="${MAVEN_DEFAULT_PARAMS} -Dmaven.repo.local=\${MAVEN_LOCAL_REPO}"
MAVEN_DEFAULT_PARAMS="${MAVEN_DEFAULT_PARAMS} -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN"
MAVEN_DEFAULT_PARAMS="${MAVEN_DEFAULT_PARAMS} -Dorg.slf4j.simpleLogger.showDateTime=true"
MAVEN_DEFAULT_PARAMS="${MAVEN_DEFAULT_PARAMS} -Djava.awt.headless=true"
export MAVEN_DEFAULT_PARAMS
# }}}

# Mutt {{{
export MUTT_HOME="${USER_CONF}"
export MUTT_ATTACHMENTS_DIR="${MUTT_HOME}/attachments"
# }}}

# LLVM/Clang {{{
CLANGD_FLAGS="-j=$(nproc) --background-index --log=error --clang-tidy
--header-insertion-decorators --suggest-missing-includes"
export CLANGD_FLAGS
# }}}

# GNU Make {{{
# Use all of our processor cores by default
MAKEFLAGS="-j$(nproc)"
export MAKEFLAGS
# }}}

# Google Cloud Platform (GCP) {{{

# Use the new GKE cloud auth plugin when interacting with Kubernetes clusters
# in GKE.
export USE_GKE_GCLOUD_AUTH_PLUGIN=True
# }}}

# Emacs {{{
export EMACS_CONFIG_HOME="${HOME}/.emacs.d"
# Use plists instead of hash-tables in lsp-mode to enhance performance.
# NOTE: You MUST rebuilt all lsp-mode related packages if you change this
#       variable!
export LSP_USE_PLISTS=true
# }}}

# Neovim {{{

# Where Neovim appimages will be installed and expanded. appimages are the
# preferred method for installating Neovim on Linux distributions, but is not
# currently supported on Windows or macOS.
export NVIM_APPIMAGE_RELEASE_DIR="${NVIM_HOME:-${HOME}/.config/nvim}/.releases"

# Where the Neovim appimage files will be installed
export NVIM_APPIMAGE_INSTALL_PREFIX="/usr/local"
# }}}

# Vim {{{
export VIM_CONFIG_HOME="${HOME}/.vim"
export VIM_SWAPS="${VIM_CONFIG_HOME}/swaps"
export VIM_BACKUPS="${VIM_CONFIG_HOME}/backups"
export VIM_AUTOLOAD="${VIM_CONFIG_HOME}/autoload"
# }}}

# Icons {{{
export USER_ICON_DIR="${HOME}/.local/share/icons"
# }}}

# thefuck {{{
# The alias to use for very cool "thefuck" typography correction program.
# I try not to swear.
export THEF_ALIAS="fuq"
# }}}

# Email {{{
export EMAIL="tom.trabue@gmail.com"
export MAIL_DIR="${HOME}/Mail"
# }}}

# Project {{{
export PROJECT_ENV_FILE_NAME=".git_project.sh"
export CURRENT_PROJECTS_FILE="${DOTFILES_PROJECTS_DIR}/current_projects.txt"
# }}}

# Bash completion {{{
export USER_BASH_COMPLETION_DIR="${HOME}/.bash_completion.d"
# }}}

# ASDF version manager {{{
export ASDF_DIR="${HOME}/.asdf"
export ASDF_PLUGINS_FILE="${DOTFILES_PLUGINS_DIR}/asdf_plugins.txt"
# }}}

# Dart {{{
# DVM home directory
export DVM_ROOT="${HOME}/.dvm"
# }}}

# Android {{{

# The user's Android configuration directory
export ANDROID_HOME="${HOME}/.android"

# Needed for building Android apps on the command line.
export ANDROID_SDK_ROOT="/opt/android-sdk"
# }}}

# XML {{{
# The number of spaces xmllint uses to indent a file.
# The default value is two spaces: "  "
export XMLLINT_INDENT="  "
# }}}

# rclone {{{

# The name of the primary configured rclone remote.
# Run `rclone config` to set up a new remote.
export RCLONE_REMOTE="drive"
# }}}

# Wallpaper {{{
export WALLPAPER_DIR="${HOME}/wallpaper"
export WALLPAPER_FINGERPRINT_DB="${HOME}/.wallpaper_fingerprints"
# }}}

# Zsh {{{
export ZSH_COMPLETIONS_DIR="${ZDOTDIR:-${HOME}/.zsh}/completion"
# }}}

# vim:foldmethod=marker:foldlevel=0
