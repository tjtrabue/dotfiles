{
  // --- Base Config ---
  // Support completion trigger on insert enter
  "suggest.triggerAfterInsertEnter": true,
  // Timeout for completion window
  "suggest.timeout": 500,
  // Make completion automatically select the first completed item
  "suggest.noselect": false,
  // Min number of characters to type before completion fires
  "suggest.minTriggerInputLength": 2,
  "suggest.acceptSuggestionOnCommitCharacter": true,
  // Change snippet indicator
  "suggest.snippetIndicator": "â–º",

  "diagnostic.enable": true,
  "diagnostic.maxWindowHeight": 8,
  // Change default diagnostic signs
  "diagnostic.errorSign": "ðŸ•±",
  "diagnostic.infoSign": "ðŸ›ˆ",
  "diagnostic.hintSign": "?",

  // Use Neovim's codeLens feature
  "codeLens.enable": true,

  // CocList options
  "list.indicator": "î‚°",
  "list.maxHeight": 15,

  "list.source.files.command": "rg",
  "list.source.files.args": ["--hidden", "--files"],
  // Uncomment the next two lines to use ag instead of ripgrep
  //"list.source.files.command": "ag",
  //"list.source.files.args": ["--hidden", "--nogroup", "-g", ".*"],
  "list.source.files.excludePatterns": [
    "/tmp/*",
    "**/.git/*",
    "**/.node_modules/*"
  ],

  "list.source.grep.command": "rg",
  "list.source.grep.excludePatterns": [
    "/tmp/*",
    "**/.git/*",
    "**/.node_modules/*"
  ],

  // Special keybindings for COC lists
  "list.insertMappings": {
    "<C-c>": "do:exit"
  },
  "list.normalMappings": {
    "<C-c>": "do:exit"
  },

  // --- Extensions ---
  // coc-word
  "coc.source.word.filetypes": ["text", "markdown", "html"],

  // coc-css
  // Turn off coc-css validation so as not to interfere with coc-stylelintplus
  "css.validate": false,
  "less.validate": false,
  "scss.validate": false,
  "wxss.validate": false,

  // coc-explorer (awesome project explorer similar to many IDEs)
  "explorer.icon.enableVimDevions": true,
  "explorer.icon.enableNerdfont": true,
  "explorer.file.showHiddenFiles": true,

  // diagnostic-languageserver
  "diagnostic-languageserver.filetypes": {
    "c": "clang",
    "cpp": "clang",
    "eelixir": ["mix_credo", "mix_credo_compile"],
    "elixir": ["mix_credo", "mix_credo_compile"],
    "email": "languagetool",
    "markdown": ["write-good", "markdownlint"],
    "php": "phpcs",
    "sh": "shellcheck",
    "vim": "vint"
  },
  "diagnostic-languageserver.formatFiletypes": {
    "c": "clang-format",
    "cpp": "clang-format",
    "dart": "dartfmt",
    "eelixir": "mix_format",
    "elixir": "mix_format"
  },

  // Custom Language Servers configuration
  // (Should stay at the end to make it easy to find)
  "languageserver": {
    // coc-ccls does NOT work yet, so this config block is necessary to get CCLS
    // working with coc.nvim.
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
      "rootPatterns": [
        ".ccls",
        "compile_commands.json",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls"
        }
      }
    },
    "efm": {
      "command": "efm-langserver",
      "args": [],
      // custom config path
      // "args": ["-c", "/path/to/your/config.yaml"],
      "filetypes": ["vim", "eruby", "markdown", "yaml"]
    },
    "haskell": {
      // Use Haskell IDE Engine for LSP (can be installed via cabal from hackage)
      "command": "hie-wrapper",
      "args": ["--lsp"],
      "rootPatterns": ["stack.yaml", "cabal.config", "package.yaml"],
      "filetypes": ["hs", "lhs", "haskell"],
      "initializationOptions": {
        "languageServerHaskell": {
          "hlintOn": true
        }
      }
    },
    "lua": {
      // lua-lsp is the easiest lua languageserver to install and use, but Emacs
      // currently only suports EmmyLua languageserver.
      "command": "lua-lsp",
      "filetypes": ["lua"]
    }
  }
}
