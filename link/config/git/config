# This is the top-level Git configuration file for the user, and should be
# named:
#   ${XDG_CONFIG_HOME:-${HOME}/.config}/git/config
#
# NOTE: Older versions of Git may not recognize this file, in which case only
#       ~/.gitconfig should be used.
#
# Any options present in this file will be overridden by values specified in
# ~/.gitconfig, allowing this file to be kept in version control as a collection
# of machine-independent Git settings, and ~/.gitconfig to exist for the sole
# purpose of overriding values in this file locally.

[alias]
  br = branch
  ci = commit
  co = checkout
  df = diff
  g = grep -I
  lg = log -p
  pp = !"echo 'Pull'; git pull; echo 'Push'; git push"
  rb = rbranch
  rv = review
  st = status
  ksdiff = difftool -y -t Kaleidoscope

[apply]
  whitespace = fix

[branch]
  # Setup new local branches to automatically track their remote counterparts.
  autoSetupMerge = always
  # Always rebase instead of merging when pulling changes.
  autoSetupRebase = always
  # Show most recently changed branches first.
  sort = -committerdate

[color]
  advice = auto
  branch = auto
  diff = auto
  grep = always
  interactive = auto
  push = auto
  pager = true
  remote = always
  showBranch = always
  status = auto
  transport = auto
  ui = auto

[color "advice"]
  hint = green

[color "branch"]
  current = yellow reverse
  local = yellow
  plain = magenta
  remote = green
  upstream = cyan

[color "diff"]
  commit = blue bold # commit headers
  frag = magenta bold # line info
  func = cyan bold # function in hunk header
  meta = yellow bold # metainformation
  new = green bold # additions
  old = red bold # deletions

[color "interactive"]
  prompt = green
  header = yellow
  help = blue
  error = red

[color "push"]
  error = red

[color "status"]
  header = yellow
  added = yellow
  changed = green
  untracked = cyan
  unmerged = magenta
  branch = blue
  nobranch = red reverse
  localBranch = yellow reverse
  remoteBranch = blue reverse

[column]
  # Whether/when to report output in columns.
  ui = auto column nodense

[core]
  autocrlf = input
  whitespace = fix,space-before-tab,tab-in-indent,trailing-space,-indent-with-non-tab
  editor = nvim
  pager = "less -XF"
  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  precomposeunicode = false
  # Speed up commands involving untracked files, such as `git status`.
  untrackedCache = true

[diff]
  colorMoved = zebra
  colorMovedWS = no
  tool = meld
  guitool = meld

[difftool]
  prompt = false

[difftool "meld"]
  cmd = meld "${LOCAL}" "${REMOTE}"

[fetch]
  # 0 means use a reasonable number of threads for fetching refs in parallel.
  parallel = 0
  # Automatically make Git clean objects in your local repository when fetching
  # changes from remote.
  prune = true
  # Also prune tags to maintain a one-to-one relation between local refs and
  # remote refs.
  pruneTags = true

[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true

[grep]
  # Fallback to --no-index when using git-grep outside of a repository.
  fallbackToNoIndex = true
  # Always output results with full file paths when git-grep is run from
  # subdirectories of the repository root.
  fullName = true
  # Which regex type to use by default with git-grep.
  patternType = perl
  # Use as many threads as there are logical cores when grepping.
  threads = 0

[github]
  user = tjtrabue

[gui]
  commitMsgWidth = 80
  pruneDuringFetch = true

[guitool "meld"]
  cmd = meld

[help]
  # Automatically correct and execute mistyped commands
  autoCorrect = immediate

[init]
  # Always name the default branch "master" when creating a new git repo.
  defaultBranch = master

[log]
  decorate = auto

[merge]
  # How to present merge conflicts in files.
  #   merge -> <<< === >>>
  #   diff3 -> <<< ||| === >>>
  conflictStyle = merge
  log = true
  # Use meld as default mergetool
  tool = meld
  guitool = meld

[mergetool]
  prompt = false

[mergetool "meld"]
  # The command line run for meld when `git mergetool` is called.
  # These variables are available to the command at runtime:
  #   LOCAL  -> the file in the current branch
  #   REMOTE -> the file in the branch being merged
  #   MERGED -> the partially merged file containing the merge conflict
  #             information.
  #   BASE   -> the shared commit ancestor of $LOCAL and $REMOTE (i.e., the file
  #             as it was when the branch containing $REMOTE was originally
  #             created).
  # See this StackOverflow answer for more details:
  # https://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool
  cmd = meld "${LOCAL}" "${MERGED}" "${REMOTE}" --output "${MERGED}"
  # Alternatively, the cmd could be:
  # cmd = meld "${LOCAL}" "${BASE}" "${REMOTE}" --output "${MERGED}"
  # Automatically merge non-conflicting parts, highlight conflicting parts, and
  # wait for user decision.
  useAutoMerge = true

[pull]
  # Always rebase current branch on top of the pulled remote tracking branch.
  rebase = true

[push]
  # Use Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to one of your ~/.extra/
  # files:
  #   `git config --global push.default simple`.
  default = matching
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[rerere]
  enabled = 1

[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"

[user]
  email = tom.trabue@gmail.com
  name = Tom Trabue

# vim:foldenable:foldmethod=indent
