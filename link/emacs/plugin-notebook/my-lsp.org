#+TITLE:   Language Server Protocol Client for Emacs
#+AUTHOR:  Tom Trabue
#+EMAIL:   tom.trabue@gmail.com
#+DATE:    2020-05-25
#+STARTUP: fold

Language Server Protocol client (=lsp-mode=) configuration.  It is highly
advised that you run Emacs version 27+ in order to get the best performance out
of LSP mode due to Emacs 27's native JSON parsing capability.

If you run =lsp= and get a message like '<filename> not in project or was
blacklisted' you can fix the problem with: =M-x lsp-workpace-blacklist-remove=

Because it was growing too large, I refactored my custom LSP mode configuration
to the =my-custom-lsp.el= file.

* lsp-mode
=lsp-mode= is the actual LanguageServerProtocol client for Emacs. It does the
heavy lifting of starting up Language Servers and managing connections to
them, not to mention all the fancy UI stuff regarding completions,
documentation on hover, syntax linting and error checking, etc.

** Notes about specific LSP servers
- *CCLS*: Available as an AUR packge on Arch Linux. This LSP server requires
  the =ccls= Emacs package from MELPA, as well.
- *EmmyLua LanguageServer*: Available as an AUR packge on Arch Linux.  Make
  sure to rename EmmyLua's =.jar= file to =EmmyLua-LS-all.jar= and put it in
  the =~/.emacs.d/= directory.
- *haskell-language-server*: Install with =ghcup=.

** Diagnosing performance issues
If you experience slow performance while using =lsp-mode=, run the command =M-x
lsp-doctor= for specific recommendations on how you can speed up
=lsp-mode=. These recommendations include default Emacs variables you can tune,
recompiling Emacs with native JSON parsing support, and more. Best of all,
=lsp-doctor= tells you which recommendations your Emacs setup already meets, and
which ones you do not yet satisfy.

** =use-package= specification
#+begin_src emacs-lisp
  (use-package lsp-mode
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after evil-collection
    ;; Adjust mode line for LSP minor modes.
    :delight
    (lsp-lens-mode)
    ;; Commands used to autoload this package.
    :commands (lsp lsp-deferred)
    ;; Here you can change the package's customizable variables.
    :custom
  ;;; General settings
    ;; Redefine lsp command prefix (default is "s-l" which messes with
    ;; most window managers).
    (lsp-keymap-prefix "C-c l")
    (lsp-enable-snippet t)
    (lsp-semantic-tokens-enable t)
    ;; Max number of on-idle token requests to be dispatched simultaneously.
    (lsp-semantic-tokens-max-concurrent-idle-requests 4)
    (lsp-enable-semantic-highlighting t)
    ;; Whether to include all info returned by document/onHover in the eldoc
    ;; echo area rather than simply basic info.
    (lsp-eldoc-render-all nil)
    ;; Use this to enable debugging output
    ;; NOTE: Enabling logging can slow lsp-mode considerably!
    (lsp-log-io nil)
    ;; Increase the number of simultaneously watchable files
    ;; (the default number is 1000).
    ;; If nil, then lsp-mode will not print warnings for any number of files.
    (lsp-file-watch-threshold nil)
    ;; The length that lsp-mode waits to begin completion. Most of the
    ;; time the variable you want to tweak is company-idle-delay, not this
    ;; one.
    (lsp-idle-delay 0.000)
    ;; Whether to perform code formatting while typing
    (lsp-enable-on-type-formatting t)
    ;; Whether to enable Code Lens by default if the LSP server supports that
    ;; feature. I find Code Lens to cause the UI to behave erratically, so I
    ;; prefer to keep it off by default. For instance, ref counts tend to flicker
    ;; on and off, causing lines to move up and down, making for a frustrating
    ;; editing experience.
    (lsp-lens-enable t)
    ;; Where to place the Code Lens annotation in relation to its subject.
    (lsp-lens-place-position #'above-line)
    ;; Whether to filter incomplete results.
    (lsp-completion-filter-on-incomplete nil)
    ;; Whether to filter initial results from the server.
    (lsp-completion-sort-initial-results nil)
    ;; Whether to automatically try to guess all projects' root directories
    ;; rather than prompt the user for them.
    ;; WARNING: Setting this variable to non-nil can be risky if you are not
    ;; following standard Emacs project conventions!
    (lsp-auto-guess-root t)
    ;; UI feedback for available code actions presented in the modeline.
    ;; The default is '(count icon).
    (lsp-modeline-code-actions-segments '(count icon name))
  ;;; bash-language-server
    (lsp-bash-highlight-parsing-errors t)
  ;;; clangd
    ;; Make sure to use all processor cores, and to report warnings.
    (lsp-clients-clangd-args `(,(concat "-j=" my/max-worker-processes)
                               "--background-index"
                               "--log=error"
                               "--completion-style=bundled"
                               "--pch-storage=memory"
                               "--clang-tidy"
                               "--header-insertion-decorators=0"))
    (lsp-clients-clangd-executable (executable-find "clangd"))
    ;;; elixir-ls
    ;; The elixir-ls version to download from GitHub.
    ;; https://github.com/elixir-lsp/elixir-ls/releases/
    (lsp-elixir-ls-version "v0.15.1")
    ;; Where to retrieve the elixir-ls distribution.
    (lsp-elixir-ls-download-url
     (format "https://github.com/elixir-lsp/elixir-ls/releases/download/%s/elixir-ls-%s.zip"
             lsp-elixir-ls-version
             lsp-elixir-ls-version))
    ;; Automatically fetch project deps when compiling
    (lsp-elixir-fetch-deps t)
  ;;; lua-language-server
    ;; lsp-mode can try to install lua-language-server automatically, but
    ;; I've noticed that version tends to be really slow.
    ;; It's best to install it yourself.
    (lsp-clients-lua-language-server-bin
     (executable-find "lua-language-server"))
  ;;; typescript-language-server
    ;; Disable tsserver from automatically fetching missing type definitions
    ;; (@types packages) from external modules.
    (lsp-clients-typescript-disable-automatic-typing-acquisition t)
    ;; Max size of V8's old memory section in megabytes.
    (lsp-clients-typescript-max-ts-server-memory 4096)
    (lsp-javascript-display-parameter-type-hints t)
    (lsp-javascript-display-parameter-name-hints-when-argument-matches-name t)
    ;; Can be 'none, 'literals, or 'all
    ;; (lsp-javascript-display-parameter-name-hints 'all)
    (lsp-javascript-display-enum-member-value-hints t)
    (lsp-javascript-display-return-type-hints t)
    (lsp-javascript-display-variable-type-hints t)
    ;; Enable/disable semantic checking of JavaScript files.
    (lsp-javascript-implicit-project-config-check-js t)
    (lsp-javascript-update-imports-on-file-move-enabled 'always)
    ;; Whether to format buffers using the langserver.
    ;; Enabling this option can greatly slow down performance for large projects.
    (lsp-javascript-format-enable nil)
    (lsp-typescript-format-enable nil)
    ;; Enable/disable automatic updating of import paths when you rename or move a
    ;; file. Requires TypeScript 2.9 or newer.
    (lsp-typescript-update-imports-on-file-move-enabled 'always)
    ;; Who wants to fill out surveys?
    (lsp-typescript-surveys-enabled nil)
  ;;; LaTeX LSP settings
    ;; Use texlab or digestif
    (lsp-tex-server 'digestif)
    :hook
    ;; NOTE: We set language mode hooks in the Functions section of this file.
    (lsp-mode . (lambda ()
                  ;; Enable which-key integration for lsp-mode
                  (lsp-enable-which-key-integration)

                  (general-def 'local
                    ;; Use LSP find definition function instead of
                    ;; xref-goto-definition.
                    "M-." 'lsp-find-definition)
                  ;; Override evil g-prefixed keybindings with LSP navigation and
                  ;; code action commands. We have to make these buffer-local
                  ;; bindings because that's the only way they will take
                  ;; precedence over evil's motion state bindings in normal state.
                  (general-def 'normal 'local
                    ;; Edit each semantic match for the symbol at point in
                    ;; parallel with iedit.
                    "g'" 'lsp-iedit-highlights
                    "gD" 'lsp-find-declaration
                    "gH" 'lsp-treemacs-call-hierarchy
                    "gR" 'lsp-find-references
                    "ga" 'lsp-execute-code-action
                    "gd" 'lsp-find-definition
                    "gh" 'lsp-describe-thing-at-point
                    "gi" 'lsp-find-implementation
                    "gl" 'lsp-find-locations
                    "go" 'lsp-organize-imports
                    "gr" 'lsp-rename
                    "gt" 'lsp-find-type-definition)
                  (my/evil-leader-def 'local
                    "w" '(:keymap lsp-command-map))
                  ;; Disable aggressive indent (if active) due to performance
                  ;; issues.
                  (when (bound-and-true-p aggressive-indent-mode)
                    (aggressive-indent-mode -1))))
    :general
    ;; This is general.el's way of accomplishing :bind-keymap, but
    ;; general's way is more flexible and integrates with its
    ;; `general-describe-keybindings' function.
    (my/user-leader-def lsp-mode-map
      "l" '(:keymap lsp-command-map))
    :init
    (require 'my-custom-lsp)
    ;; Add lsp-mode hooks for major modes.
    (my-custom-lsp-add-lsp-mode-hooks)
    ;; Set up DAP mode hooks.
    (my-custom-lsp-add-dap-mode-tool-hooks)
    :config
    ;; Directory regexps to ignore when establishing file watches.
    (mapc (lambda (pattern)
            (add-to-list 'lsp-file-watch-ignored-directories pattern))
          '("~/" "~/Downloads/"))
    ;; Register extra LSP servers and map them to major modes.
    (my-custom-lsp-add-language-ids)
    (my-custom-lsp-register-lsp-servers)
    ;; Make sure lsp-lens-mode lighter text does not get displayed.
    (delight 'lsp-lens-mode nil 'lsp-lens))
#+end_src

** Plugins
*** ccls
*NOTE*: Currently deprecated in favor of =clangd=, which seems much more
feature-rich as of now.

=ccls= is a great language server for C/C++. It started as a fork of the
=cquery= language server, but has since improved upon =cquery='s shortcomings
immensely. For instance, =cquery= imposed a massive memory footprint on even
medium sized projects, whereas =ccls= is far more memory efficient. At the
same time there are benefits to being a fork of such a complete language
server. =cquery= is a nearly complete language server, implementing just
about the entire LSP specification, so =ccls= inherits that completeness, and
as such can provide all of the tooling promised by the ambitious LSP spec.

Another fantastic =ccls= feature is its interoperability with numerous build
systems, including Make, Ninja, CMake, and many more. Thus, if you use CMake
for your project's build tool chain, and you have a =project_config.h.in=
configuration file commonly used in CMake projects, then =ccls= will pick up
on the fact that CMake generates a =project_config.h= file from your
configuration template file, and will act as if the =project_config.h= file
is already present and ready to use. Many other LSP systems would complain if
your source code references a =.h= file that is not yet physically present on
your file system.

**** variables
#+begin_src emacs-lisp
  (defvar my/ccls-compile-commands-map (make-hash-table :test 'equal)
    "Hash table associating build tool names to their associated internal
  data structure used to generate the debug cache for CCLS.")
#+end_src

**** structures
#+begin_src emacs-lisp
  (cl-defstruct my/ccls-gen-compile-commands
    "Structure defining a generic CCLS command and arguments for generating the
  compile_commands.json file and other debugging information that CCLS makes use
  of."
    command args)
#+end_src

**** helper functions
#+begin_src emacs-lisp
  (defun my/insert-semicolon-eol ()
    "Insert ';' at the end of the current line and moves point to EOL."
    (interactive)
    (move-end-of-line nil)
    (insert ";"))

  (defun my/ccls--create-compile-commands-structs ()
    "Create a number of different structs corresponding to different build tools
  used to create CCLS's debug cache."
    (let ((ccstruct-list `(,(make-my/ccls-gen-compile-commands
                             :command "cmake" :args '("-H." "-BDebug"
                                                      "-DCMAKE_BUILD_TYPE=Debug"
                                                      "-DCMAKE_EXPORT_COMPILE_COMMANDS=YES")))))
      (cl-loop for struct in ccstruct-list do
               (puthash (my/ccls-gen-compile-commands-command struct)
                        struct my/ccls-compile-commands-map))))

  (defun my/ccls-gen-compile-commands-json ()
    "Generate the compile_commands.json file for a CCLS project."
    (interactive)
    (when (= 0 (hash-table-count my/ccls-compile-commands-map))
      ;; Create the command-struct hash map if it has not yet been initialized.
      (my/ccls--create-compile-commands-structs))
    (let* ((output-buffer-name "*ccls-compile-commands*")
           (default-directory (if (fboundp 'projectile-project-root)
                                  (projectile-project-root)))
           (output-buffer (get-buffer-create output-buffer-name))
           (compile-commands-file "compile_commands.json")
           (user-window (selected-window))
           (selected-command-struct
            (gethash "cmake" my/ccls-compile-commands-map))
           ;; The generator function to apply to arguments later on
           (gen-compile-commands (apply-partially 'call-process
                                                  (my/ccls-gen-compile-commands-command selected-command-struct)
                                                  nil output-buffer 'redisplay-buffer)))
      (unless (file-exists-p (expand-file-name ".ccls"))
        (error "ERROR: No .ccls file found in project root."))
      (if default-directory
          (with-current-buffer output-buffer
            (erase-buffer)
            (switch-to-buffer-other-window output-buffer t)
            (apply gen-compile-commands (my/ccls-gen-compile-commands-args
                                         selected-command-struct))
            (call-process "ln" nil nil nil "-s"
                          (concat "Debug/" compile-commands-file)
                          ".")
            (select-window user-window))
        (error "ERROR: Not in a projectile project."))))
#+end_src

**** =use-package= specification
#+begin_src emacs-lisp
  ;; NOTE: If a C/C++ file is opened in Emacs and CCLS fails to
  ;;       provide its services automatically then most likely CCLS
  ;;       cannot find the project's root directory (or has been confused
  ;;       by projectile). Put a ".ccls-root" file in the project root
  ;;       directory to fix this problem.
  (use-package ccls
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after (evil projectile)
    :general
    (general-def 'insert
      "<C-return>" 'my/insert-semicolon-eol)
    :init
    ;; Always use flycheck, not flymake.
    (setq lsp-diagnostic-package :auto)
    ;; Turn off other syntax checkers
    (setq-default flycheck-disabled-checkers
                  '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    ;; Deprecated in favor of clangd
    :hook
    ;; NOTE: CMake now has its own language server: cmake-language-server
    ;;       It is a Python package.
    ((c-mode c++-mode objc-mode makefile-mode) . (lambda ()
                                                   (require 'ccls)))
    ;; Set package's customizable variables
    :custom
    (ccls-args nil)
    ;; Make sure this plugin can actually find CCLS
    (ccls-executable (executable-find "ccls"))
    ;; Make CCLS project files indicative of a projectile project root.
    (projectile-project-root-files-top-down-recurring
     (append '("compile_commands.json" ".ccls")
             projectile-project-root-files-top-down-recurring))
    :config
    ;; Always ignore the .ccls-cache directory
    (push ".ccls-cache" projectile-globally-ignored-directories))
#+end_src

*** lsp-dart
Integrates the fantastic Dart Analysis Server, a fully featured LSP server, into
Dart workflows.

#+begin_src emacs-lisp
  (use-package lsp-dart
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after
    (dart-mode lsp-mode))
#+end_src

*** lsp-haskell

#+begin_src emacs-lisp
  ;; NOTE: This plugin requires haskell-language-server to be installed on your
  ;;       system.
  (use-package lsp-haskell
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after lsp-mode
    :hook
    ((haskell-mode haskell-literate-mode) . lsp))
#+end_src

*** lsp-java

#+begin_src emacs-lisp
  (use-package lsp-java
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after lsp-mode)
#+end_src

*** lsp-origami

#+begin_src emacs-lisp
  (use-package lsp-origami
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after (lsp-mode origami))
#+end_src

*** lsp-pyright
=pyright= Python LSP server integration with =lsp-mode=. =pyright= is a
static code analysis engine and LSP server for Python that has been gaining
traction after =python-language-server= became a bit stagnant.

#+begin_src emacs-lisp
  (use-package lsp-pyright
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after lsp-mode
    :hook
    (python-mode . (lambda ()
                     (require 'lsp-pyright)
                     (lsp-deferred))))
#+end_src

*** lsp-sourcekit
Lsp-SourceKit is Apple's LSP provider for Swift, Objective C, and other
languages. This plugin not only provides an LSP implementation, but additional
features such as semantic highlighting.

#+begin_src emacs-lisp
  (use-package lsp-sourcekit
    ;; Currently using `lsp-bridge' instead.
    :disabled
    ;; sourcekit-lsp appears to only be available on macOS as of now.
    :if (eq system-type 'darwin)
    :after lsp-mode
    :custom
    (lsp-sourcekit-executable
     (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))
#+end_src

*** lsp-treemacs
Sync =treemacs= file explorer with the LSP server.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after (lsp-mode treemacs)
    :commands lsp-treemacs-errors-list
    :hook
    ;; Enable bidirectional sync of lsp workspace folders
    ;; and treemacs projects.
    ((lsp-mode . lsp-treemacs-sync-mode)
     (java-mode . (lambda ()
                    (define-key lsp-command-map (kbd "t d")
                                'lsp-treemacs-java-deps-list))))
    :general
    (general-def lsp-command-map
      "t c" 'lsp-treemacs-call-hierarchy
      "t e" 'lsp-treemacs-errors-list
      "t i" 'lsp-treemacs-implementations
      "t r" 'lsp-treemacs-references
      "t s" 'lsp-treemacs-symbols
      "t t" 'lsp-treemacs-type-hierarchy))
#+end_src

*** lsp-ui
=lsp-ui= provides a fancy user interface for LSP's diagnostic and
documentation features. It provides documentation on hover in a dedicated
floating window, a sidebar for diagnostics and LSP code actions, and more.

#+begin_src emacs-lisp
  (use-package lsp-ui
    ;; Currently using `lsp-bridge' instead.
    :disabled
    :after lsp-mode
    :hook
    (lsp-mode .
              (lambda ()
                (if (bound-and-true-p flycheck-pos-tip-mode)
                    ;; Turn off flycheck tool tips if they are active.
                    (flycheck-pos-tip-mode -1))))
    :general
    (general-def lsp-ui-mode-map
      [remap xref-find-definitions] 'lsp-ui-peek-find-definitions
      [remap xref-find-references] 'lsp-ui-peek-find-references)
    (general-def 'normal lsp-ui-mode-map
      "K"  'lsp-ui-doc-glance
      "gd" 'lsp-ui-peek-find-definitions
      "gr" 'lsp-ui-peek-find-references)
    (general-def lsp-ui-peek-mode-map
      ;; Navigate through the peek menu for references
      "C-j" 'lsp-ui-peek--select-next
      "C-k" 'lsp-ui-peek--select-prev
      "M-j" 'lsp-ui-peek--select-next-file
      "M-k" 'lsp-ui-peek--select-prev-file)
    :custom
    ;; How long to wait before showing sideline information
    (lsp-ui-sideline-delay 0.2)
    ;; Show directories of files
    (lsp-ui-peek-show-directory t)
    ;; Customize what gets shown in the sideline
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-show-hover t)
    ;; Enable the fancy peek feature for previewing code actions
    (lsp-ui-peek-enable t)
    ;; Show documentation for the thing at point
    (lsp-ui-doc-enable t)
    ;; Whether to include object type/signature in frame
    (lsp-ui-doc-include-signature t)
    ;; How long to wait before showing documentation in a floating window
    (lsp-ui-doc-delay 0.5)
    ;; Where to display the documentation tooltip
    (lsp-ui-doc-position 'top)
    ;; Show current symbol's documentation when cursor moves over it.
    (lsp-ui-doc-show-with-cursor t)
    ;; Show current symbol's documentation when the mouse pointer moves over it.
    (lsp-ui-doc-show-with-mouse t)
    ;; Whether to display documentation in a WebKit child frame.
    (lsp-ui-doc-use-webkit nil)
    ;; Automatically refresh the menu
    (lsp-ui-imenu-auto-refresh t))
#+end_src

* lsp-bridge
=lsp-bridge= is a /super fast/ LSP client for Emacs that leverages Python's
threading technology to build caches that bridge Emacs and the LSP server. The
goal is to provide a smooth completion experience without compromising Emacs'
performance.

Aside from language server integration, =lsp-bridge= offers a great solution for
generic completion, so =lsp-bridge= can function as an elegant replacement for
=company-mode=, =corfu=, etc., which can greatly slim the user's plugin
infrastructure for Emacs.

** Installation Notes
=lsp-bridge= requires Emacs 28+.

** Dependencies
*** Python
#+begin_src shell :tangle no
  python3 -m pip install --user --upgrade epc orjson sexpdata six setuptools paramiko rapidfuzz
#+end_src

*** Elisp
- =posframe=
- =markdown-mode=
- =yasnippet=

** Hydras

#+begin_src emacs-lisp
  (defun my/define-hydra-lsp-bridge-peek ()
    "Define the hydgra for `lsp-bridge-peek'."
    (interactive "P")
    (defhydra hydra-lsp-bridge-peek (:color pink :hint nil)
      "
  ^Primary^      ^Movement^            ^Actions^              ^Tree^
  ^^^^^^^^------------------------------------------------------------------------
  _P_:   peek   _j_: next line        _l_:        jump        _u_: next branch
  _q_:   abort  _k_: prev line        _<return>_: jump        _i_: prev branch
  _C-g_: abort  _J_: next file line   _h_:        jump back   _o_: next node
  ^ ^           _K_: prev file line   _t_:        through     _p_: prev node
  "
      ("P"        lsp-bridge-peek)
      ("C-g"      lsp-bridge-peek-abort :exit t)
      ("j"        lsp-bridge-peek-list-next-line)
      ("k"        lsp-bridge-peek-list-prev-line)
      ("J"        lsp-bridge-peek-file-content-next-line)
      ("K"        lsp-bridge-peek-file-content-prev-line)
      ("l"        lsp-bridge-peek-jump)
      ("<return>" lsp-bridge-peek-jump)
      ("h"        lsp-bridge-peek-jump-back)
      ("t"        lsp-bridge-peek-through)
      ("u"        lsp-bridge-peek-tree-next-branch)
      ("i"        lsp-bridge-peek-tree-previous-branch)
      ("o"        lsp-bridge-peek-tree-next-node)
      ("p"        lsp-bridge-peek-tree-previous-node)
      ("q"        lsp-bridge-peek-abort :exit t)))
#+end_src

** =use-package= specification

#+begin_src emacs-lisp
  (use-package lsp-bridge
    :after (hydra modus-themes)
    :demand t
    :delight
    :straight '(lsp-bridge
                :type git :host github :repo "manateelazycat/lsp-bridge"
                :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
                :build (:not compile))
    :general
    (general-def lsp-bridge-mode-map
      [remap xref-find-definitions]              'lsp-bridge-find-def
      [remap xref-find-references]               'lsp-bridge-find-references
      [remap xref-find-definitions-other-window] 'lsp-bridge-find-def-other-window
      "M-."                                      'lsp-bridge-find-def
      "M-,"                                      'lsp-bridge-find-def-return
      "M-]"                                      'lsp-bridge-diagnostic-jump-next
      "M-["                                      'lsp-bridge-diagnostic-jump-prev
      "M-r"                                      'lsp-bridge-find-references
      "M-R"                                      'lsp-bridge-diagnostic-list
      "M-v"                                      'acm-select-next-page
      ;; Trust me, this is the correct ordering of these scroll commands.  It looks like these
      ;; commands should be reversed to follow VI conventions, but in practice this is accurate.
      "C-:"                                      'lsp-bridge-popup-documentation-scroll-up
      "C-\""                                     'lsp-bridge-popup-documentation-scroll-down)
    (general-def '(normal visual) lsp-bridge-mode-map
      "gr" 'lsp-bridge-rename)
    ;; Standard LSP keybindings (beginning with `C-c'):
    (my/user-leader-def lsp-bridge-mode-map
      "l]"  'lsp-bridge-diagnostic-jump-next
      "l["  'lsp-bridge-diagnostic-jump-prev
      "la"  'lsp-bridge-code-action
      "lD"  'lsp-bridge-find-def-return
      "ld"  'lsp-bridge-find-def
      "lod" 'lsp-bridge-find-def-other-window
      "lgl" 'lsp-bridge-diagnostic-list
      "lgc" 'lsp-bridge-diagnostic-copy
      "lh"  'lsp-bridge-signature-help-fetch
      "li"  'lsp-bridge-find-impl
      "loi" 'lsp-bridge-find-impl-other-window
      "lk"  'lsp-bridge-popup-documentation
      "lp"  'hydra-lsp-bridge-peek/lsp-bridge-peek
      "lR"  'lsp-bridge-find-references
      "lr"  'lsp-bridge-rename
      "lt"  'lsp-bridge-find-type-def
      "lot" 'lsp-bridge-find-type-def-other-window
      "lwl" 'lsp-bridge-workspace-list-symbols
      "lws" 'lsp-bridge-restart-process)
    ;; Keys for `lsp-bridge-mode''s autocomplete popup:
    (general-def acm-mode-map
      "C-j" 'acm-select-next
      "C-k" 'acm-select-prev
      "C-l" 'acm-complete)
    (general-def 'insert acm-mode-map
      ;; This is to avoid accidentally entering a newline when all you wanted to do is select the
      ;; current completion candidate.
      "RET" 'acm-complete)
    ;; Evil leader commands (beginning with ","):
    (my/evil-leader-def lsp-bridge-mode-map
      "w]"  'lsp-bridge-diagnostic-jump-next
      "w["  'lsp-bridge-diagnostic-jump-prev
      "wa"  'lsp-bridge-code-action
      "wD"  'lsp-bridge-find-def-return
      "wd"  'lsp-bridge-find-def
      "wod" 'lsp-bridge-find-def-other-window
      "wgl" 'lsp-bridge-diagnostic-list
      "wgc" 'lsp-bridge-diagnostic-copy
      "wh"  'lsp-bridge-signature-help-fetch
      "wi"  'lsp-bridge-find-impl
      "woi" 'lsp-bridge-find-impl-other-window
      "wk"  'lsp-bridge-popup-documentation
      "wp"  'hydra-lsp-bridge-peek/lsp-bridge-peek
      "wR"  'lsp-bridge-find-references
      "wr"  'lsp-bridge-rename
      "ws"  'lsp-bridge-restart-process
      "wt"  'lsp-bridge-find-type-def
      "wot" 'lsp-bridge-find-type-def-other-window
      "ww"  'lsp-bridge-workspace-list-symbols)
    (general-def 'normal lsp-bridge-mode-map
      ;; Use unimpaired keybindings to navigate LSP diagnostics.  Both of the next pairs of mappings
      ;; should be identical in meaning, but for some reason the mappings in the `flycheck-mode-map'
      ;; seem to take precedence over `lsp-bridge-mode-map', so sometimes the `[remap ...]' calls are
      ;; necessary for the `lsp-bridge-mode-map' keybindings to take effect.
      "[c"                            'lsp-bridge-diagnostic-jump-prev
      "]c"                            'lsp-bridge-diagnostic-jump-next
      [remap flycheck-previous-error] 'lsp-bridge-diagnostic-jump-prev
      [remap flycheck-next-error]     'lsp-bridge-diagnostic-jump-next
      "K"                             'lsp-bridge-popup-documentation)
    (general-def lsp-bridge-peek-keymap
      "C-j" 'lsp-bridge-peek-list-next-line
      "C-k" 'lsp-bridge-peek-list-prev-line)
    (general-def 'normal lsp-bridge-ref-mode-map
      ;; Evil keybindings for interacting with the references buffer:
      "<return>" 'lsp-bridge-ref-open-file-and-stay
      "SPC"      'lsp-bridge-ref-open-file
      "D"        'lsp-bridge-ref-remove-line-from-results
      "F"        'lsp-bridge-ref-filter-mismatch-results
      "e"        'lsp-bridge-ref-switch-to-edit-mode
      "f"        'lsp-bridge-ref-filter-match-results
      "h"        'lsp-bridge-ref-jump-prev-file
      "i"        'lsp-bridge-ref-insert-current-line
      "j"        'lsp-bridge-ref-jump-next-keyword
      "k"        'lsp-bridge-ref-jump-prev-keyword
      "l"        'lsp-bridge-ref-jump-next-file
      "q"        'lsp-bridge-ref-quit
      "r"        'lsp-bridge-ref-replace-all-matches
      "u"        'lsp-bridge-ref-unfilter
      "x"        'lsp-bridge-ref-filter-match-files)
    ;; These keybindings take effect when the code actions popup menu is in use.
    (general-def lsp-bridge-call-hierarchy-mode-map
      ;; Use `C-j' and `C-k' to navigate the code actions and call hierarchy popup
      ;; menus.
      "C-j" 'lsp-bridge-call-hierarchy-next
      "C-k" 'lsp-bridge-call-hierarchy-prev)
    :custom
    ;; Whether to integrate with CITRE (a CTAGS engine for Emacs).
    ;; Disabled by default.
    (acm-enable-citre nil)
    ;; The complete menu matching algorithm.  Anything that begins with
    ;; "orderless-" requires Orderless to be installed first.
    (acm-candidate-match-function #'orderless-regexp)
    ;; Whether the completion menu displays a help document.
    (acm-enable-doc t)
    ;; Whether and how to richly render Markdown for completion popups.
    (acm-enable-doc-markdown-render 'async)
    ;; Whether to show icons in the completion menu.
    (acm-enable-icon t)
    ;; Whether to show quick-access in completion menu.
    (acm-enable-quick-access t)
    ;; Enable tab-and-go completion. This means `acm-select-*' will select and
    ;; preview another candidate, and further input will commit this candidate.
    (acm-enable-preview t)
    ;; Whether to allow number keys to select quick access candidates.
    (acm-quick-access-use-number-select nil)
    ;; The color of the completion window for light and dark modes:
    (acm-frame-background-light-color (modus-themes-get-color-value 'bg-dim))
    (acm-frame-background-dark-color (modus-themes-get-color-value 'bg-dim))
    ;; Whether to log messages in *lsp-bridge* buffer.
    (lsp-bridge-enable-log nil)
    ;; The Python 3 executable path.
    (lsp-bridge-python-command (string-trim
                                (shell-command-to-string "pyenv which python3")))
    ;; (lsp-bridge-python-command "/usr/bin/python3")
    ;; Whether to automatically show the diagnostic under cursor in a tooltip.
    ;; Default: nil
    (lsp-bridge-enable-hover-diagnostic t)
    ;; Used for strongly typed languages (disabled by default).
    (lsp-bridge-enable-inlay-hint t)
    ;; Whether to enable program debugging (disabled by default).
    (lsp-bridge-enable-debug t)
    ;; Enable LSP completions inside Org code blocks.
    ;; May slow Emacs down.
    (lsp-bridge-enable-org-babel t)
    ;; Fallback function in case LSP cannot find a definition.
    (lsp-bridge-find-def-fallback-function #'citre-get-definitions)
    ;; Fallback function in case LSP cannot find a reference.
    (lsp-bridge-find-ref-fallback-function #'citre-get-references)
  ;;; LSP C language server options:
    (lsp-bridge-c-lsp-server "clangd")
  ;;; LSP Elixir language server options:
    (lsp-bridge-elixir-lsp-server "elixirLS")
  ;;; LSP Python language server options:
    (lsp-bridge-python-lsp-server "pyright")
  ;;; LSP Python multi-language servers options:
    (lsp-bridge-python-multi-lsp-server "pyright_ruff")
  ;;; LSP TeX language server options:
    (lsp-bridge-tex-lsp-server "digestif")
    :init
    (add-hook 'lsp-bridge-mode-hook
              (lambda ()
                ;; Initialization logic for lsp-bridge-mode:
                (when (bound-and-true-p lsp-bridge-mode)
                  ;; Disable other completion engines when enabling
                  ;; lsp-bridge-mode because lsp-bridge-mode includes its own
                  ;; sophisticated completion system, including a completion
                  ;; backend, and completion frontend to multi-backend
                  ;; integration.
                  (when (bound-and-true-p lsp-mode) (lsp-mode -1))
                  (when (or (bound-and-true-p company-mode)
                            (bound-and-true-p global-company-mode))
                    (company-mode -1)
                    (global-company-mode -1))
                  ;; Disable syntax checking plugins that interfere with
                  ;; lsp-bridge's syntax checking.
                  (when (or (bound-and-true-p flycheck-inline-mode)
                            (bound-and-true-p global-flycheck-inline-mode))
                    (flycheck-inline-mode -1))
                  ;; Enable semantic tokens highlighting. See the Wiki for more
                  ;; information:
                  ;; https://github.com/manateelazycat/lsp-bridge/wiki/Semantic-Tokens
                  (lsp-bridge-semantic-tokens-mode 1))))
    ;; Enable `lsp-bridge' globally.
    (global-lsp-bridge-mode)
    (my/define-hydra-lsp-bridge-peek)
    (with-eval-after-load "modus-themes"
      ;; Change peek window border colors:
      (set-face-attribute 'lsp-bridge-peek-border-face nil
                          :background (modus-themes-get-color-value 'bg-ochre))
      ;; Change peek window Ace highlight colors for `lsp-bridge-peek-through':
      (set-face-attribute 'lsp-bridge-peek-ace-str-face nil
                          :background (modus-themes-get-color-value 'blue-intense)
                          :foreground (modus-themes-get-color-value 'fg-main))
      ;; Change underline colors for info, warnings, and errors.
      (set-face-attribute 'lsp-bridge-diagnostics-info-face nil
                          :underline `(:style wave :color ,(modus-themes-get-color-value 'green-intense)))
      (set-face-attribute 'lsp-bridge-diagnostics-warning-face nil
                          :underline `(:style wave :color ,(modus-themes-get-color-value 'yellow-intense)))
      (set-face-attribute 'lsp-bridge-diagnostics-error-face nil
                          :underline `(:style wave :color ,(modus-themes-get-color-value 'red-intense))))
    :config
    ;; Associate some less popular major modes with language servers.
    (dolist (elt `(((json-mode json-ts-mode) . "vscode-json-language-server")
                   (sage-shell:sage-mode     . ,lsp-bridge-python-lsp-server)))
      (add-to-list 'lsp-bridge-single-lang-server-mode-list elt))
    ;; Also configure major modes that require multiple language servers (usually HTML-derived major
    ;; modes).
    (dolist (elt '(((html-mode html-ts-mode mhtml-mode) . "html_emmet")))
      (add-to-list 'lsp-bridge-multi-lang-server-mode-list elt))
    ;; Enable `lsp-bridge-mode' in some less well-known major modes.
    (dolist (elt '(html-mode-hook
                   json-mode-hook
                   json-ts-mode-hook
                   mhtml-mode-hook
                   sage-shell-mode-hook))
      (add-to-list 'lsp-bridge-default-mode-hooks elt)))
#+end_src
