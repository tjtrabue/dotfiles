#+TITLE:   Markdown Configuration/Plugins
#+AUTHOR:  Thomas Trabue
#+EMAIL:   tom.trabue@gmail.com
#+DATE:    2022:09:02
#+TAGS:
#+STARTUP: fold

Plugins for editing and interacting with Markdown files.

* markdown-mode
Major mode for editing Markdown files, complete with a plethora of functions for
inserting links, following links, navigating files quickly, changing headers,
and more.

If you have the =edit-indirect= package installed, you can edit fenced code
blocks in a separate buffer with =C-c C-'= a la Org Mode.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :after edit-indirect
    :mode
    ;; Render README files as GitHub-flavored Markdown.
    ("README\\.md\\'" . gfm-mode)
    :hook
    (markdown-mode . (lambda ()
                       (general-def 'normal 'local
                         "M-j" 'markdown-move-down
                         "M-k" 'markdown-move-up)))
    :general
    (my/user-leader-def markdown-mode-map
      "C-l" 'markdown-follow-link-at-point)
    (general-def 'normal markdown-mode-map
      "<<" 'markdown-promote
      ">>" 'markdown-demote
      "g l" 'markdown-follow-link-at-point)
    (general-def 'insert markdown-mode-map
      ;; Use Tab to cycle markdown table rows/columns.
      "TAB"   'markdown-cycle
      "<tab>" 'markdown-cycle)
    :custom
    ;; When non-nil, font lock inline LaTeX math expressions.
    ;; Toggle this option with `C-c C-x C-e'.
    (markdown-enable-math t)
    ;; Whether to only place ATX header hashmarks (#) on the left side (if t) or
    ;; both sides (if nil) of a header title.
    (markdown-asymmetric-header t)
    ;; Whether to abbreviate URLs by default. Toggle this option with
    ;; `C-c C-x C-m'.
    (markdown-hide-urls t)
    ;; When non-nil, fontify fenced code blocks using the native major mode.  You
    ;; can customize the language-to-mode mapping by setting the variable
    ;; `markdown-code-lang-modes'.
    (markdown-fontify-code-blocks-natively t)
    (markdown-enable-wiki-links t)
    ;; When non-nil, GFM task list items with [X] instead of [x].  Useful for
    ;; compatibility with org-mode, which doesn't appear to recognize the
    ;; lowercase variant.
    (markdown-gfm-uppercase-checkbox t)
    ;; When non-nil, enable highlighting syntax like Obsidian, Quilt.
    (markdown-enable-highlighting-syntax t)
    ;; When non-nil, fontify the whole line for headings.
    (markdown-fontify-whole-heading-line t)
    :config
    ;; Use this many spaces to indent lists.
    ;; NOTE: Should be 4 spaces because Markdown sometimes require 4 spaces to
    ;;       correctly render nested lists.
    (setq markdown-list-indent-width 4)
    (setq markdown-toc-indentation-space tab-width))
#+end_src

* markdown-toc
Generate a table of contents for a markdown file.

#+begin_src emacs-lisp
  (use-package markdown-toc
    :hook
    (markdown-mode . markdown-toc-mode))
#+end_src

* grip-mode
Instant Github-flavored Markdown/Org preview using Grip (which stands for
"GitHub README Instant Preview"). You can view the preview in your configured
web browser, or in Emacs itself if you have compiled Emacs with the
=--with-xwidgets= option.

*NOTE:* This package depends on the =grip= Python package, so make sure to
=pip install grip= before trying to use this plugin.

** Functions
#+begin_src emacs-lisp
  (defun my/set-grip-keys-for-modes (modes)
    "Setup `grip' preview keybindings for major modes listed in MODES."
    (let ((mode-maps (mapcar (lambda (m)
                               (intern (concat (symbol-name m) "-map")))
                             modes))
          (key-command-alist `((,(kbd "C-c G b") . grip-browse-preview)
                               (,(kbd "C-c G r") . grip-restart-preview)
                               (,(kbd "C-c G s") . grip-start-preview)
                               (,(kbd "C-c G S") . grip-stop-preview))))
      ;; Assign each binding listed in key-command-alist to each keymap in
      ;; mode-maps.
      (mapc (lambda (mode-map)
              (mapc (lambda (pair)
                      (let ((key (car pair))
                            (func (cdr pair)))
                        (define-key (symbol-value mode-map) key func)))
                    key-command-alist))
            mode-maps)))
#+end_src

** =use-package= specification
#+begin_src emacs-lisp
  (use-package grip-mode
    :after (markdown-mode org)
    :commands
    ;; Need to list all grip commands to be autoloaded.
    (grip-browse-preview grip-restart-preview grip-start-preview grip-stop-preview)
    :custom
    ;; Path to the grip executable.
    (grip-binary-path (executable-find "grip"))
    ;; Whether to refresh the preview after a change to the source file.
    (grip-update-after-change t)
    ;; The host to use for previewing.
    (grip-preview-host "localhost")
    ;; Whether to use embedded webkit to preview.  Requires GNU/Emacs version >=
    ;; 26 and compiled with `--with-xwidgets` option.
    (grip-preview-use-webkit (if (functionp 'xwidgetp) t nil))
    :init
    (require 'auth-source)
    ;; Set up list of authinfo files to check.
    (setq auth-sources my/authinfo-files)
    ;; Get user's GitHub credentials from ~/.authinfo
    (let ((credential (auth-source-user-and-password "api.github.com")))
      (setq grip-github-user (car credential)
            grip-github-password (cadr credential)))
    ;; Set keybindings for functions listed in the :commands block.
    (my/set-grip-keys-for-modes '(markdown-mode org-mode)))
#+end_src
