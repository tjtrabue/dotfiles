#+title:    Perl Configuration/Plugins
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2020:08:18
#+property: header-args:emacs-lisp :lexical t
#+tags:     perl raku

Here's my Perl configuration for Emacs.

#+begin_src emacs-lisp :tangle yes
;; -*- lexical-binding: t; -*-

#+end_src

* PDE
  PDE is a collection of Emacs Lisp modules for interacting with Perl code
  distributed through CPAN in a package named =Emacs::PDE=. Thus, you must
  install =Emacs::PDE= through your CPAN install utility, usually =cpanm=. Once
  you have installed PDE, you may load it in Emacs.

  *NOTE*: I do not recommend you use PDE right now as it can hijack a number of
  different configuration settings, such as =helm=.

#+begin_src emacs-lisp :tangle yes
;; Add the Elisp code in the PDE directory to load-path.
(let ((pde-dir (concat user-emacs-directory "pde")))
  (when (file-directory-p pde-dir)
    (add-to-list 'load-path pde-dir)))

(defun load-pde ()
  "Load the Perl Development Environment."
  (interactive)
  (let* ((pde-dir (concat user-emacs-directory "pde"))
         (pde-load-file (concat pde-dir "/pde-load.el")))
    (when (file-exists-p pde-load-file)
      (load pde-load-file))))

(define-minor-mode pde-mode
  "Minor mode for activating the Perl Development Environment package from CPAN."
  :lighter " PDE")
#+end_src

* Plugins
** cperl-mode
   =cperl-mode= is a more advanced Perl editing mode than the standard
   =perl-mode=.

#+begin_src emacs-lisp :tangle yes
  (use-package cperl-mode
    :config
    ;; Add cperl-mode to auto-mode-alist for editing perl files.
    (mapc (lambda (pair)
        (if (eq (cdr pair) 'perl-mode)
            (setcdr pair 'cperl-mode)))
      (append auto-mode-alist interpreter-mode-alist))
    ;; Get rid of troublesome keybindings
    (unbind-key (kbd "C-j") 'cperl-mode-map))
#+end_src

** perly-sense-mode
  PerlySense is an IDE backend for Perl. It interfaces with Emacs quite nicely.
  Much like PDE, You must install PerlySense via CPAN from the Devel::PerlySense
  package.

#+begin_src emacs-lisp :tangle yes
  (use-package perly-sense-mode
    :straight
    (perly-sense-mode :type git :host github :repo "tjtrabue/perly-sense-mode")
    :after cperl-mode
    :hook ((cperl-mode perl-mode) . perly-sense-mode)
    :init
    ;; The PerlySense prefix key (unset only if needed)
    (global-unset-key (kbd "C-c C-o"))
    (setq ps/key-prefix (kbd "C-c C-o"))
    ;; Load flymake if t
    (setq ps/load-flymake nil)
    :config
    (install-perly-sense))
#+end_src

** plsense
   Much like =company-plsense=, this is another Emacs interface plugin for
   =plsense=, but while =company-plsense= focuses on automatically completing
   what you type, this one provides other IDE features, such as
   jump-to-definition, managing the =plsense= servers, etc.

   Please note that you must have already installed the =plsense= Perl package
   before you can use this plugin.

   *NOTE*: Please do /not/ use the =plsense-config-default= function in the
   =:config= block! It enables =auto-complete-mode=, something that I do not
   use, and it does so in a way that makes getting rid of =auto-complete-mode=
   in any Perl buffer automatically very difficult. Instead of using
   =plsense-config-default=, simply put all of your =plsense= initialization
   logic in the =:hook= block in the =use-package= specification below. As you
   can see, my chosen suite of initialization functions are heavily inspired by
   =plsense-config-default=, but I leave out the =auto-complete-mode=
   parts. Some may call this duplication of effort. However, I believe that the
   flexibility that my approach affords me more than makes up for the hassle
   incurred by rewriting =plsense-config-defaul=, and given how old this plugin
   is and the slow pace of its change history, I doubt that it will change much
   in the near future.

#+begin_src emacs-lisp :tangle yes
    (use-package plsense
      :after cperl-mode
      :hook
      ((cperl-mode perl-mode) . (lambda ()
        (make-local-variable 'after-save-hook)
        ;; Start the plsense servers automatically.
        (plsense-server-start)
        ;; Add keybindings and such.
        (plsense-setup-current-buffer)
        (plsense-update-current-buffer)
        ;; Turn auto-complete-mode OFF.
        ;; This must come after plsense-setup-current-buffer
        (auto-complete-mode -1)
        ;; Tell plsense to update the buffer after saving.
        (add-hook 'after-save-hook 'plsense-update-current-buffer t)
        ;; Define advice for informing changes of current buffer to server.
        (plsense-server-sync-trigger-ize newline)
        (plsense-server-sync-trigger-ize newline-and-indent)
        (plsense-server-sync-trigger-ize yank)
        (plsense-server-sync-trigger-ize yas/commit-snippet)))
      :init
      ;; Key binding
      (setq plsense-popup-help-key "C-:")
      (setq plsense-display-help-buffer-key "M-:")
      (setq plsense-jump-to-definition-key "C-k"))
#+end_src
