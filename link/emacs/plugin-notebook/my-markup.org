#+title:  Configuration for Markup Languages
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:25
#+STARTUP: fold

Plugins for various markup/serialization languages, such as JSON, Markdown,
HTML, TOML, YAML, etc.

* json-mode
#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

* markdown-mode
Major mode for editing Markdown files, complete with a plethora of functions for
inserting links, following links, navigating files quickly, changing headers,
and more.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :general
    (general-def 'normal markdown-mode-map
      "gl" 'markdown-follow-link-at-point))
#+end_src

* grip-mode
Instant Github-flavored Markdown/Org preview using Grip (which stands for
"GitHub Readme Instant Preview"). The preview can be shown in your configured
web browser, or in Emacs itself if you have compiled Emacs with the
=--with-xwidgets= option.

*NOTE:* This package depends on the =grip= Python package, so make sure to
=pip install grip= before trying to use this plugin.

** Functions
#+begin_src emacs-lisp
  (defun my/set-grip-keys-for-modes (modes)
    "Setup `grip' preview keybindings for major modes listed in MODES."
    (let ((mode-maps (mapcar (lambda (m)
                               (intern (concat (symbol-name m) "-map")))
                             modes))
          (key-command-alist `((,(kbd "C-c G b") . grip-browse-preview)
                               (,(kbd "C-c G r") . grip-restart-preview)
                               (,(kbd "C-c G s") . grip-start-preview)
                               (,(kbd "C-c G S") . grip-stop-preview))))
      ;; Assign each binding listed in key-command-alist to each keymap in
      ;; mode-maps.
      (mapc (lambda (mode-map)
              (mapc (lambda (pair)
                      (let ((key (car pair))
                            (func (cdr pair)))
                        (define-key (symbol-value mode-map) key func)))
                    key-command-alist))
            mode-maps)))
#+end_src

** =use-package= specification
#+begin_src emacs-lisp
  (use-package grip-mode
    :after (markdown-mode org)
    :commands
    ;; Need to list all grip commands to be autoloaded.
    (grip-browse-preview grip-restart-preview grip-start-preview grip-stop-preview)
    :custom
    ;; Path to the grip executable.
    (grip-binary-path (executable-find "grip"))
    ;; Whether to refresh the preview after a change to the source file.
    (grip-update-after-change t)
    ;; The host to use for previewing.
    (grip-preview-host "localhost")
    ;; Whether to use embedded webkit to preview.  Requires GNU/Emacs version >=
    ;; 26 and compiled with `--with-xwidgets` option.
    (grip-preview-use-webkit (if (functionp 'xwidgetp) t nil))
    :init
    (require 'auth-source)
    ;; Set up list of authinfo files to check.
    (setq auth-sources my/authinfo-files)
    ;; Get user's GitHub credentials from ~/.authinfo
    (let ((credential (auth-source-user-and-password "api.github.com")))
      (setq grip-github-user (car credential)
            grip-github-password (cadr credential)))
    ;; Set keybindings for functions listed in the :commands block.
    (my/set-grip-keys-for-modes '(markdown-mode org-mode)))
#+end_src

* toml
#+begin_src emacs-lisp
  (use-package toml)
#+end_src

* toml-mode
#+begin_src emacs-lisp
  (use-package toml-mode)
#+end_src

* yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

* GNU Hyperbole
Hyperbole is an interactive minor mode for viewing and managing any sort of
hypertext in Emacs. It has been called Markdown for hypertext. If you activate
=hyperbole= in a buffer containing hypertext, Texinfo, email addresses, URLs,
Emacs key sequences, Org mode links, Markdown links, or any of a dozen other
hypertext patterns, Hyperbole will render them as interactable objects.

It's a rich and fairly complicated package. View the [[https://gnu.org/software/hyperbole][documentation online]] for a
full introduction.

** Hyperbole complements Org Mode
Hyperbole complements Org Mode, and does not seek to replace or re-implement Org
Mode. Check the Emacs Wiki page for information about how to use Hyperbole and
Org Mode in tandem.

** =use-package= specification

#+begin_src emacs-lisp
  (use-package hyperbole)
#+end_src
