#+TITLE:  Projectile Project Management
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020-05-26
#+STARTUP: fold

Projectile is a project management plugin for Emacs that helps you perform
important coding actions at the project level. Such actions include searching
for project files, text searching (i.e., project-scoped =grep=), renaming files,
building and installing project artifacts, etc. Projectile is a project
management super tool, and by far one of the most important Emacs plugins for
software development.

#+begin_src emacs-lisp
  (use-package projectile
    ;; perspective.el overwrites projectile's command prefix, so we want to load
    ;; projectile after perspective.
    :after perspective
    :demand t
    :general
    ;; This extended general definition allows us to bind keymaps to keys
    ;; just like use-package's `bind-keymap' directive.
    (my/user-leader-def
      "p" '(:keymap projectile-command-map))
    (general-def 'normal 'override
      ;; Use C-p to search for files in project
      "C-p" 'projectile-find-file)
    (general-def projectile-command-map
      ;; Handy for refreshing Projectile's list of known projects.
      "n" 'projectile-discover-projects-in-search-path)
    :custom
    ;; Whether to cache files to improve performance. If you cache files,
    ;; Projectile may not find newly added project files until you restart Emacs.
    (projectile-enable-caching nil)
    ;; Figure out completion system to use automatically.
    (projectile-completion-system 'auto)
    ;; List of directory paths (and optional depths) that projectile should use
    ;; when searching for projects.
    (projectile-project-search-path (list my/workspace-dir my/practice-dir))
    ;; Add top-level folders for Projectile to ignore.
    (projectile-ignored-projects '("~/" "~/Downloads/" "~/Dropbox/"))
    ;; Customize how Projectile reports project information in the mode line.  The
    ;; default function is a bit verbose, and can clutter the mode line.
    (projectile-mode-line-function (lambda ()
                                     (format " Projectile[%s]"
                                             (projectile-project-name))))
    :init
    ;; Enable projectile globally.  It's important to keep this here!!! Do not
    ;; create an after-init-hook for projectile because it doesn't work
    ;; fully. You'll experience weird errors if you do this.
    (projectile-global-mode 1)
    :config
    ;; Add folder paths to ignore within a project.
    ;; These are different from the `projectile-ignored-projects' folders, which
    ;; are a list of top-level project folders to ignore. These are subfolders
    ;; to ignore within a Projectile project.
    (mapc  (lambda (pattern)
             (add-to-list 'projectile-globally-ignored-directories pattern))
           (list (concat my/straight-repos-dir ".*")))
    ;; Add newly opened project buffers to current perspective.
    (add-hook 'projectile-find-file-hook #'my/add-current-buffer-to-perspective))

#+end_src
