#+TITLE:  Extra Development Icons for Emacs
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020-05-25
#+STARTUP: fold

* all-the-icons
Use fancy developer icons in Emacs.  Very pretty!

** Functions
#+begin_src emacs-lisp
  (defun my/all-the-icons-tab-line-format (tab tabs)
    "Add file mode icons to tab-line tabs.

  Currently, this is almost entirely a copy-paste of the
  `tab-line-tab-name-format-default' with a few extra lines for
  adding the file mode icon."
    (let* ((buffer-p (bufferp tab))
           (selected-p (if buffer-p
                           (eq tab (window-buffer))
                         (cdr (assq 'selected tab))))
           (name (if buffer-p
                     (funcall tab-line-tab-name-function tab tabs)
                   (cdr (assq 'name tab))))
           (face (if selected-p
                     (if (mode-line-window-selected-p)
                         'tab-line-tab-current
                       'tab-line-tab)
                   'tab-line-tab-inactive))
           (help-echo (if selected-p "Current tab"
                        "Click to select tab")))
      (dolist (fn tab-line-tab-face-functions)
        (setf face (funcall fn tab tabs face buffer-p selected-p)))
      (apply 'propertize
             (concat
              (if buffer-p
                  ;; If the tab is a file buffer, prefix the buffer name with its mode icon.
                  (concat
                   ;; Add face-formatted space before icon.
                   (propertize " " 'face face 'help-echo help-echo)
                   (let ((icon (all-the-icons-icon-for-mode (buffer-local-value 'major-mode tab))))
                     (setq icon (copy-sequence icon))
                     (add-face-text-property 0 (length icon) face t icon)
                     ;; Add face-formatted icon.
                     (propertize icon 'help-echo help-echo))
                   ;; Add face-formatted space after icon.
                   (propertize " " 'face face 'help-echo help-echo))
                "")
              (propertize (string-replace "%" "%%" name) ;; (bug#57848)
                          'face face
                          'keymap tab-line-tab-map
                          'help-echo help-echo
                          ;; Don't turn mouse-1 into mouse-2 (bug#49247)
                          'follow-link 'ignore)
              (let ((close (or (and (or buffer-p (assq 'buffer tab)
                                        (assq 'close tab))
                                    tab-line-close-button-show
                                    (not (eq tab-line-close-button-show
                                             (if selected-p 'non-selected
                                               'selected)))
                                    tab-line-close-button)
                               "")))
                (setq close (copy-sequence close))
                ;; Don't overwrite the icon face
                (add-face-text-property 0 (length close) face t close)
                close))
             `(tab ,tab
                   ,@(if selected-p '(selected t))
                   mouse-face tab-line-highlight))))
#+end_src

** =use-package= specification
#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t
    :if (display-graphic-p)
    :config
    (let ((icon-paths (mapcar (lambda (file-name)
                                (expand-file-name file-name user-fonts-dir))
                              '("all-the-icons.ttf"
                                "material-design-icons.ttf"
                                "weathericons.ttf"
                                "octicons.ttf"
                                "fontawesome.ttf"
                                "file-icons.ttf"))))
      ;; If the icons files have not yet been installed, download them.
      ;; If you feel that not all font files are present in the fonts dir, then
      ;; simply type 'C-x C-e' after the (all-the-icons-install-fonts t) sexp
      ;; to redownload all files.
      (when (member nil (mapcar 'file-exists-p icon-paths))
        (all-the-icons-install-fonts t)))
    (when (bound-and-true-p tab-line-mode)
      ;; Add file mode icons to tab-line tabs.
      (setq tab-line-tab-name-format-function #'my/all-the-icons-tab-line-format)))
#+end_src

** Plugins
*** all-the-icons-dired
Use =all-the-icons= in =dired= mode, too.

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    ;; Use treemacs-icons-dired instead
    :disabled
    :demand t
    :after all-the-icons
    :hook
    (dired-mode . all-the-icons-dired-mode))
#+end_src

*** all-the-icons-ibuffer
Use =all-the-icons= in the fancy =ibuffer-mode=, which is basically Dired for
buffers.

#+begin_src emacs-lisp
  (use-package all-the-icons-ibuffer
    :after all-the-icons
    :hook
    (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src

*** all-the-icons-completion
Add icons to completion candidates using the built in completion metadata functions.

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after all-the-icons
    :demand t
    :config
    (all-the-icons-completion-mode 1))
#+end_src

* mode-icons
Show an icon instead of the major mode name in the modeline.

#+begin_src emacs-lisp
  (use-package mode-icons
    :demand t)
#+end_src

* nerd-icons
After installing, make sure to run =M-x nerd-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :demand t)
#+end_src
