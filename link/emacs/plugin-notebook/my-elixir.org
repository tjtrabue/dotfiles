#+TITLE:  Elixir Configuration/Plugins
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020-05-25
#+STARTUP: fold

Emacs plugins providing integration with Elixir, a functional programming
language built on Erlang's BEAM virtual machine optimized for writing
distributed, fault-tolerant applications that must contend with a vast multitude
of concurrent processes.

* elixir-ts-mode
The Tree-Sitter enabled version of =elixir-mode=.

#+begin_src emacs-lisp
  (use-package elixir-ts-mode
    ;; We want to use the built-in `elixir-ts-mode'.
    ;; The MELPA package is a back-port for use Emacs 29.1.
    :ensure nil
    :straight nil
    :if (and (fboundp 'treesit-available-p)
             (treesit-available-p))
    :hook
    (elixir-ts-mode . (lambda ()
                        (push '(">=" . ?\u2265) prettify-symbols-alist)
                        (push '("<=" . ?\u2264) prettify-symbols-alist)
                        (push '("!=" . ?\u2260) prettify-symbols-alist)
                        (push '("==" . ?\u2A75) prettify-symbols-alist)
                        (push '("=~" . ?\u2245) prettify-symbols-alist)
                        (push '("<-" . ?\u2190) prettify-symbols-alist)
                        (push '("->" . ?\u2192) prettify-symbols-alist)
                        (push '("<-" . ?\u2190) prettify-symbols-alist)
                        (push '("|>" . ?\u25B7) prettify-symbols-alist)
                        ;; Turn on `aggressive-indent-mode' for Elixir buffers.  It seems to work fine
                        ;; with `mix format', but if you encounter any code formatting issues, you may
                        ;; want to disable `aggressive-indent-mode', as it can cause conflicts with
                        ;; automatic code formatters.
                        (aggressive-indent-mode 1))))
#+end_src

* mix.el
Minor mode for interacting with Mix (the Elixir build and lifecycle tool that
comes with each Elixir SDK) from inside Emacs.

To use mix, type the prefix key sequence (=C-c d= by default, but configurable
by changing the key sequence bound to =mix-minor-mode-command-map=), followed by
one of the following commands:

- =e=: =mix-execute-task=
- =d e=: =mix-execute-task= in an umbrella subproject.
- =t=: =mix-test=
- =d t=: =mix-test= in an umbrella subproject.
- =o=: =mix-test-current-buffer=
- =d o=: =mix-test-current-buffer= in an umbrella subproject.
- =f=: =mix-test-current-test=
- =d f=: =mix-test-current-test= in an umbrella subproject.
- =l=: =mix-last-command=

#+begin_src emacs-lisp
  (use-package mix
    :delight
    (mix-minor-mode nil mix)
    :hook
    ((elixir-mode elixir-ts-mode) . mix-minor-mode)
    :general
    (my/evil-leader-def mix-minor-mode-map
      ","   'mix-execute-task
      "xe"  'mix-execute-task
      "xue" (lambda ()
              (interactive)
              (mix-execute-task nil 'use-umbrella-subprojects))
      "xl"  'mix-last-command
      "xt"  'mix-test
      "xut" (lambda ()
              (interactive)
              (mix-test nil 'use-umbrella-subprojects))
      "xo"  'mix-test-current-buffer
      "xuo" (lambda ()
              (interactive)
              (mix-test-current-buffer nil 'use-umbrella-subprojects))
      "xf"  'mix-test-current-test
      "xuf" (lambda ()
              (interactive)
              (mix-test-current-test nil 'use-umbrella-subprojects))))
#+end_src

* exunit.el
Simple interface for running ExUnit tests from inside Emacs.

The default keybinding to launch the transient menu (a la =magit=) is =C-c ,=.

#+begin_src emacs-lisp
  (use-package exunit
    :delight
    :hook
    ;; Turn on exunit-mode when editing Elixir files
    ((elixir-mode elixir-ts-mode) . exunit-mode))
#+end_src

* inf-elixir
Provides functions for opening and interacting with IEx, the interactive Elixir
REPL, from inside Emacs. Alchemist included a great IEx integration feature, but
since Alchemist has been abandoned for years now, =inf-elixir= provides a
fantastic alternative, and accompanies =elixir-ls= or =lexical= nicely. In fact,
combining =lexical= with =inf-elixir= provides the nearly same turbo charge for
Elixir that SLIME does for Common Lisp.

** Notes
- If you want to use the =open()= helper function in IEx to open a module or
  file in Emacs, you must run Emacs in server mode.

** =use-package= specification
#+begin_src emacs-lisp
  (use-package inf-elixir
    :hook
    ;; Turn on `inf-elixir-minor-mode' for all Elixir buffers.
    ;; This mode allows interaction with the IEx REPL.
    (elixir-ts-mode . inf-elixir-minor-mode)
    :general
    (my/user-leader-def elixir-ts-mode-map
      "i i" 'inf-elixir
      "i p" 'inf-elixir-project
      "i l" 'inf-elixir-send-line
      "i r" 'inf-elixir-send-region
      "i b" 'inf-elixir-send-buffer
      "i R" 'inf-elixir-reload-module)
    (my/evil-leader-def elixir-ts-mode-map
      "ii" 'inf-elixir
      "ip" 'inf-elixir-project
      "il" 'inf-elixir-send-line
      "ir" 'inf-elixir-send-region
      "ib" 'inf-elixir-send-buffer
      "iR" 'inf-elixir-reload-module))
#+end_src

* elixir-mode (deprecated)
Major mode for working with Elixir files. =elixir-mode= provides font-locking,
indentation, and navigation support for the Elixir programming language.

NOTE: This package is for Emacs 29 and earlier. Starting with version 30, Emacs
comes with a built-in Elixir major mode with tree-sitter support. You should use
the built-in =elxir-mode= when possible.

#+begin_src emacs-lisp
  (use-package elixir-mode
    :if (<= emacs-major-version 29))
#+end_src

* Alchemist (deprecated)
A suite of tools for working with Elixir projects, including Phoenix MVC
applications.

*DEPRECATION NOTICE:* Much to the dismay of many an Elixirite, work on
Alchemist has halted indefinitely. As of now, the community is focusing all of
their efforts on =elixir-ls=, the Elixir LSP server. =elixir-ls= is an
amazing tool, one of the best language servers by far, but it lacks some of
the features of Alchemist. Thus, it is likely that a number of Alchemist
features will find new homes as their own projects on GitHub, so be on the
lookout.

#+begin_src emacs-lisp
  (use-package alchemist
    :disabled)
#+end_src
