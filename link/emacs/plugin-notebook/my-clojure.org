#+title:  Clojure Configuration/Plugins
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:25
#+STARTUP: fold

Integration for the awesome Clojure programming language.  Thanks, Rich! The
world needed another Lisp.

* clojure-mode
  Major mode for editing Clojure files.

  #+begin_src emacs-lisp
    (use-package clojure-mode
      :straight
      ;; Default straight recipe only includes the clojure-mode.el file for some
      ;; reason.
      (clojure-mode :type git :host github :repo "clojure-emacs/clojure-mode"
                    :files (:defaults))
      :config
      ;; Add extra syntax coloring (imprecise, but pretty)
      (require 'clojure-mode-extra-font-locking))
  #+end_src

* CIDER
  An /extremely/ powerful IDE for Clojure similar to SLIME or SLY for Common
  Lisp.

** Functions
  #+begin_src emacs-lisp
    (defun my/set-cider-repl-keybindings ()
      "Hook function for setting keybindings in CIDER nREPL mode.
    Make sure to only run this function after 'sly-mrepl loads."
      (with-eval-after-load "cider-repl"
        ;; Get rid of horrendous "," shortcut
        (define-key cider-repl-mode-map (kbd ",") nil)
        ;; Standard evil-mode shortcuts.
        (evil-define-key '(normal insert) cider-repl-mode-map
          ;; Cycle command input history with C-j and C-k.
          (kbd "C-j") #'cider-repl-next-input
          (kbd "C-k") #'cider-repl-previous-input)
        ;; Define useful evil-leader shortcuts.
        (evil-leader/set-key-for-mode 'cider-repl-mode
          "," #'cider-repl-handle-shortcut)))
  #+end_src

** =use-package= specification
  #+begin_src emacs-lisp
    (use-package cider
      :after evil-collection
      :hook
      (clojure-mode . cider-mode)
      :bind
      (:map cider-mode-map
            ;; Start CIDER REPL
            ("C-c C-n" . cider-jack-in))
      :custom
      ;; Set this to t if you want to see all debugging info for communication
      ;; between CIDER and the nREPL server in a buffer named *nrepl-messages
      ;; conn-name*. WARNING: This will greatly slow down CIDER!
      (nrepl-log-messages nil)
      ;; Colorize defined symbols of the following types:
      (cider-font-lock-dynamically '(macro core function var))
      ;; Turn off hover documentation since lsp-mode provides a better alternative.
      (cider-eldoc-display-for-symbol-at-point nil)
      ;; CIDER will try to add expected function arguments based on the current
      ;; context (for example for the datomic.api/q function where it will show the
      ;; expected inputs of the query at point) if this is set to t
      (cider-eldoc-display-context-dependent-info t)
      :config
      (my/set-cider-repl-keybindings))
  #+end_src

* clj-refactor
  =clj-refactor= provides refactoring support for Clojure projects. It
  complements the refactoring functionality you'd find in =clojure-mode= and
  CIDER.

  #+begin_src emacs-lisp
    (use-package clj-refactor
      :hook
      (clojure-mode .
                    (lambda ()
                      (clj-refactor-mode 1)
                      ;; This choice of keybinding leaves cider-macroexpand-1
                      ;; unbound
                      (cljr-add-keybindings-with-prefix "C-c C-m")))
      :custom
      ;; disable clj-refactor adding ns to blank files.
      ;; This is for interoperability with lsp-mode.
      ;; lsp-mode takes care of this task.
      (cljr-add-ns-to-blank-clj-files nil))
  #+end_src
