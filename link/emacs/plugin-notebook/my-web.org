#+title:  Web Development Configuration/Plugins
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:26
#+STARTUP: fold

* web-mode
  =web-mode= is the godfather of all website code editing modes in Emacs.
  It is mainly for editing web templates, such as =.jsp= or =.php= files.
  I recommend using =web-mode= instead of =html-mode= or =mhtml-mode=.
  There is a bug in =mhtml-mode= where typing a comment causes Emacs to hang.

  #+begin_src emacs-lisp
    (use-package web-mode
      :mode
      ;; Automatically start files with the following file extensions in web-mode
      ;; HTML
      (("\\.html?\\'" . web-mode)
       ;; PHP template files (virtually the same thing as .php files)
       ("\\.phtml\\'" . web-mode)
       ;; Other PHP template files
       ("\\.tpl\\.php\\'" . web-mode)
       ;; ASP.NET, Grails, JSP template files
       ("\\.[agj]sp\\'" . web-mode)
       ;; More ASP.NET template files
       ("\\.as[cp]x\\'" . web-mode)
       ;; Ruby Script template
       ("\\.erb\\'" . web-mode)
       ;; Mustache templating system
       ("\\.mustache\\'" . web-mode)
       ;; Django template
       ("\\.djhtml\\'" . web-mode)
       ;; Embedded Elixir template.
       ("\.html\\.eex\\'" . web-mode)))
  #+end_src

* emmet-mode
  This is Emacs' Emmet package.
  The default expand key for emmet snippets is =C-j=.

  #+begin_src emacs-lisp
    (use-package emmet-mode
      :hook
      ;; Auto start Emmet in certain modes, such as any markup language or CSS
      ((css-mode sgml-mode web-mode) . emmet-mode)
      :config
      ;; Emmet mode hooks
      (add-hook 'emmet-mode-hook (lambda ()
                                     ;; Move the cursor between the first empty
                                     ;; quotes after expanding
                                     (setq emmet-move-cursor-between-quotes t))))

  #+end_src

* restclient
  Awesome REST client for Emacs!
  #+begin_src emacs-lisp
    (use-package restclient)
  #+end_src

* verb
  Verb is a package for Emacs which allows you to organize and send HTTP
  requests. More than that, it helps you create full blown REST APIs similar to
  Swagger/OpenAPI for Java, only Verb operates on Org mode files instead of code
  comments. Verb includes:

  - Multiple HTTP calls per files, each specified in its own Org mode heading,
  - A templating system for URLs based on Emacs Lisp,
  - Hierarchical organization of requests, which allows for more templating,
  - Easy system for specifying request headers and request body,
  - Interactive system for examining response headers,
  - Ability to resend old requests,
  - Much more.

** Notes
   The package introduces a new minor mode, Verb mode, which works as an
   extension to =org-mode=. The core idea is to organize specifications for HTTP
   requests using Org's tree structure. Properties defined in the child headings
   extend or sometimes override properties defined in the parent headings - this
   way, it is easy to define many HTTP request specifications without having to
   repeat common components as URL hosts, authentication headers, ports,
   etc. Verb tries to combine the usefulness of Org mode with the common
   functionality provided by other HTTP clients. However, very little knowledge
   of Org mode is needed to use Verb.

   Verb requires at least Emacs version 25 to work.

** =use-package= specification
  #+begin_src emacs-lisp
    (use-package verb
      :after org
      :hook
      (org-mode . (lambda ()
                    (define-key org-mode-map (kbd "C-c C-v") verb-command-map)))
      :custom
      ;; Automatically kill old response buffers when new responses arrive.
      (verb-auto-kill-response-buffers t))
  #+end_src

* ob-restclient
  Extension for =restclient.el= for org-babel support.
  With this, you can press =C-c C-c= in a restclient source block
  to execute a REST query:

  #+BEGIN_SRC restclient
    GET http://example.com
  #+END_SRC

  #+RESULTS:
  #+BEGIN_SRC html
    <!doctype html>
    <html>
      <head>
        ...
      </head>
    </html>
  #+END_SRC

  #+begin_src emacs-lisp
    (use-package ob-restclient
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t))))
  #+end_src

* skewer-mode
  Provides a live development environemnt for JavaScript, CSS, and HTML from
  within Emacs.

  #+begin_src emacs-lisp
    (use-package skewer-mode
      :config
      (skewer-setup))
  #+end_src
