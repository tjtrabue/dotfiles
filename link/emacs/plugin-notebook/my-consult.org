#+title:    Consult: Non-Opinionated Completion System
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2021:07:17
#+property: header-args:emacs-lisp :lexical t
#+tags:
#+STARTUP: fold

Yet another narrowing completion framework for Emacs. Jeez, you think there
would be enough of them at this point to satisfy these Emacs sycophants, but no.
Consult is newer than Helm and Ivy, and integrates nicely with Selectrum and
Vertico.  Actually, Consult was designed with the same philosophy that guided
Selectrum and Vertico's development: depend only on =completing-read= and
nothing else. Thus, I think Consult will become the primary completion system
for Emacs. It's very feature-rich.

* What is Consult really?
Consult is designed to fulfill the same role for Selectrum and Vertico that
Counsel does for Ivy. You can think of Selectrum, Consult, and Embark as a
similar tool suite to Ivy, Counsel, and Swiper, although these triplets do not
match up one-to-one. The main difference between these two tool suites is that
Ivy, Counsel, and Swiper are exclusive to one another, and must be used as a
package deal. Consult is completely agnostic to the narrowing completion UI you
choose. It could be Selectrum, Vertico, the built-in Emacs completion system, or
any other compatible framework.

* use-package specification
  #+begin_src emacs-lisp
    (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
             ("C-c h" . consult-history)
             ("C-c m" . consult-mode-command)
             ("C-c B" . consult-bookmark)
             ("C-c k" . consult-kmacro)
             ;; C-x bindings (ctl-x-map)
             ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
             ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
             ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
             ;; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
             ;; Other custom bindings
             ("M-y" . consult-yank-pop)                ;; orig. yank-pop
             ("<help> a" . consult-apropos)            ;; orig. apropos-command
             ;; M-g bindings (goto-map)
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ;; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
             ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-project-imenu)
             ;; M-s bindings (search-map)
             ("M-s f" . consult-find)
             ("M-s L" . consult-locate)
             ("M-s g" . consult-grep)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ("M-s l" . consult-line)
             ("M-s m" . consult-multi-occur)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
             ;; recentf
             ([remap recentf-open-files] . consult-recent-file)
             ;; Isearch integration
             ("M-s e" . consult-isearch)
             :map isearch-mode-map
             ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
             ("M-s l" . consult-line))                 ;; needed by consult-line to detect isearch
      ;; Enable automatic preview at point in the *Completions* buffer.
      ;; This is relevant when you use the default completion UI,
      ;; and not necessary for Vertico, Selectrum, etc.
      :hook
      (completion-list-mode . consult-preview-at-point-mode)
      ;; The :init configuration is always executed (Not lazy)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0
            register-preview-function #'consult-register-format)
      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)
      ;; Optionally replace `completing-read-multiple' with an enhanced version.
      (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :custom
      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (consult-narrow-key "<")
      ;; Optionally configure a function which returns the project root directory.
      (consult-project-root-function #'projectile-project-root)
      :config
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-file consult--source-project-file consult--source-bookmark
       :preview-key (kbd "M-."))
      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help))
  #+end_src
