#+title:    Consult: Non-Opinionated Completion System
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2021:07:17
#+property: header-args:emacs-lisp :lexical t
#+tags:
#+STARTUP: fold

Yet another completion framework for Emacs. Jeez, you think there would be
enough of them at this point to satisfy these Emacs sycophants, but no.  Consult
is a bit of a different creature than Helm and Ivy. In fact, Consult is more
closely a relatively of Counsel than of Ivy, but whereas Counsel is a suite of
utility functions implemented on Ivy's completion system, Consult is a suite of
utility functions implemented using only Emacs' built-in =completing-read= API.
Furthermore, whereas Counsel integrates only with Ivy, Consult integrates with
any narrowing completion UI that supports =completing-read=, such as the default
Emacs completion system, =icomplete-vertical=, Selectrum, and Vertico. This
makes Consult far more flexible and widely usable than Counsel or Helm since a
myriad systems benefit from Consult's functions.

* What is Consult really?
  Consult is designed to fulfill the same role for Selectrum and Vertico that
  Counsel fills for Ivy. You can think of Selectrum/Vertico, Consult, and Embark
  as a similar tool suite to Ivy, Counsel, and Swiper, although these triplets
  do not match up one-to-one. The main difference between these two tool suites
  is that Ivy, Counsel, and Swiper are exclusive to one another, and must be
  used as a package deal. Consult is completely agnostic to the narrowing
  completion UI you choose. It could be Selectrum, Vertico, the built-in Emacs
  completion system, or any other compatible framework.

* =use-package= specification
  #+begin_src emacs-lisp
    (use-package consult
      :after projectile
      :demand t
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :general
      (my/user-leader-def
        ;; C-c bindings (mode-specific-map)
        "h" 'consult-history
        "m" 'consult-mode-command
        "B" 'consult-bookmark
        "k" 'consult-kmacro)
      (general-def
        ;; orig. repeat-complex-command
        "C-x M-:" 'consult-complex-command
        ;; A better alternative to `persp-switch-to-buffer'
        "C-x b" 'consult-project-buffer
        ;; orig. switch-to-buffer
        "C-x C-b" 'consult-buffer
        ;; orig. switch-to-buffer-other-window
        "C-x 4 b" 'consult-buffer-other-window
        ;; orig. switch-to-buffer-other-frame
        "C-x 5 b" 'consult-buffer-other-frame
        ;; Custom M-# bindings for fast register access
        "M-#" 'consult-register-load
        ;; orig. abbrev-prefix-mark (unrelated)
        "M-'" 'consult-register-store
        "C-M-#" 'consult-register
        ;; Other custom bindings
        ;; orig. yank-pop
        "M-y" 'consult-yank-pop
        ;; orig. apropos-command
        "<help> a" 'consult-apropos
        ;; M-g bindings (goto-map)
        "M-g e" 'consult-compile-error
        ;; Alternative: consult-flycheck
        "M-g f" 'consult-flymake
        ;; orig. goto-line
        "M-g g" 'consult-goto-line
        ;; orig. goto-line
        "M-g M-g" 'consult-goto-line
        ;; Alternative: consult-org-heading
        "M-g o" 'consult-outline
        "M-g m" 'consult-mark
        "M-g k" 'consult-global-mark
        "M-g i" 'consult-imenu
        "M-g I" 'consult-project-imenu
        ;; M-s bindings (search-map)
        "M-s f" 'consult-find
        "M-s L" 'consult-locate
        "M-s g" 'consult-grep
        "M-s G" 'consult-git-grep
        "M-s r" 'consult-ripgrep
        "M-s l" 'consult-line
        "M-s m" 'consult-multi-occur
        "M-s k" 'consult-keep-lines
        "M-s u" 'consult-focus-lines
        ;; recentf
        [remap recentf-open-files] 'consult-recent-file
        ;; Isearch integration
        "M-s e" 'consult-isearch)
      (general-def isearch-mode-map
        ;; orig. isearch-edit-string
        "M-e" 'consult-isearch
        ;; orig. isearch-edit-string
        "M-s e" 'consult-isearch
        ;; needed by consult-line to detect isearch
        "M-s l" 'consult-line)
      (my/evil-leader-def
        ;; Open the fancy consult-buffer navigator.
        "cb" 'consult-bookmark)
      :hook
      ;; Enable automatic preview at point in the *Completions* buffer.
      ;; This is relevant when you use the default completion UI,
      ;; and not necessary for Vertico, Selectrum, etc.
      (completion-list-mode . consult-preview-at-point-mode)
      ;; The :init configuration is always executed (Not lazy)
      :init
      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)
      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :custom
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (register-preview-delay 0)
      (register-preview-function #'consult-register-format)
      ;; Use Consult to select xref locations with preview
      (xref-show-xrefs-function #'consult-xref)
      (xref-show-definitions-function #'consult-xref)
      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (consult-narrow-key "<")
      ;; Optionally configure a function which returns the project root directory.
      (consult-project-root-function #'projectile-project-root)
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      (consult-preview-key (kbd "C-;"))
      ;; Improve the standard completion in region function
      (completion-in-region-function #'consult-completion-in-region)
      ;; (consult-preview-key 'any)
      ;; (consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      :config
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key 'any
       consult-grep consult-git-grep consult-ripgrep
       consult-bookmark consult-recent-file consult-xref
       :preview-key (kbd "C-;"))
      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help))
  #+end_src

* Plugins
** consult-dir
A very powerful plugin for listing directories from a myriad different sources,
including recentf directories, project directories, bookmarked directories, and
more.

#+begin_src emacs-lisp
  (use-package consult-dir
    :after consult
    :general
    (general-def
      "C-x C-d" 'consult-dir)
    (my/evil-leader-def
      "cd" 'consult-dir))
#+end_src

** consult-lsp
Integration with =lsp-mode=.
#+begin_src emacs-lisp
  (use-package consult-lsp
    :after (consult lsp-mode)
    :general
    (general-def lsp-command-map
      "c d" 'consult-lsp-diagnostics
      "c f" 'consult-lsp-file-symbols
      "c s" 'consult-lsp-symbols)
    (general-def lsp-mode-map
      "C-S-d" 'consult-lsp-diagnostics
      "C-S-f" 'consult-lsp-symbols))
#+end_src

** consult-ls-git

#+begin_src emacs-lisp :tangle yes
  (use-package consult-ls-git
    :after consult)
#+end_src

** consult-projectile
Integrates =consult= with the =projectile= project manager. It provides the
awesome =consult=-ing read front end for =projectile= functions.

*** Functions
#+begin_src emacs-lisp
  (defun my/consult-projectile-add-buffer-to-perspective ()
    "Advising function to add the buffer to the current perspective."
    (when (bound-and-true-p persp-mode)
      (persp-add-buffer (current-buffer))))
#+end_src

*** =use-package= specification
#+begin_src emacs-lisp
  (use-package consult-projectile
    :after (consult projectile)
    :general
    (general-def 'normal 'override
      ;; Use consult-projectile instead of projectile-find-file
      [remap projectile-find-file] 'consult-projectile)
    (general-def '(global-map projectile-command-map)
      [remap projectile-switch-project]   'consult-projectile-switch-project
      [remap projectile-find-dir]         'consult-projectile-find-dir
      [remap projectile-recentf]          'consult-projectile-recentf
      [remap projectile-switch-to-buffer] 'consult-projectile-switch-to-buffer)
    :init
    (advice-add #'consult-projectile-find-file
                :after
                #'my/consult-projectile-add-buffer-to-perspective))
#+end_src

** consult-yasnippet

#+begin_src emacs-lisp
  (use-package consult-yasnippet
    :after (consult yasnippet)
    :general
    (general-def yas-minor-mode-map
      "C-c y y" 'consult-yasnippet))
#+end_src

** consult-flycheck
=consult= integration with the =flycheck= linting engine.

#+begin_src emacs-lisp
  (use-package consult-flycheck
    :after (consult flycheck)
    :general
    (general-def
      [remap consult-flymake] 'consult-flycheck))
#+end_src
