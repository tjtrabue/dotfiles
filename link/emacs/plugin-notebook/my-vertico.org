#+title:    Vertico: Minimal Completion UI
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2021:07:21
#+property: header-args:emacs-lisp :lexical t
#+tags:
#+STARTUP: fold

=vertico= provides a Helm-like completion UI for several completion frameworks,
including the built-in Emacs completion system and the =consult=
framework. Please keep in mind that =vertico= is only the UI. It is not a
completion framework unto itself. The idea is that Vertico is *totally*
compatible with Emacs' =completing-read= API, meaning that any functions that
use =completing-read= for completion can benefit from Vertico's sleek narrowing
search front-end. Thus, Vertico really is a /replacement/ for Emacs' completion
UI, as well as an enhancement.

* Vertico vs. other narrowing completion UIs
  Vertico is an alternative to completion frameworks such as Selectrum, Ivy,
  Helm, IDO, =icomplete-vertical=, etc. The main difference is that Vertico aims
  to be as minimal as possible, only providing a pretty UI and deferring the
  completion system to other plugins, such as the built-in Emacs completion
  system or =orderless=.

* use-package specification
  #+begin_src emacs-lisp
    (use-package vertico
      :hook
      (after-init . vertico-mode)
      :bind*
      (:map vertico-map
            ;; Navigate vertico with C-j and C-k
            ("C-j" . vertico-next)
            ("C-k" . vertico-previous)
            ;; Pressing ? brings up help for available completions
            ("?" . minibuffer-completion-help)
            ;; Complete selection with C-l
            ("C-l" . vertico-insert))
      :custom
      ;; Whether to grow and shrink vertico buffer dynamically
      ;; Can be t (whichi means grow and shrink), nil, or 'grow-only
      (vertico-resize nil)
      ;; Max number of candidates to show
      (vertico-count 20)
      ;; Enable cycling for vertico-next and vertico-previous
      (vertico-cycle t))
  #+end_src
