#+title:  Ivy, Counsel, Swiper: Narrowing Search Framework
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:25
#+STARTUP: fold

These three plugins are a great alternative to =helm=. =ivy= is the primary
plugin in this tool suite, and =swiper= and =counsel= sit on top of =ivy=,
depending on it for their operations.

Needed for performance:
#+begin_src emacs-lisp :tangle yes
;; -*- lexical-binding: t; -*-

#+end_src

* Ivy
  =ivy= is a generic completion mechanism for Emacs, and a faster alternative to
  =helm=. While it operates similarly to other completion schemes such as
  =icomplete-mode=, =ivy= aims to be more efficient, smaller, simpler, and
  smoother to use, yet highly customizable.

  *NOTE:* Currently deprecated in favor of =selectrum=, which is a newer,
  fancier narrowing selection framework for Emacs. See =my-selectrum= for more
  details.

** Functions

#+begin_src emacs-lisp :tangle yes
    (defun my/ivy-toggle-mark ()
  "Used to toggle an ivy mark in the ivy minibuffer. If the current
  candidate is not marked, mark it. Otherwise, unmark the marked candidate."
      (interactive)
      (if (ivy--marked-p)
          (ivy-unmark)
        (ivy-mark)))
#+end_src

** use-package specification
#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :after (helm)
    :bind
    (:map ivy-switch-buffer-map
     ;; Make sure that navigation shortcuts work
     ("C-k" . ivy-previous-line)
     ;; Rebind the switch-buffer-kill function to something sane
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-minibuffer-map
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     ;; Use TAB to mark/unmark candidates
     ("TAB" . my/ivy-toggle-mark))
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    :init
    ;; Make the ivy window's height a function of its parent frame's height
    (setq ivy-height-alist
      '((t
         lambda (_caller)
         (/ (frame-height) 3))))
    :config
    (ivy-mode))
#+end_src

** Plugins
*** ivy-all-the-icons
    Ivy integration plugin for the incredible =all-the-icons= plugin.

#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons-ivy
    :hook
    (after-init . all-the-icons-ivy-setup))
#+end_src

*** ivy-prescient

#+begin_src emacs-lisp :tangle yes
  (use-package ivy-prescient
    :config
    (ivy-prescient-mode 1))
#+end_src

* Counsel
  =counsel= is a collection of =ivy= enhancements for standard Emacs functions,
  such as =find-file= and =switch-to-buffer=.

  *NOTE:* Currently deprecated in favor of =selectrum=, which is a newer,
  fancier narrowing selection framework for Emacs. See =my-selectrum= for more
  details.

** use-package specification
#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :after ivy
    :config
    (counsel-mode))
#+end_src

** Plugins
*** counsel-projectile
#+begin_src emacs-lisp :tangle yes
  (use-package counsel-projectile
    :after (counsel projectile)
    :config
    (counsel-projectile-mode))
#+end_src

* Swiper
  =swiper= is a narrowing search tool which serves as an alternative to
  =isearch=.

#+begin_src emacs-lisp :tangle yes
  (use-package swiper
    :after (evil-collection)
    :bind
    (("C-s" . swiper)
     ("C-r" . swiper)
     :map evil-normal-state-map
     ;; Use swiper for evil-mode's forward and reverse search
     ;; functions, as well.
     ("/" . swiper)
     ("?" . swiper)))
#+end_src
