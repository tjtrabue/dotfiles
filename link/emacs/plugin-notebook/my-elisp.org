#+TITLE:  Emacs Lisp Configuration/Plugins
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020-05-25
#+STARTUP: fold

Emacs Lisp is the Emacs Lisp dialect of the age-old Lisp programming language.
This file contains Emacs plugins and configuration for writing Emacs Lisp.

* ielm [built-in]
IELM is the Inferior Emacs Lisp Mode. That is, it is a simple REPL for Emacs
Lisp built on COMINT. It comes packaged with Emacs, so no installation is
necessary.

#+begin_src emacs-lisp
  (use-package ielm
    :commands ielm)
#+end_src

* eldoc [built-in]
Display small documentation strings in the minibuffer.

#+begin_src emacs-lisp
  (use-package eldoc
    :delight
    :custom
    ;; How to display messages in the echo area.  Eldoc can display the first
    ;; returned message, or compose all of the returned messages into a single
    ;; string.
    (eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :init
    (global-eldoc-mode 1))
#+end_src
* highlight-defined
Highlights defined Elisp symbols. Recognizes Lisp function, built-in
function, macro, face and variable names.

#+begin_src emacs-lisp
  (use-package highlight-defined
    :hook
    (emacs-lisp-mode . highlight-defined-mode))
#+end_src

* suggest
Discover Emacs Lisp functions that do what you want.

#+begin_src emacs-lisp
  (use-package suggest)
#+end_src

* easy-escape
Fix escapes in Emacs Lisp regular expressions.

#+begin_src emacs-lisp
  (use-package easy-escape
    :delight easy-escape-minor-mode
    :hook
    ((lisp-mode emacs-lisp-mode) . easy-escape-minor-mode))
#+end_src

* eros
Provides a cool overlay when evaluating an Elisp expression that looks like
=(expr) => output=.

For example: =(number-sequence 1 10)= results in: =1 2 3 4 5 6 7 8 9 10=

#+begin_src emacs-lisp
  (use-package eros
    :hook
    (emacs-lisp-mode . eros-mode)
    :general
    (my/evil-leader-def
      "<" 'eros-eval-last-sexp))
#+end_src

* elmacro
Shows keyboard macros or latest interactive commands as Emacs Lisp.  This
package is quite old, so I don't expect the author to update it again.

#+begin_src emacs-lisp
  (use-package elmacro)
#+end_src

* elisp-slime-nav
SLIME allows convenient navigation to the symbol at point (using =M-.=), and the
ability to pop back to previous marks (using =M-,=).

This plugin provides similar navigation for Emacs Lisp, supporting navigation to
the definitions of variables, functions, libraries and faces.

Additionally, =elisp-slime-nav= provides a way to describe the symbol at point,
whatever its type. As with =slime-describe-symbol=, this functionality is bound
both to =C-c C-d d= and =C-c C-d C-d= by default.

#+begin_src emacs-lisp
  (use-package elisp-slime-nav
    :delight
    :hook
    ((emacs-lisp-mode ielm-mode) . elisp-slime-nav-mode)
    :general
    (general-def 'normal elisp-slime-nav-mode-map
      ;; elisp-slime-nav binds "K" in evil's normal mode to lookup the Elisp
      ;; symbol at point. However, we can get more mileage out of this binding by
      ;; calling 'helpful-at-point instead of the standard Emacs help function .
      [remap elisp-slime-nav-describe-elisp-thing-at-point] 'helpful-at-point))
#+end_src

* elisp-autofmt
=elisp-autofmt= is a utility to auto-format Emacs Lisp code. At the time of this
writing, it is still under development and not particularly stable. Make sure to
stay on top of this package's new features and changing API.

#+begin_src emacs-lisp
  (use-package elisp-autofmt
    :straight
    (elisp-autofmt :type git :host codeberg :repo "ideasman42/emacs-elisp-autofmt"
                   :files (:defaults "elisp-autofmt*"))
    :commands (elisp-autofmt-buffer elisp-autofmt-mode)
    :hook (emacs-lisp-mode . elisp-autofmt-mode)
    :general
    (my/evil-leader-def emacs-lisp-mode-map
      "=" (lambda ()
            "Run elisp-autofmt-buffer manually."
            (interactive)
            (elisp-autofmt-buffer)))
    :custom
    ;; This is a function that determines when/if Elisp
    ;; code should be auto-formatted on save.
    ;; The user may set it to one of the following pre-defined values:
    ;;
    ;; - 'always: Always format on save.
    ;; - 'elisp-autofmt-check-elisp-autofmt-exists: Only reformat
    ;;   when ".elisp-autofmt" exists in some parent dir of project.
    ;;
    ;; In addition to these symbols, you may specify a custom function yourself.
    ;;
    ;; I have noticed that auto-formatting on save messes with
    ;; `aggressive-indent-mode''s hooks, so I prefer to disable the auto-format
    ;; feature altogether in favor of manually formatting buffers.
    (elisp-autofmt-on-save-p (lambda ()
                               "Never auto-format Elisp buffers on save."
                               nil)))
#+end_src

* elisp-refs
=elisp-refs.el= is an Emacs package for finding references to functions, macros
or variables. Unlike a dumb text search, =elisp-refs.el= actually parses the
code, so it's never confused by comments or `foo-bar' matching `foo'.

[[file:~/.emacs.d/plugin-notebook/my-help.org::helpful][helpful]] requires this package.

#+begin_src emacs-lisp
  (use-package elisp-refs
    :demand t
    :straight
    (elisp-refs :type git :host github :repo "Wilfred/elisp-refs"
                ;; Straight.el cannot seem to generate the autoloads for
                ;; elisp-refs, so we should skip that step of the build process.
                ;; We should investigate this issue further.
                :build (:not autoloads)))
#+end_src
