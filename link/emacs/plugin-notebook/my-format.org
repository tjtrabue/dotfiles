#+title:  Code Formatting Plugins
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:25
#+STARTUP: fold

Assorted code formatting plugins.

* Variables

#+begin_src emacs-lisp
  ;; I've commented out several major modes that are either badly supported
  ;; (like sh-mode) or have better support with lsp-mode.
  (defvar my/format-all-major-modes '(
      ;; c-mode
      ;; c++-mode
      clojure-mode
      ;; cmake-mode
      cperl-mode
      ;; css-mode
      ;; elixir-mode
      emacs-lisp-mode
      erlang-mode
      go-mode
      haskell-mode
      ;; html-mode
      ;; java-mode
      ;; js-mode
      ;; json-mode
      ;; LaTeX-mode
      ;; less-css-mode
      lisp-mode
      lisp-data-mode
      lua-mode
      ;; markdown-mode
      ;; nxml-mode
      ;; objc-mode
      perl-mode
      ;; php-mode
      ;; python-mode
      ;; scss-mode
      ;; sgml-mode
      ;; Do not manage sh-mode since format-all's shfmt code is bunk.
      ;; We have emacs-shfmt to take care of this instead.
      ;; sh-mode
      ;; toml-mode
      ;; yaml-mode
    )
    "List of major modes subject to automatic formatting by `format-all'.")
#+end_src

* Functions
#+begin_src emacs-lisp
  (defun my/add-format-all-hooks ()
    "Add hooks for `format-all-mode' to all major modes listed in
`my/format-all-major-modes'."
    (mapc (lambda (mode)
        (let ((hook-name (concat (symbol-name mode) "-hook")))
          (add-hook (intern hook-name) #'format-all-mode)))
      my/format-all-major-modes))

  (defun my/remove-editorconfig-format-hooks ()
    "Get rid of editorconfig code formatting hooks for major modes managed
by format-all or some other code formatter."
    (mapc (lambda (mode)
        (let ((hook-name (concat (symbol-name mode) "-hook")))
          (add-hook (intern hook-name) (lambda ()
             (remove-hook 'before-save-hook #'editorconfig-format-buffer
                                            'local)))))
      my/format-all-major-modes))
#+end_src

* format-all
  =format-all= is a package for automatically formatting source code files.  It
  supports most popular programming and markup languages, although it will often
  require third-party plugins to perform its tasks, so be ready to hunt down
  some code formatting software.

#+begin_src emacs-lisp
  (use-package format-all
    :demand t
    :after editorconfig
    :init
    (my/remove-editorconfig-format-hooks)
    (my/add-format-all-hooks))
#+end_src

* reformatter
  This is a fantastic Emacs framework for defining arbitrary code formatters
  contributed by Steve Purcell. For instance, to define a code formatter for the
  =dhall= programming language (assuming we have a predefined =dhall-command=
  variable containing the executable command to run), we could write:

  (reformatter-define dhall-format
    :program dhall-command
    :args '("format")
    :lighter " DF")

  The =reformatter-define= macro will expand our code into three functions:
  =dhall-format-buffer=, =dhall-format-region=, and =dhall-format-on-save-mode=,
  the last of which we can use as a hook for specific major modes.

  Bearing all of this in mind, it is now incredibly easy to fill in the gaps
  where systems like =format-all= fall short. Thanks, Steve!

#+begin_src emacs-lisp
  (use-package reformatter
    :hook
    (python-mode . my-python-format-on-save-mode)
    :config
    ;; NOTE: It is very important NOT to use our usual 'my/' prefix for these
    ;;       functions because reformatter creates tmp files with the names of
    ;;       our formatter functions, so a slash in the function's name confuses
    ;;       the location of our tmp file.
    (reformatter-define my-cmake-format
      :program "cmake-format"
      :args (list "--inplace"))
    (reformatter-define my-python-format
      :program "black"
      :args (list "-"))
    (reformatter-define my-shell-format
      :program "shfmt"
      :args (list "-")))
#+end_src
* emacs-shfmt
  This is an Emacs plugin solely for =shfmt=. =format-all= /does/ have =shfmt=
  integration built into it, but it's pretty broken. For instance, due to the
  CLI options passed to =shfmt= by =format-all=, spaces will always be replaced
  with tabs, and there is no way to change this behavior aside from editing the
  code for =format-all= directly, something I refuse to do. This plugin is much
  nicer for =shfmt= integration with Emacs.

#+begin_src emacs-lisp
  (use-package shfmt
    :after (reformatter)
    :hook (sh-mode . shfmt-on-save-mode))
#+end_src
