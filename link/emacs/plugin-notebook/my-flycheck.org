#+TITLE:  The Flycheck Syntax Checker
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020-05-25
#+STARTUP: fold

=flycheck= is a phenomenal general-purpose syntax checker that uses a plugin
system to lint source code buffers.  =flycheck= comes pre-packaged with a number
of language syntax plugins, so it will probably work for you without any extra
configuration. However, should you need to install a new =flycheck= plugins it
is simple to do.

* flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :demand t
    :general
    ;; This is general.el's way of accomplishing :bind-keymap, but
    ;; general's way is more flexible and integrates with its
    ;; `general-describe-keybindings' function.
    (my/user-leader-def flycheck-mode-map
      "F" '(:keymap flycheck-command-map))
    (my/evil-leader-def flycheck-mode-map
      "fb" 'flycheck-buffer
      "fd" 'flycheck-display-error-at-point
      "fl" 'flycheck-list-errors
      "fn" 'flycheck-next-error
      "fp" 'flycheck-previous-error)
    (general-def 'normal flycheck-mode-map
      "[c"  'flycheck-previous-error
      "]c"  'flycheck-next-error)
    :custom
    ;; The allotted time before displaying errors at point.
    (flycheck-display-errors-delay 0.5)
    ;; How many seconds Flycheck waits before checking the buffer.
    ;; Setting this value higher may enhance Emacs' performance.
    ;; Default value: 0.5
    (flycheck-idle-change-delay 0.5)
    ;; How many seconds Flycheck waits to check the buffer after the user has
    ;; switched to a new buffer.
    ;; Settings this value higher may enhance Emacs' performance.
    ;; Default value: 0.5
    (flycheck-idle-buffer-switch-delay 0.5)
    ;; How to highlight perform highlighting.
    ;;   columns -> Highlight a single character
    ;;   symbols -> highlight the problematic symbol, if any, or act like columns
    ;;   sexps   -> highlight a full expression, if any, or act like columns
    ;;   lines   -> highlight the entire line (faster)
    (flycheck-highlighting-mode 'symbols)
    ;; List of symbols used to determine when flycheck runs.
    ;; NOTE: Firing on idle-change can degrade Emacs' performance!
    ;;
    ;;   save -> Check syntax immediately after the buffer was saved.
    ;;
    ;;   idle-change -> Check syntax a short time (see flycheck-idle-change-delay)
    ;;                  after the last change to the buffer.
    ;;
    ;;   idle-buffer-switch -> Check syntax a short time
    ;;                         (see flycheck-idle-buffer-switch-delay)
    ;;                         after the user switches to a buffer.
    ;;
    ;;   new-line -> Check syntax immediately after a new line was inserted into
    ;;               the buffer.
    ;;
    ;;   mode-enabled -> Check syntax immediately when variable flycheck-mode is
    ;;                   non-nil. I have found that using this option causes an
    ;;                   up-front slowdown when opening source code files, so I
    ;;                   tend not to use it.
    (flycheck-check-syntax-automatically '(save idle-change idle-buffer-switch))
    :config
    ;; Should call this function instead of setting up a `prog-mode' hook for `flycheck-mode' because
    ;; doing so can result in a hook-call cycle during eager macro expansion.
    (global-flycheck-mode 1))
#+end_src

* flyspell
=flyspell= is =flycheck='s companion spell-checker plugin. Where =flycheck=
checks for code correctness, =flyspell= checks spelling in both the traditional
and in a more coding-correct sense (i.e., take camel case into account, and so
on).

*NOTE:* =flyspell-mode= requires you to have an ispell-compatible spell-checking
binary installed, such as =hunspell=.  Furthermore, =hunspell= requires you to
have dictionaries installed in predictable locations. Run =hunspell -D= to view
the path =hunspell= uses to find dictionaries, which is different depending on
your operating system.

#+begin_src emacs-lisp
  (use-package flyspell
    ;; :hook
    ;; NOTE: Activating `flyspell-mode' or `flyspell-prog-mode' can really slow down editing.
    ;; ((prog-mode . flyspell-prog-mode)
    ;;  (text-mode . flyspell-mode))
    :init
    (setq ispell-program-name
          ;; Prefer aspell over hunspell since aspell is faster
          (if (executable-find "aspell") "aspell" "hunspell"))
    (cond ((equal ispell-program-name "hunspell")
           ;; Extra configuration for hunspell.
           (setq ispell-local-dictionary "en_US")
           (setq ispell-local-dictionary-alist
                 ;; Please note the list `("-d" "en_US")` contains ACTUAL
                 ;; parameters passed to hunspell You could use `("-d"
                 ;; "en_US,en_US-med")` to check with multiple dictionaries
                 '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
                    ("-d" "en_US") nil utf-8)))
           ;; New variable `ispell-hunspell-dictionary-alist' is defined in Emacs.
           ;; If it's nil, Emacs tries to automatically set up the dictionaries.
           (when (boundp 'ispell-hunspell-dictionary-alist)
             (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))
          ((equal ispell-program-name "aspell")
           ;; Extra configuration for aspell.
           (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
           ;; Handle camel-case words
           (cond ((string-match-p "--camel-case"
                                  (shell-command-to-string "aspell --help"))
                  (add-to-list 'ispell-extra-args "--camel-case" t))
                 (t
                  ;; Older versions of aspell used --run-together instead of
                  ;; --camel-case
                  (add-to-list 'ispell-extra-args "--run-together" t)
                  (add-to-list 'ispell-extra-args "--run-together-limit=16" t)))))
    :config
    (ispell-set-spellchecker-params))
#+end_src

* Plugins
** flycheck-cask
#+begin_src emacs-lisp
  (use-package flycheck-cask
    :after flycheck
    :hook
    (flycheck-mode . flycheck-cask-setup))
#+end_src

** flycheck-clojure
These Clojure linters depend on CIDER running in order to work, so you should
make sure to only activate them when the CIDER REPL starts.

#+begin_src emacs-lisp
  (use-package flycheck-clojure
    :after flycheck
    :hook
    (cider-mode . flycheck-clojure-setup))
#+end_src

** flycheck-clj-kondo
Integrates the =clj-kondo= Clojure linting tool with =flycheck=. =clj-kondo=
is pretty wonderful because it is a stand-alone binary, not depending on a
running REPL in order to function. That makes =clj-kondo= is a great
=flycheck= linter to use if you do not want to use CIDER.

#+begin_src emacs-lisp
  (use-package flycheck-clj-kondo
    :after flycheck
    :hook
    (clojure-mode . (lambda ()
                      (require 'flycheck-clj-kondo))))
#+end_src

** flycheck-color-mode-line
An Emacs minor-mode for Flycheck which colors the mode line according to the
Flycheck state of the current buffer.

#+begin_src emacs-lisp
  (use-package flycheck-color-mode-line
    ;; Only use this plugin if we have an appropriate mode line plugin.
    ;; `flycheck-color-modeline' works best with `doom-modeline' or `powerline'.
    :after (flycheck doom-modeline)
    :hook
    (flycheck-mode . flycheck-color-mode-line-mode))
#+end_src

** flycheck-credo
Flycheck checker for =credo=, a static code analyzer for Elixir.

#+begin_src emacs-lisp
  (use-package flycheck-credo
    :after flycheck
    :custom
    (flycheck-elixir-credo-strict t))
#+end_src

** flycheck-haskell
#+begin_src emacs-lisp
  (use-package flycheck-haskell
    :after flycheck
    :hook
    (haskell-mode . flycheck-haskell-setup))
#+end_src

** flycheck-inline
Show Flycheck errors inline at their reporting locations.  This is a simpler
alternative to =flycheck-pos-tip=. I've found that the tooltips used by
=flycheck-pos-tip= can be unreadably small. If you encounter that issue, use
this plugin instead of =flycheck-pos-tip=.

#+begin_src emacs-lisp
  (use-package flycheck-inline
    :after flycheck
    :demand t
    :hook
    (lsp-mode . (lambda ()
                  ;; Disable flycheck-inline when using lsp-mode.
                  ;; lsp-mode has a much nicer UI for diagnostics.
                  (flycheck-inline-mode -1)))
    :config
    (global-flycheck-inline-mode 1))
#+end_src

** flycheck-package
Check Emacs Lisp packages for common errors.

#+begin_src emacs-lisp
  (use-package flycheck-package
    :after flycheck
    :config
    (flycheck-package-setup))
#+end_src

** flycheck-pkg-config
Allows Flycheck to use =pkg-config= when determining C/C++ library headers.

#+begin_src emacs-lisp
  (use-package flycheck-pkg-config
    :after flycheck)
#+end_src

** flycheck-pos-tip
Shows the error at point in a =pos-tip= graphical popup.

#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    ;; The tooltips used by flycheck-pos-tip are way too small.
    :disabled
    :after flycheck
    :hook
    (flycheck-mode . (lambda ()
                       ;; Put errors in tooltips if we're not in lsp-mode, since
                       ;; lsp-mode does its own thing and doing so would cause
                       ;; duplication.
                       (if (not (bound-and-true-p lsp-mode))
                           (flycheck-pos-tip-mode 1)))))
#+end_src

** flycheck-relint
Checks regular expression syntax.

#+begin_src emacs-lisp
  (use-package flycheck-relint
    :after flycheck
    :config
    (flycheck-relint-setup))
#+end_src

** flycheck-rust
#+begin_src emacs-lisp
  (use-package flycheck-rust
    :after flycheck)
#+end_src

** flycheck-status-emoji
Replaces standard Flycheck indicators with expressive emojis.

#+begin_src emacs-lisp
  (use-package flycheck-status-emoji
    :after flycheck
    :hook
    (flycheck-mode . flycheck-status-emoji-mode))
#+end_src

** flyspell-correct
Correct misspelled words using your favorite completion interface.

#+begin_src emacs-lisp
  (use-package flyspell-correct
    :after flyspell
    :general
    (general-def flyspell-mode-map
      "C-." 'flyspell-correct-wrapper))
#+end_src
