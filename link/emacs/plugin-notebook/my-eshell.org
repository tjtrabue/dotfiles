#+TITLE: The eshell Configuration File
#+AUTHOR: Thomas Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020:5:25
#+STARTUP: fold

=eshell= is a fantastic UNIX shell built into Emacs. Whereas most such shells
are written in C and interpret a scripting language, such as Bash, =eshell= is
written entirely in Emacs Lisp, and therefore can also interpret a subset of the
Emacs Lisp language. It also integrates seamlessly with Emacs.  =eshell= takes a
lot of getting used to, but the reward is well worth the effort.  Most of the
functions within this file were taken directly or adapted from Howard Abrams'
eshell dotfiles.

* eshell
This is the configuration for =eshell= itself. We use =use-package= to specify
the configuration for =eshell= even though =eshell= is built-in to Emacs. This
serves to demonstrate that =use-package= is not a package manager itself, but is
rather a configuration manager macro that wraps around a package manager.

** Required modules
Import necessary external modules, most of which I wrote myself.

#+begin_src emacs-lisp
  ;; Includes functions for retrieving and dealing with the current color theme.
  (require 'my-colors)
#+end_src

** Functions
Function declarations used by, around, and within =eshell=.
*** Environment Variables
This is a hook function that sets important environment variables upon entering
=eshell-mode=.

#+begin_src emacs-lisp
  (defun set-eshell-env-vars ()
    "Set eshell environment variables.
    This function is called as part of the `shell-mode-hook'."
    ;; Needed to get eshell to render ANSI colors correctly.
    (setenv "TERM" "ansi"))
#+end_src

*** eshell Aliases
These are special alias definitions wrapped in a function call that will be
called as a hook upon entering =eshell-mode=.

#+begin_src emacs-lisp
  (defun set-eshell-aliases ()
    "Set aliases for use within eshell-mode.

    To define an alias, use the 'eshell/alias function like so:
      (eshell/alias \"alias_name\" \"actual_command $1\")

    Note the use of '$1' at the end of the actual_command string. This
    is necessary to pass along the argument of the alias to the command during
    evaluation.  You may also use other shell-style positional parameters, such
    as $2, $*, etc. in your definition."

    ;; Meta
    ;; Re-read the aliases file
    (eshell/alias "ra" "eshell-read-aliases-list")
    ;; Standard
    (eshell/alias "e" "find-file $1")
    (eshell/alias "ff" "find-file $1")
    (eshell/alias "emacs" "find-file $1")
    (eshell/alias "ee" "find-file-other-window $1")
    ;; Directory navigation
    (eshell/alias ".." "cd ..")
    (eshell/alias "..." "cd ../..")
    (eshell/alias "...." "cd ../../..")
    (eshell/alias "....." "cd ../../../..")
    (eshell/alias "......" "cd ../../../../..")
    ;; Git commands
                                          ; add
    (eshell/alias "ga" "git add $*")
    (eshell/alias "gaa" "git add -A")
    (eshell/alias "gch" "git checkout $*")
                                          ; checkout
    (eshell/alias "gchb" "git checkout -b $*")
                                          ; commit
    (eshell/alias "gcm" "git commit -m $*")
    (eshell/alias "gca" "git commit --amend")
    (eshell/alias "gcan" "git commit --amend --no-edit")
                                          ; diff
    (eshell/alias "gd" "magit-diff-unstaged")
    (eshell/alias "gds" "magit-diff-staged")
                                          ; push
    (eshell/alias "gpoh" "git push origin HEAD")
    ;; Directory manipulation
    (eshell/alias "d" "dired $1")
    ;; Directory listing
    ;; The 'ls' executable requires the Gnu version on the Mac
    (let ((ls (if (file-exists-p "/usr/local/bin/gls")
                  "/usr/local/bin/gls"
                ;; Otherwise just use standard elisp 'ls' version.
                "ls")))
      (eshell/alias "ll" (concat ls " -AlhoG $*"))
      (eshell/alias "l" "ll $*")
      (eshell/alias "la" "ll $*")))
#+end_src

*** Prompt Functions
A super special awesome eshell prompt that shows the current working directory,
Git repository information, as well as virtual environment info for both Ruby
and Python.

This prompt was adapted directly from [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][Howard Abrams]] eshell prompt, so a big
thank you is in order for Mr. Abrams for sharing his incredible Emacs
configuration!

*NOTE*: You will need =nerd-fonts= installed on your computer to see all the
cool icons.

***** Git segment
The following functions produce a Git segment for the prompt that displays in
terse form any changed files, added files, or untracked files if the user is
currently in a Git repository.

#+begin_src emacs-lisp
  (defun in-git-repo (curr-dir)
    "Returns t if CURR-DIR is part of a Git repository.
    Returns nil otherwise."
    (and (not (file-remote-p curr-dir))
         (eshell-search-path "git")
         (locate-dominating-file curr-dir ".git")))

  (defun my/prompt-git-segment (curr-dir)
    "Return current Git branch as string.
    Return empty string if CURR-DIR is not in a Git repo or if 'git' command not found."
    (interactive)
    (when (in-git-repo curr-dir)
      (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
             (git-repo (file-name-base (s-trim git-url)))
             (git-output (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))
             (git-branch (s-trim git-output))
             (git-icon  "\xe0a0")
             (git-icon2 (propertize "\xf020" 'face `(:family "octicons"))))
        (concat git-repo " " git-icon2 " " git-branch))))

  (defun git-symbol-number (curr-dir icon-hex-code shell-cmd-string)
    "Generic pattern for returning a symbol and a number corresponding to a
    number of files in a Git repository that are marked for one of many reasons,
    such as being changed, added to the index, untracked by Git, etc.

    ICON-HEX-CODE is a string like \"\x1111\" defining a Unicode character's
    hexadecimal value.

    SHELL-CMD-STRING is a shell command to run to return the number of files
    of interest."
    (when (in-git-repo curr-dir)
      (let* ((num-files (shell-command-to-string shell-cmd-string))
             ;; Important to trim shell output to remove trailing newlines!
             (num-files-trimmed (s-trim num-files)))
        (if (> (string-to-number num-files-trimmed) 0)
            (concat " " icon-hex-code " " num-files-trimmed)
          ""))))

  (defun git-num-commits (curr-dir &optional ahead)
    "Return the how far ahead or behind the current branch is from its remote
    tracking branch in terms of commits. CURR-DIR is the current directory.

    Return number of commits ahead of remote branch unless AHEAD is nil, in which
    case return the number of commits behind the remote branch."
    (interactive)
    (let* ((curr-branch (s-trim (shell-command-to-string
                                 "git rev-parse --abbrev-ref HEAD")))
           (remote-branch (s-trim (shell-command-to-string
                                   "git rev-parse --abbrev-ref --symbolic-full-name @{u}"))))
      ;; Assume 'ahead is true if its value was not provided
      (unless ahead
        (setq ahead t))
      (if ahead
          (git-symbol-number curr-dir "\xf55c"
                             (concat "git rev-list --count " remote-branch ".." curr-branch))
        (git-symbol-number curr-dir "\xf544"
                           (concat "git rev-list --count " curr-branch ".." remote-branch)))))

  (defun git-num-commits-ahead (curr-dir)
    "Return number of commits the current branch has that are not part of
    its remote counterpart."
    (interactive)
    (git-num-commits curr-dir t))

  (defun git-num-commits-behind (curr-dir)
    "Return number of commits present in the remote tracking branch for the
    current branch that are not present in the current branch. "
    (interactive)
    (git-num-commits curr-dir nil))

  (defun git-num-changed-files (curr-dir)
    "Return number of files changed in the current Git directory."
    (interactive)
    (git-symbol-number curr-dir "\xf6c1"
                       "git diff --name-only --format=oneline | cat | wc -l"))

  (defun git-num-added-files (curr-dir)
    "Return number of files added to the current Git index."
    (interactive)
    (git-symbol-number curr-dir "\xf067"
                       "git diff --cached --name-only --format=oneline | cat | wc -l"))

  (defun git-num-untracked-files (curr-dir)
    "Return number of files in the current Git repository untracked by Git."
    (interactive)
    (git-symbol-number curr-dir "\xf420"
                       "git -C \"$(git rev-parse --show-toplevel)\" ls-files --others --exclude-standard | wc -l"))

  (defun git-num-stashed-files (curr-dir)
    "Return number of files added to the current Git index."
    (interactive)
    (git-symbol-number curr-dir "\xf024" "git stash list | cat | wc -l"))

  (defun create-git-segment (curr-dir branch face-for-separator)
    "Put together all Git information into a cohesive, informative segment."
    (interactive)
    (let ((for-branch      `(:foreground ,(my-colors-get-color 'green) :weight bold))
          (for-delta       `(:foreground ,(my-colors-get-color 'yellow)))
          (for-added       `(:foreground ,(my-colors-get-color 'green)))
          (for-untracked   `(:foreground ,(my-colors-get-color 'red)))
          (for-stashed     `(:foreground ,(my-colors-get-color 'blue)))
          (for-ahead       `(:weight bold))
          (for-behind      `(:weight bold))
          (delta-files     (git-num-changed-files curr-dir))
          (added-files     (git-num-added-files curr-dir))
          (untracked-files (git-num-untracked-files curr-dir))
          (stashed-files   (git-num-stashed-files curr-dir))
          (commits-ahead   (git-num-commits-ahead curr-dir))
          (commits-behind  (git-num-commits-behind curr-dir)))
      ;; Change color of git prompt if index is dirty.
      (if (not (and (string= "" delta-files)
                    (string= "" added-files)
                    (string= "" untracked-files)))
          (setq for-branch `(:foreground ,(my-colors-get-color 'orange))))
      (concat (propertize " ── "    'face face-for-separator)
              (propertize branch   'face for-branch)
              (propertize delta-files 'face for-delta)
              (propertize added-files 'face for-added)
              (propertize untracked-files 'face for-untracked)
              (propertize stashed-files 'face for-stashed)
              (propertize commits-ahead 'face for-ahead)
              (propertize commits-behind 'face for-behind))))
#+end_src

***** File segment
This is the standard directory path segment of the prompt.

#+begin_src emacs-lisp
  (defun pwd-replace-home (curr-dir)
    "Replace home in CURR-DIR with tilde (~) character."
    (interactive)
    (let* ((home (expand-file-name (getenv "HOME")))
           (home-len (length home)))
      (if (and
           (>= (length curr-dir) home-len)
           (equal home (substring curr-dir 0 home-len)))
          (concat "~" (substring curr-dir home-len))
        curr-dir)))

  (defun pwd-shorten-dirs (curr-dir)
    "Shorten all directory names in CURR-DIR except the last two."
    (let ((p-lst (split-string curr-dir "/")))
      (if (> (length p-lst) 2)
          (concat
           (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                 (substring elm 0 1)))
                      (butlast p-lst 2)
                      "/")
           "/"
           (mapconcat (lambda (elm) elm)
                      (last p-lst 2)
                      "/"))
        curr-dir)))  ;; Otherwise, we just return the CURR-DIR

  (defun split-directory-prompt (directory)
    "Break up the directory into a 'parent' and a 'base'"
    (if (string-match-p ".*/.*" directory)
        (list (file-name-directory directory) (file-name-base directory))
      (list "" directory)))
#+end_src

***** Ruby virtual environment segment
Displays some information about Ruby virtual environments.

#+begin_src emacs-lisp
  (defun my/prompt-ruby-segment ()
    "Returns a string (may be empty) based on the current Ruby Virtual Environment."
    (let* ((executable "~/.rvm/bin/rvm-prompt")
           (command    (concat executable "v g")))
      (when (file-exists-p executable)
        (let* ((results (shell-command-to-string executable))
               (cleaned (string-trim results))
               (gem     (propertize "\xe92b" 'face `(:family "alltheicons"))))
          (when (and cleaned (not (equal cleaned "")))
            (s-replace "ruby-" gem cleaned))))))
#+end_src

***** Python virtual environment segment
Displays some information about Python virtual environments.

#+begin_src emacs-lisp
  (defun my/prompt-python-segment ()
    "Returns a string (may be empty) based on the current Python
    Virtual Environment. Assuming the M-x command: `pyenv-mode-set'
    has been called."
    (when (fboundp #'pyenv-mode-version)
      (let ((venv (pyenv-mode-version)))
        (when venv
          (concat
           (propertize "\xe928" 'face `(:family "alltheicons"))
           (pyenv-mode-version))))))
#+end_src

***** User segment

#+begin_src emacs-lisp
  (defun my/prompt-user-segment ()
    "Return the propertiezed user segment of the eshell prompt."
    (interactive)
    (let* ((username (getenv "USER"))
           (for-user (if (string= username "root")
                         `(:foreground ,(my-colors-get-color 'red) :weight bold)
                       `(:foreground ,(my-colors-get-color 'cyan) :weight bold)))
           (user (propertize username 'face for-user))
           (user-icon (propertize "\xf2be" 'face for-user)))
      (concat user-icon " " user)))
#+end_src

***** Directory segment

#+begin_src emacs-lisp
  (defun my/prompt-dir-segment (curr-dir)
    "Return the propertiezed directory segment of the eshell prompt."
    (interactive)
    (let* ((dark-env (eq 'dark (frame-parameter nil 'background-mode)))
           (for-parent  (if dark-env `(:foreground ,(my-colors-get-color 'yellow))
                          `(:foreground ,(my-colors-get-color 'blue))))
           (for-dir     (if dark-env `(:foreground ,(my-colors-get-color 'violet) :weight bold)
                          `(:foreground ,(my-colors-get-color 'orange) :weight bold)))
           (dir-icon (propertize "\xf413" 'face for-dir))
           (directory (split-directory-prompt
                       (pwd-shorten-dirs (pwd-replace-home curr-dir))))
           (parent (propertize (car directory) 'face for-parent))
           (name   (propertize (cadr directory) 'face for-dir)))
      (concat dir-icon " " parent name)))
#+end_src

***** Final prompt function
Here's where all the magic happens! This function puts everything together into
one super prompt.

#+begin_src emacs-lisp
  (defun eshell/eshell-local-prompt-function ()
    "A prompt for eshell that works locally (in that is assumes
  that it could run certain commands) in order to make a prettier,
  more-helpful local prompt."
    (interactive)
    (let* ((curr-dir (eshell/pwd))
           ;; Colors/faces
           (for-div    `(:weight bold))
           (for-ruby   `(:foreground ,(my-colors-get-color 'red)))
           (for-python `(:foreground ,(my-colors-get-color 'blue)))
           ;; Symbolic segment connectors
           (seg-begin (propertize "╭⟣─ " 'face for-div))
           (seg-continue (propertize " ── " 'face for-div))
           (user (my/prompt-user-segment))
           (dir (my/prompt-dir-segment curr-dir))
           (branch (my/prompt-git-segment curr-dir))

           (ruby   (when (not (file-remote-p curr-dir)) (my/prompt-ruby-segment)))
           (python (when (not (file-remote-p curr-dir)) (my/prompt-python-segment))))

      (concat seg-begin user seg-continue dir
              (when branch (create-git-segment curr-dir branch for-div))
              (when ruby
                (concat (seg-continue)
                        (propertize ruby   'face for-ruby)))
              (when python
                (concat (seg-continue)
                        (propertize python 'face for-python)))
              (propertize "\n"     'face for-div)
              (propertize "╰"      'face for-div)
              (propertize (if (= (user-uid) 0) " #" " $") 'face `(:weight ultra-bold))
              ;; (propertize " └→" 'face (if (= (user-uid) 0) `(:weight ultra-bold :foreground "red") `(:weight ultra-bold)))
              (propertize " "    'face `(:weight bold)))))
#+end_src

*** TRAMP Functions

#+begin_src emacs-lisp
  (defun eshell-there (host)
    "Creates an eshell session that uses Tramp to automatically connect to a
  remote system, HOST.  The hostname can be either the IP address, or FQDN, and
  can specify the user account, as in root@blah.com. HOST can also be a complete
  Tramp reference."
    (interactive "sHost: ")

    (let* ((default-directory
            (cond
             ((string-match-p "^/" host) host)

             ((string-match-p (ha/eshell-host-regexp 'full) host)
              (string-match (ha/eshell-host-regexp 'full) host) ;; Why!?
              (let* ((user1 (match-string 2 host))
                     (host1 (match-string 3 host))
                     (user2 (match-string 6 host))
                     (host2 (match-string 7 host)))
                (if host1
                    (ha/eshell-host->tramp user1 host1)
                  (ha/eshell-host->tramp user2 host2))))

             (t (format "/%s:" host)))))
      (eshell-here)))

  (defun ha/eshell-host-regexp (regexp)
    "Returns a particular regular expression based on symbol, REGEXP"
    (let* ((user-regexp      "\\(\\([[:alpha:].]+\\)@\\)?")
           (tramp-regexp     "\\b/ssh:[:graph:]+")
           (ip-char          "[[:digit:]]")
           (ip-plus-period   (concat ip-char "+" "\\."))
           (ip-regexp        (concat "\\(\\(" ip-plus-period "\\)\\{3\\}" ip-char "+\\)"))
           (host-char        "[[:alpha:][:digit:]-]")
           (host-plus-period (concat host-char "+" "\\."))
           (host-regexp      (concat "\\(\\(" host-plus-period "\\)+" host-char "+\\)"))
           (horrific-regexp  (concat "\\b"
                                     user-regexp ip-regexp
                                     "\\|"
                                     user-regexp host-regexp
                                     "\\b")))
      (cond
       ((eq regexp 'tramp) tramp-regexp)
       ((eq regexp 'host)  host-regexp)
       ((eq regexp 'full)  horrific-regexp))))

  (defun ha/eshell-scan-for-hostnames ()
    "Helper function to scan the current line for any hostnames, IP
  or Tramp references.  This returns a tuple of the username (if
  found) and the hostname.

  If a Tramp reference is found, the username part of the tuple
  will be `nil'."
    (save-excursion
      (goto-char (line-beginning-position))
      (if (search-forward-regexp (ha/eshell-host-regexp 'tramp) (line-end-position) t)
          (cons nil (buffer-substring-no-properties (match-beginning 0) (match-end 0)))

        ;; Returns the text associated with match expression, NUM or `nil' if no match was found.
        (cl-flet ((ha/eshell-get-expression (num) (if-let ((first (match-beginning num))
                                                           (end   (match-end num)))
                                                      (buffer-substring-no-properties first end))))

          (search-forward-regexp (ha/eshell-host-regexp 'full) (line-end-position))

          ;; Until this is completely robust, let's keep this debugging code here:
          ;; (message (mapconcat (lambda (tup) (if-let ((s (car tup))
          ;;                                       (e (cadr tup)))
          ;;                                  (buffer-substring-no-properties s e)
          ;;                                "null"))
          ;;             (-partition 2 (match-data t)) " -- "))

          (let ((user1 (ha/eshell-get-expression 2))
                (host1 (ha/eshell-get-expression 3))
                (user2 (ha/eshell-get-expression 6))
                (host2 (ha/eshell-get-expression 7)))
            (if host1
                (cons user1 host1)
              (cons user2 host2)))))))

  (defun ha/eshell-host->tramp (username hostname &optional prefer-root)
    "Returns a TRAMP reference based on a USERNAME and HOSTNAME
  that refers to any host or IP address."
    (cond ((string-match-p "^/" host)
           host)
          ((or (and prefer-root (not username)) (equal username "root"))
           (format "/ssh:%s|sudo:%s:" hostname hostname))
          ((or (null username) (equal username user-login-name))
           (format "/ssh:%s:" hostname))
          (t
           (format "/ssh:%s|sudo:%s|sudo@%s:%s:" hostname hostname username hostname))))

  (defun eshell-here-on-line (p)
    "Search the current line for an IP address or hostname, and call the `eshell-here' function.

  Call with PREFIX to connect with the `root' useraccount, via `sudo'."
    (interactive "p")
    (destructuring-bind (user host) (ha/eshell-scan-for-hostnames)
      (let ((default-directory (ha/eshell-host->tramp user host (> p 1))))
        (message "Connecting to: %s" default-directory)
        ;; With the `default-directory' set to a Tramp reference, rock on!
        (eshell-here))))

  (bind-key "M-s-1" #'eshell-here-on-line)
#+end_src

*** Other Functions
These interactive functions are meant to be called from outside of the =eshell=
environment.

#+begin_src emacs-lisp
  (defun eshell-cwd ()
    "Set the eshell directory to that of the current buffer.

  Usage: \\[eshell-cwd]."
    (interactive)
    (let (
          (path (file-name-directory (or  (buffer-file-name) default-directory))))

      (with-current-buffer "*eshell*"
        (cd path)
        (eshell-emit-prompt))))
#+end_src

*** Special =eshell= Functions
These are similar to Bash functions. They are meant to be called like a normal
executable from within the =eshell=.

#+begin_src emacs-lisp
  ;; Custom eshell functions
  ;; These can be called from within eshell by the name following the
  ;; 'eshell/' prefix.
  (defun eshell/clear ()
    "Clear the eshell buffer."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)))

  ;; Alias function for magit-status
  ;; This is not a regular alias because it kept changing the current directory.
  (defun eshell/gs (&rest args)
    (magit-status (pop args) nil)
    ;; The echo command suppresses output
    (eshell/echo))

  (defun eshell-below ()
    "Open new or existing eshell session in split window below current window.

  If you are currently in an eshell session then this function does nothing."
    (interactive)
    (let (;; Tell windmove to create a new window if it does not already exist.
          (windmove-create-window t)
          (eshell-win nil))

      (when (not (string= "*eshell*" (buffer-name)))
        (setq eshell-win (windmove-down))
        (select-window eshell-win)
        (eshell))))
#+end_src

** =use-package= specification
This is where we specify the =use-package= directive for =eshell=, which makes
use of all the functions we've written above.

#+begin_src emacs-lisp
  (use-package eshell
    :after evil-collection
    :hook
    (eshell-mode . (lambda ()
                     (set-eshell-env-vars)
                     (set-eshell-aliases)))
    :general
    (general-def eshell-proc-mode-map
      "M-j" 'eshell-next-matching-input-from-input
      "M-k" 'eshell-previous-matching-input-from-input)
    (general-def '(normal insert) eshell-mode-map
      ;; Use C-r in eshell mode to search back through history
      "C-r" 'helm-eshell-history)
    :custom
    ;; eshell-buffer-shorthand t ...  Can't see Bug 19391
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-error-if-no-glob t)
    (eshell-hist-ignoredups t)
    (eshell-save-history-on-exit t)
    (eshell-prefer-lisp-functions nil)
    (eshell-destroy-buffer-when-process-dies t)
    ;; Turn off default prompt, otherwise our custom one will not work.
    (eshell-highlight-prompt nil)
    ;; Set eshell variables
    ;; The main directory where Emacs will store eshell files
    ;; ~/.emacs.d/eshell
    (eshell-directory-name (expand-file-name "eshell" user-emacs-directory))
    ;; Plan9's smart config.
    (eshell-where-to-jump 'begin)
    (eshell-review-quick-commands nil)
    (eshell-smart-space-goes-to-end t)
    :init
    (setq-default eshell-prompt-function #'eshell/eshell-local-prompt-function)
    :custom
    ;; Load Plan9's smart display.
    (require 'em-smart))
#+end_src

* Plugins
Third-party plugins for =eshell= to enhance its power.

** virtualenvwrapper
Use Python virtualenvs in =eshell=.

#+begin_src emacs-lisp
  ;; Display python virtualenvs in eshell.
  (use-package virtualenvwrapper)
#+end_src

** eshell-prompt-extras
This package contains some fancier pre-built prompts for =eshell=. I do not use
it right now because I built my own prompt with a little (read: a lot) of help
from Howard Abrams' examples. I used this package before I felt adventurous
enough to mess around with the =eshell= prompt myself, and I do recommend it to
people who want to use =eshell= without being bothered by copious amounts of
customization.

#+begin_src emacs-lisp
  ;; Fancy prompt information for eshell mode
  ;; Not currently used due to custom prompt set in the :config section of
  ;; the eshell package.
  ;; (use-package eshell-prompt-extras
  ;;   :after (virtualenvwrapper)
  ;;   :config
  ;;   (with-eval-after-load "esh-opt"
  ;;     (require 'virtualenvwrapper)
  ;;     (venv-initialize-eshell)
  ;;     (autoload 'epe-theme-lambda "eshell-prompt-extras")
  ;;     (setq eshell-highlight-prompt nil
  ;;    eshell-prompt-function 'epe-theme-multiline-with-status)))
#+end_src

** esh-autosuggest
=esh-autosuggest= is a Fish-style autosuggest feature for =eshell=. This is one
of my must-have plugins for =eshell=, and I recommend it to everybody!

#+begin_src emacs-lisp
  (use-package esh-autosuggest
    :hook
    (eshell-mode . esh-autosuggest-mode))
#+end_src

** esh-up
Easily navigate up the current directory tree in =eshell= using aliased
commands. The way it works is like this:

#+begin_src shell :tangle no
  # current directory: /long/path/name/to/me
  up pa
  # new cwd: /long/path
#+end_src

#+begin_src emacs-lisp
  (use-package eshell-up
    :hook (eshell-mode . (lambda ()
                           ;; Set eshell-up aliases for eshell-mode.
                           (eshell/alias "up" "eshell-up $1")
                           (eshell/alias "pk" "eshell-up-peek $1"))))
#+end_src

** aweshell
Cool enhancements for eshell.

#+begin_src emacs-lisp
  (use-package aweshell
    :straight (aweshell :type git :host github :repo "manateelazycat/aweshell"))
#+end_src
