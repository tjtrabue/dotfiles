#+title:  Common Lisp Configuration/Plugins
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:26
#+STARTUP: fold

Contains configuration for the SLIME (Superior Lisp Interaction
Mode for Emacs) package used to integrate Emacs with Common Lisp.
SLIME essentially turns Emacs into a Common Lisp IDE.

Needed for performance:
#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding: t; -*-

#+end_src

* Functions
  #+begin_src emacs-lisp :tangle yes
    (eval-when-compile
      (defun my/get-inferior-lisp-program ()
        "Return a string representing the shell command used to launch SBCL."
        (let ((path-to-ros (executable-find "ros"))
              (path-to-sbcl (executable-find "sbcl")))
          (if path-to-ros
              (concat path-to-ros " run")
            (concat path-to-sbcl)))))
  #+end_src

* SLIME
  The Superior Lisp Interaction Mode for Emacs (SLIME) turns Emacs into a Common
  Lisp IDE.

  #+begin_src emacs-lisp :tangle yes
    (use-package slime
      :commands slime
      :hook
      ((lisp-mode . slime-mode)
       (inferior-lisp-mode . inferior-slime-mode))
      :custom
      ;; Tell SLIME the name of the Inferior Lisp program to run in lisp-mode.
      ;; In this case, we use the 'roswell' full-stack development tool to
      ;; install and run our Common Lisp implementations.
      (inferior-lisp-program (my/get-inferior-lisp-program))
      ;; Bring in almost every contributor package
      ;; (that's what slime-fancy does).
      (slime-contribs '(slime-fancy)))
  #+end_src

* SLY
  SLY is a fork of SLIME with some enhancements. Both SLIME and SLY are actively
  maintained, so which one you decide to use is a matter of preference.

  #+begin_src emacs-lisp :tangle yes
    (use-package sly
      ;; Using SLIME instead
      :disabled
      :hook
      ;; Remember, sly-mode is a minor mode that works alongside lisp-mode.
      ((lisp-mode . sly-mode))
      :custom
      (sly-complete-symbol-function 'sly-flex-completions))
  #+end_src
