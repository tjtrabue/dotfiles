#+TITLE:   Common Lisp Configuration/Plugins
#+AUTHOR:  Tom Trabue
#+EMAIL:   tom.trabue@gmail.com
#+DATE:    2020-05-26
#+STARTUP: fold

Emacs can become a full-fledged Common Lisp IDE with the right
configuration. This file contains all of the plugins and customization necessary
to make Emacs the greatest Common Lisp editor this side of the solar system!

The two main Common Lisp integration plugins are SLIME and SLY, which are
alternatives to one another, and are almost at feature parity. SLY is a fork of
SLIME, and has some advanced features that SLIME does not, but also has a slower
development and release cycle. Which package you decide to use is entirely up to
you.

If you are curious about the correct coding style for Common Lisp, you can find
the style guide [[https:lisp-lang.org/style-guide][here]].

* Basic Configuration
#+begin_src emacs-lisp
  ;; Read the user's SBCL config file as a Common Lisp file.
  (add-to-list 'auto-mode-alist '("\\.sbclrc\\'" . lisp-mode))

  (add-hook 'lisp-mode-hook
            (lambda ()
              (let ((max-columns 100))
                ;; The Common Lisp style guide recommends 100 columns max instead of
                ;; 80 due to Lisp having longer, more descriptive names.
                (setq-local fill-column max-columns
                            whitespace-line-column max-columns))))
#+end_src

* Functions
** General purpose Lisp functions
#+begin_src emacs-lisp
  (defun my/get-inferior-lisp-program ()
    "Return the shell command used to launch the `inferior-lisp-program'.
  This is command becomes the selected Common Lisp interpreter."
    (let ((path-to-ros (executable-find "ros"))
          (path-to-sbcl (executable-find "sbcl")))
      (cond (path-to-ros
             ;; Use Roswell CL manager if possible.
             (concat path-to-ros " run"))
            (t
             ;; Revert back to SBCL installation if nothing else available.
             path-to-sbcl))))
#+end_src

* SLY
SLY is a fork of SLIME with some enhancements. I recommend using SLY over SLIME
since SLY has fixed many long-standing bugs in SLIME's code.

Both SLIME and SLY are actively maintained, so which one you decide to use is a
matter of preference. However, SLY's development team is far more dedicated to
timely bug fixes and support tickets than SLIME's team. SLY is also much more
feature-rich than SLIME, and has an absolutely beautiful system architecture
that allows it to adapt gracefully to new environments.

The default key combination for =sly-prefix-map= is =C-c= by itself.

** Functions
*** sly-counsel integration functions
These functions were taken directly from [[https://mihaiolteanu.me/counsel-sly/][Mihai Olteanu's blog]].
Thank you so much for the your contributions, Mihai!

#+begin_src emacs-lisp
  ;; Define functionality for interacting with the sly repl using counsel
  (defun counsel-sly-mrepl-shortcut ()
    (interactive)
    (ivy-read
     "Action: "
     (mapcar #'car sly-mrepl-shortcut-alist)
     :action (lambda (string)
               (let ((command (and string
                                   (cdr (assoc string sly-mrepl-shortcut-alist)))))
                 (call-interactively command)))))

  (defun sly-read-package-name (prompt &optional initial-value allow-blank)
    (ivy-read
     "Package: "
     (sly-eval `(slynk:list-all-package-names t))
     :action #'identity))

  (defun counsel-sly-mrepl-history ()
    (interactive)
    (ivy-read
     "History: "
     (reverse (ring-elements comint-input-ring))
     :action (lambda (e)
               (insert e))))

  (defun eval-grab-output (string)
    (let ((res nil))
      (sly-eval-async `(slynk:eval-and-grab-output ,string)
        (lambda (result)
          (cl-destructuring-bind (output value) result
            (setf res (car (read-from-string value))))))
      (while (null res)
        (sleep-for 0.1))
      res))

  (defun counsel-sly-eval (string action)
    (let ((result (eval-grab-output string)))
      (ivy-read
       "Symbol: "
       result
       :action action)))

  (defun send-input (expr)
    (insert expr)
    (comint-send-input))

  (defun counsel-sly-package-internal-symbols ()
    (interactive)
    (counsel-sly-eval "(common-lisp-user::package-internal-symbols \*package\*)"
                      `(1 ("o" ,#'insert "insert")
                          ("f" ,(lambda (candidate)
                                  (send-input (format "(find-symbol \"%s\")" candidate)))
                           "find symbol")
                          )))
#+end_src


** =use-package= specification
#+begin_src emacs-lisp
  (use-package sly
    ;; Currently using SLIME.
    :disabled
    :after evil
    :mode
    ;; Make Slynk config file recognized as Common Lisp.
    ("\\.slynkrc\\'" . lisp-mode)
    :commands sly
    :hook
    ;; Remember, sly-mode is a minor mode that works alongside lisp-mode.
    ((lisp-mode . sly-mode)
     (sly-mode . (lambda ()
                   ;; Override evil's g-prefixed mappings with SLY bindings.
                   (general-def 'normal 'local
                     "gA" 'sly-apropos-all
                     "gB" 'sly-who-binds
                     "gC" 'sly-calls-who
                     "gH" 'sly-describe-symbol
                     "gS" 'sly-who-specializes
                     "ga" 'sly-apropos
                     "gb" 'sly-pop-find-definition-stack
                     "gc" 'sly-who-calls
                     "gd" 'sly-edit-definition
                     "ge" 'sly-edit-uses
                     "gh" 'sly-describe-function
                     "gr" 'sly-who-references
                     "gs" 'sly-who-sets))))
    :general
    (general-def sly-prefix-map
      ;; sly-prefix-map is bound to "C-c" in sly-mode by default.
      "C-n" 'sly
      "C-h" 'sly-documentation
      "C-q l" 'sly-quit-lisp
      "C-q s" 'sly-quit-sentinel
      "C-q c" 'sly-quit-connection-at-point)
    ;; SLY leader keybindings
    (my/evil-leader-def sly-mode-map
      ;; override standard `,ee' shortcut for evaluating s-exps
      "ee"  'sly-eval-last-expression
      "sT"  'sly-trace-dialog
      "sZ"  'sly-mrepl-sync
      "sd"  'sly-edit-definition
      "se"  'sly-edit-value
      "sf"  'sly-compile-defun
      "si"  'sly-stickers-dwim
      "sk"  'sly-compile-and-load-file
      "sp"  'sly-pprint-eval-last-expression
      "sr"  'sly-eval-region
      "ssF" 'sly-stickers-forget
      "ssd" 'sly-stickers-clear-defun-stickers
      "ssf" 'sly-stickers-fetch
      "ssk" 'sly-stickers-clear-buffer-stickers
      "ssp" 'sly-stepper
      "ssr" 'sly-stickers-replay
      "sss" 'sly-stickers-dwim
      "st"  'sly-trace-dialog-toggle-trace
      "su"  'sly-undefine-function
      "swb" 'sly-who-binds
      "swc" 'sly-who-calls
      "swr" 'sly-who-references
      "sws" 'sly-who-sets
      "sww" 'sly-calls-who
      "sz"  'sly-mrepl)
    (my/evil-leader-def sly-mrepl-mode-map
      "," 'sly-mrepl-shortcut
      "P" 'sly-mrepl-set-package
      "R" 'sly-restart-inferior-lisp
      "i" 'sly-package-internal-symbols)
    (general-unbind sly-mrepl-mode-map
      ;; Get rid of default `,' behavior since that conflicts with evil's leader
      ;; feature.
      ",")
    (general-def 'insert sly-mrepl-mode-map
      ;; Make sure we use basic SLY ENTER functionality instead of Lispy's.
      "RET"      'sly-mrepl-return
      "<return>" 'sly-mrepl-return
      ;; Make a newline in the REPL without evaluating the expression
      "C-RET"      'newline-and-indent
      "C-<return>" 'newline-and-indent
      ;; Indent, complete symbol, or expand arg list.
      "TAB"   'sly-mrepl-indent-and-complete-symbol
      "<tab>" 'sly-mrepl-indent-and-complete-symbol
      "C-l"   'sly-mrepl-indent-and-complete-symbol
      ;; Cycle through MREPL history.
      "C-j" 'comint-next-input
      "C-k" 'comint-previous-input)
    ;; Bindings for the Trace Dialog
    (general-def 'normal sly-trace-dialog-mode-map
      ;; Copy the trace under point to the MREPL
      "gC" 'sly-mrepl-copy-call-to-repl
      "gP" 'sly-mrepl-copy-part-to-repl)
    :custom
    ;; Set the program used to interact with Common Lisp.
    (inferior-lisp-program (my/get-inferior-lisp-program))
    ;; The default Common Lisp implementation for SLY to fall back on.
    (sly-default-lisp 'sbcl)
    ;; Select completion method. Can be one of:
    ;;   'sly-simple-completions (speculative completions)
    ;;   'sly-flex-completions   (exact completions)
    (sly-complete-symbol-function 'sly-flex-completions)
    ;; Extra SLY features to load. Check the `contrib/' subdirectory of the sly
    ;; repo for a complete list of features.
    (sly-contribs (delete-dups (append '(sly-autodoc
                                         sly-fancy
                                         sly-fancy-inspector
                                         sly-fancy-trace
                                         sly-fontifying-fu
                                         sly-indentation
                                         sly-mrepl
                                         sly-package-fu
                                         sly-profiler
                                         sly-retro
                                         sly-scratch
                                         sly-stickers
                                         sly-trace-dialog
                                         sly-tramp)
                                       sly-contribs)))
    ;; How to transmit Unicode characters between Emacs and the Lisp system.
    ;; You also need an appropriate font that supports Unicode symbols.
    (sly-net-coding-system 'utf-8-unix)
    ;; Path to the file containing the MREPL's history.
    (sly-mrepl-history-file-name (file-truename
                                  (concat user-emacs-directory
                                          "/.sly-mrepl-history")))
    ;; Move MREPL history duplicates to more recent slots.
    (sly-mrepl-prevent-duplicate-history 'move)
    :init
    ;; Add optional SLY features to Emacs' load-path.
    (add-to-list 'load-path (file-truename
                             (concat my/straight-repos-dir "/sly/contrib/")))
    :config
    (require 'sly-autoloads))
#+end_src

** Plugins
Enhancements for SLY. Much needed to provide powerful features that SLY lacks by
default, such as expanding macros and editing ASDF build files.

*** sly-asdf
Enables editing of ASDF systems from SLY. ASDF is the de-facto standard
build system for Common Lisp.

This plugin adds the =load-system= shortcut to the SLY REPL. When using this
shortcut, ASDF system compilation and load errors will be trapped and
recorded as with other sly compilation errors, as opposed to dumping into
the debugger like with calling =asdf:load-system= directly.

#+begin_src emacs-lisp
  (use-package sly-asdf
    :disabled
    :after sly
    :demand t)
#+end_src

*** sly-quicklisp
Allows you to download dependencies via Quicklisp from inside SLY.

#+begin_src emacs-lisp
  (use-package sly-quicklisp
    :disabled
    :after sly)
#+end_src

*** sly-macrostep
Expand macros right inside source files!

#+begin_src emacs-lisp
  (use-package sly-macrostep
    :disabled
    :after sly)
#+end_src

*** sly-stepper
Common Lisp Stepper interface for SLY.

*NOTE*: You may need to install =agnostic-lizard= with quicklisp before this
will work! Otherwise, loading this plugin will cause a fatal error in the SLY
MREPL. To install =agnostic-lizard=, simply run:

#+begin_src sh :tangle no
  # Start a REPL session.
  # If using a standard common lisp implementation:
  sbcl
  # OR, if using roswell to manage Common Lisp implementations:
  ros run
  # Either way, once you're in the Common Lisp REPL you will need to run:
  CL-USER> (ql:quickload "agnostic-lizard")
#+end_src

**** =use-package= specification
#+begin_src emacs-lisp
  (use-package sly-stepper
    :disabled
    :after sly
    :straight
    ;; This package is not yet available from MELPA.
    (sly-stepper :flavor melpa
                 :type git
                 :host github
                 :repo "joaotavora/sly-stepper"
                 :branch "master"
                 :files (:defaults "*.lisp" "*.asd"))
    :config
    (require 'sly-stepper-autoloads))
#+end_src

*** sly-named-readtables
Enables different =readtables= to be active in different parts of the same
file.

#+begin_src emacs-lisp
  (use-package sly-named-readtables
    :disabled
    :after sly)
#+end_src

*** sly-repl-ansi-color
Adds ANSI color support to the SLY REPL.

#+begin_src emacs-lisp
  (use-package sly-repl-ansi-color
    :disabled
    :after sly
    :demand t
    :config
    (add-to-list 'sly-contribs 'sly-repl-ansi-color))
#+end_src

*** sly-package-inferred
Replaces SLY's default completion with a function better suited to systems using
the package-inferred style.

#+begin_src emacs-lisp
  (use-package sly-package-inferred
    ;; 12/21/21
    ;; Needs a special fork of SLY in order to work.
    ;; I don't know if this plugin is even useful yet.
    :disabled
    :after sly
    :demand t
    :straight
    ;; This package is not yet available on MELPA.
    (sly-package-inferred :flavor melpa
                          :type git
                          :host github
                          :repo "40ants/sly-package-inferred"
                          :branch "master"
                          :files (:defaults "*.lisp" "*.asd"))
    :hook
    (sly-mode . (lambda ()
                  (require 'sly-package-inferred-autoloads))))
#+end_src

* SLIME
The Superior Lisp Interaction Mode for Emacs (SLIME) turns Emacs into a Common
Lisp IDE.

SLIME, although still powerful and semi-regularly updated, has conceded ground
in recent years to SLY, which is a fork of SLIME that has become the more modern
and feature-rich Common Lisp enhancement suite for Emacs (see my section on SLY
for more information and configuration). SLIME will most likely remain in use
for years to come, but in all likelihood SLY will overtake it as the more
relevant and useful plugin.

** Useful commands (many have a SLY equivalent)
These commands can supercharge your workflow! Many of them have a SLY
equivalent, so be sure to look for them using =C-h f=.

- =slime-who-*=
- =slime-eval-last-expression-in-repl= (=C-c C-j=)
- =slime-list-compiler-notes=
- =slime-export-symbol-at-point= (=C-c x=)
- =slime-export-class=, =slime-export-structure=
- =slime-trace-dialog-toggle-trace= (=C-c M-t=)
- =slime-inspect-definition=
- =slime-delete-system-fasls= (Useful when .fasls are out-of-sync)
- =slime-repl-clear-buffer= (=C-c M-o:= useful when =lispy= or =paredit= goes
  berserk)
- =slime-profile-package=, then run the desired functions, then
  =slime-profile-report=.
- =hyperspec-lookup-format= and =hyperspec-lookup-reader-macro=.

  In particular, note that =slime-who-specializes= lists the methods of a given
  class, which answers a common complaint coming from people used to languages
  from the Algol family: the ability to complete the methods of the foo class by
  typing =foo.<TAB>=.

** =use-package= specification
#+begin_src emacs-lisp
  (use-package slime
    :delight
    (slime-autodoc-mode nil slime-autodoc)
    :commands slime
    :hook
    ((lisp-mode . slime-mode)
     (inferior-lisp-mode . inferior-slime-mode))
    :general
    (my/evil-leader-def 'normal slime-repl-mode-map
      ;; Use ",," in normal mode in the SLIME REPL to launch the shortcut menu.
      ","  'slime-handle-repl-shortcut
      ;; Compile (if necessary) and load a lisp file.
      "sc" 'slime-repl-compile-and-load
      ;; Change the current directory
      "sd" 'slime-set-default-directory
      ;; Push a new directory onto the directory stack.
      "sU" 'slime-repl-push-directory
      ;; Pop the current directory.
      "sO" 'slime-repl-pop-directory
      ;; Use the configured browser to lookup the symbol at point in the online CL Hyperspec.
      "sH" 'slime-hyperspec-lookup
      ;; Display help
      "sh" 'slime-repl-shortcut-help
      ;; Define a new global, special variable.
      "sP" 'slime-repl-defparameter
      ;; Change the current package
      "sp" 'slime-repl-set-package
      ;; Push a new package onto the package stack.
      "su" 'slime-repl-push-package
      ;; Pop the top of the package stack.
      "so" 'slime-repl-pop-package
      ;; Quit the current lisp
      "sq" 'slime-repl-quit
      ;; Restart the *inferior-lisp* process and reconnect SLIME.
      "sr" 'slime-restart-inferior-lisp
      ;; Print the current directory.
      "sw" 'slime-pwd
      ;; Quit all Lisps and close all SLIME buffers.
      "sz" 'slime-repl-sayoonara)
    (general-def slime-repl-mode-map
      ;; Cycle SLIME REPL history.
      "C-j" 'slime-repl-next-input
      "C-k" 'slime-repl-previous-input)
    (general-def 'insert slime-repl-mode-map
      ;; Enter an indended newline in the REPL.
      ;; Useful when defining functions the REPL.
      "C-<return>" 'slime-repl-newline-and-indent
      ;; Close all open lists and evaluate the input string.
      "M-RET" 'slime-repl-closing-return)
    ;; The user may initiate these keybindings after pressing the SLIME prefix key, which is usually
    ;; "C-c".
    (general-def slime-prefix-map
      "C-q" 'slime-repl-sayoonara
      "M-j" 'slime)
    (general-def 'normal '(slime-mode-map slime-repl-mode-map)
      "K" 'slime-documentation)
    :init
    ;; Set the path to the selected Common Lisp implementation executable.
    ;; The user must set this variable before the package loads.
    (setq inferior-lisp-program (my/get-inferior-lisp-program))
    ;; Turn on company-mode for SLIME buffers and the SLIME REPL.
    (add-hook 'slime-repl-mode-hook (lambda ()
                                      (company-mode 1)
                                      ;; We don't want to see trailing whitespace in the REPL.
                                      (setq-local show-trailing-whitespace nil)
                                      (whitespace-mode -1)))
    :custom
    ;; Bring in almost every contributor package (that's what slime-fancy does).
    ;; `slime-company' is a separate MELPA package.
    (slime-contribs '(slime-fancy slime-company))
    ;; Transmit Unicode characters between Emacs and the Lisp system.  This is important if you use
    ;; SBCL.
    (slime-net-coding-system 'utf-8-unix))
#+end_src
