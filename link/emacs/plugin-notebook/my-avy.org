#+TITLE:    Avy: Quickly Jump Around Buffers
#+AUTHOR:   Tom Trabue
#+EMAIL:    tom.trabue@gmail.com
#+DATE:     2021-02-02
#+TAGS:
#+STARTUP: fold

=avy= is a jump-to-text plugin similar to =ace-jump-mode=, or =vim-easymotion=
for Vim/Neovim. It is newer and more feature-rich than =ace-jump-mode=, as well
as being actively maintained, making =avy= the better alternative.

#+begin_src emacs-lisp
  (use-package avy
    :after evil-collection
    :preface
    (require 'general)
    :general
    (general-def '(normal visual)
      ;; In Evil's normal state, remap standard f/F and t/F evil keybindings to
      ;; Avy motions.
      "f" 'evil-avy-goto-char
      "F" 'evil-avy-goto-word-1
      "t" 'evil-avy-goto-char-2
      "T" 'evil-avy-goto-word-0
      ;; Jump to line based on an abbreviation.
      "L" 'evil-avy-goto-line)
    (general-def 'operator
      ;; Avy keybindings are not good for creating keyboard macros, so in operator
      ;; state map we should not remap f/F or t/T to Avy. I have found that it is
      ;; fine to remap f/F and t/T in normal state, but Vim's standard definitions
      ;; for f/F and t/T are very useful when defining macros, and Avy motions are
      ;; non-deterministic, so they do not make for good macros.
      "C-'" 'evil-avy-goto-char
      "M-'" 'evil-avy-goto-word-1)
    :custom
    ;; How avy's overlay appears near matches.
    (avy-style 'at-full)
    ;; When non-nil, display line overlay next to the first non-whitespace
    ;; character.
    (avy-indent-line-overlay t))
#+end_src
