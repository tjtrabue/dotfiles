#+TITLE:   Company Completion Engine
#+AUTHOR:  Tom Trabue
#+EMAIL:   tom.trabue@gmail.com
#+DATE:    2020-05-25
#+TAGS:    company completion autocomplete lsp
#+STARTUP: fold

=company= is a fantastic alternative to =auto-complete= for as-you-type text
completion.

*NOTE REGARDING COMPANY-YASNIPPET:* there is a =company-yasnippet= backend for
company, BUT you should avoid it for the most part. If you add it as a backend
to company, then snippet completions will shadow any others, which is not what
you want. In order to use it properly, you should add it as an accompanying
backend to each other backend you desire to use. For example, if you want to use
the =company-elisp= backend and =company-yasnippet=, you would add the following
to =company-backends=: ='(company-elisp :with company-yasnippet)=.

* Variables
#+begin_src emacs-lisp
  (defvar my/company-enable-yas t
    "Whether to enable yasnippet for all backends.")
#+end_src

* Functions
#+begin_src emacs-lisp
  (defun my/company-backend-with-yas (backend)
    "Add yasnippet support for company BACKEND if `my/company-enable-yas' is non-nil."
    (if (or (not my/company-enable-yas)
            (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (defun my/set-company-backends-yasnippet ()
    "Set `company-backends' safely for `yasnippet' support."
    (setq company-backends
          (mapcar #'my/company-backend-with-yas company-backends)))

  (defun my/company-complete-selection--advice-around (fn)
    "Advice execute around `company-complete-selection' command."
    (let ((company-dabbrev-downcase t))
      (call-interactively fn)))

  (defun my/make-company-backends-hook (backends)
    "Return a lambda form that will add BACKENDS to `company-backends'.
  If `my-company-enable-yas' is non-nil, also handle integrating
  `company-yasnippet' into each backend in BACKENDS."
    ;; For each backend in backends, convert 'backend' into
    ;; '(backend :with company-yasnippet)'
    (let ((backends-with-yas (mapcar #'my/company-backend-with-yas backends)))
      `(lambda ()
         (setq-local company-backends (append (quote ,backends-with-yas)
                                              company-backends))
         ;; Because we're not using `add-to-list', we need to manually remove
         ;; duplicates from the resulting `company-backends' list.
         (delete-dups company-backends))))

  (defun my/add-company-backends-for-mode (mode backends)
    "Add list of BACKENDS to`company-backends' for major mode MODE.

  BACKENDS can be either a single major or minor mode symbol, or a list of
  major and/or minor mode symbols."
    (let ((hook-name (concat (symbol-name mode)))
          (backends (if (listp backends) backends (list backends))))
      (add-hook (intern hook-name) (my/make-company-backends-hook backends))))
#+end_src

* =use-package= specification
#+begin_src emacs-lisp
  (use-package company
    ;; Must load company after Yasnippet and HippieExpand because we want TAB to
    ;; cycle company completions. If company loads before Hippie and Yasnippet the
    ;; TAB keybinding will not work correctly.
    :after (evil-collection hippie-exp yasnippet)
    :delight
    :hook
    ;; Currently only enabling `company-mode' in select major modes in favor of
    ;; using `lsp-bridge''s autocompletion by default.
    (lisp-mode . company-mode)
    :general
    (general-unbind (company-active-map company-search-map)
      ;; We want to use TAB for hippie-expand, not cycling company.
      "TAB"
      "<tab>"
      "<backtab>")
    (general-def (company-active-map company-search-map)
      "RET" 'company-complete-selection
      "<return>" 'company-complete-selection
      "C-l" 'company-complete-selection)
    (general-def 'insert (company-active-map company-search-map)
      ;; Use RET and TAB to complete company completions
      "RET" 'company-complete-selection
      "<return>" 'company-complete-selection
      ;; Tab cycles completion candidates, shift-tab cycles backwards.
      "TAB" 'company-complete-common-or-cycle
      "<tab>" 'company-complete-common-or-cycle
      "<backtab>" (lambda ()
                    (interactive)
                    (company-complete-common-or-cycle -1))
      "C-l" 'company-complete-selection
      ;; Vim-style keybindings for cycling through matches
      "C-j" 'company-complete-common-or-cycle
      "C-k" (lambda ()
              (interactive)
              (company-complete-common-or-cycle -1)))
    :custom
    ;; Align annotation to the right side.
    (company-tooltip-align-annotations t)
    ;; Never require a match; continue to use cursor as normal
    (company-require-match nil)
    ;; Don't make plain text completions lowercase.
    (company-dabbrev-downcase nil)
    ;; How long company waits before suggesting completions. Settings this value
    ;; to too small a value can reduce performance.
    (company-idle-delay 0)
    ;; Start suggesting completions after this many characters typed.
    (company-minimum-prefix-length 1)
    ;; Change UI appearance of company
    (company-frontends
     '(company-pseudo-tooltip-unless-just-one-frontend
       company-preview-frontend
       company-echo-metadata-frontend))
    :config
    ;; Enable company-mode in every buffer.
    ;; NOTE: Currently only enabling `company-mode' in select major modes in favor
    ;;       of using `lsp-bridge''s autocompletion by default.
    ;; (global-company-mode 1)
    ;; Tweak company backends.
    ;; Trust me, you want NOTHING to do with Semantic!!! It is far too
    ;; slow to be anything other than harmful, especially for emacs-lisp-mode.
    (delete 'company-semantic company-backends)
    ;; Enable downcase only when completing the completion.
    (advice-add 'company-complete-selection :around
                #'my/company-complete-selection--advice-around)
    ;; Adjust each default backend to also use `company-yasnippet'.
    (my/set-company-backends-yasnippet)
    ;; Add different backends to company-backends for various major modes.
    (my/add-company-backends-for-mode 'emacs-lisp-mode 'company-elisp)
    (my/add-company-backends-for-mode 'makefile-mode '(company-capf
                                                       company-dabbrev))
    (my/add-company-backends-for-mode 'lisp-interaction-mode 'company-elisp))
#+end_src

* Plugins
** company-c-headers
=company= completion for C and C++ header files when typing =#include=
statements.

#+begin_src emacs-lisp
  (use-package company-c-headers
    :disabled
    ;; We need s.el for trimming strings.
    :after (company s cedet)
    ;; :init
    ;; Eventually we will want to set this variable to integrate this package
    ;; CEDET.
    ;; (setq company-c-headers-path-system 'ede-object-system-include-path)
    :config
    ;; Currently unused in favor of company-lsp.
    ;; (add-to-list 'company-backends 'company-c-headers)
    (let* ((c++-version (s-trim (shell-command-to-string
                                 "gcc -v 2>&1 | tail -n 1 | grep -Eo '[0-9]+(\.[0-9]+)*'")))
           (c++-include-path (concat "/usr/include/c++/" c++-version "/")))
      (add-to-list 'company-c-headers-path-system c++-include-path)))
#+end_src

** company-dict
This simple company backend emulates =ac-source-dictionary= and Vim's
dictionary omnicompletion (=C-x C-k=). It's much like =company-keywords=, but
with lazy-loaded dictionary files, and support for annotations and
documentation.

#+begin_src emacs-lisp
  (use-package company-dict
    ;; Not terribly useful; if we do want to use it, we'll need to come up with a
    ;; more sophisticated way of activating it only for appropriate major modes.
    :disabled
    :after company
    :hook
    (company-mode . (lambda ()
                      (add-to-list 'company-backends
                                   (my/company-backend-with-yas 'company-dict))))
    :custom
    ;; Where user's custom dictionary files are kept.
    (company-dict-dir (file-truename (concat user-emacs-directory "/dict/"))))
#+end_src

** company-quickhelp
Show quick documentation for company completions in a separate popup.

#+begin_src emacs-lisp
  (use-package company-quickhelp
    :after company
    :hook
    (company-mode . company-quickhelp-mode)
    :custom
    (company-quickhelp-delay 0.2))
#+end_src

** company-statistics
#+begin_src emacs-lisp
  (use-package company-statistics
    ;; I think prescient-mode is a better alternative to this plugin.
    :disabled
    :after company
    :hook
    (company-mode . company-statistics-mode))
#+end_src

** company-web
#+begin_src emacs-lisp
  (use-package company-web
    :after (company web-mode)
    :init
    (my/add-company-backends-for-mode 'web-mode '(company-web-html)))
#+end_src

** company-try-hard
#+begin_src emacs-lisp
  (use-package company-try-hard
    :after company
    :general
    (general-def 'insert company-mode-map
      "C-<tab>" 'company-try-hard)
    (general-def 'insert company-active-map
      "C-<tab>" 'company-try-hard))
#+end_src

** company-ghc
#+begin_src emacs-lisp
  (use-package company-ghc
    :disabled)
#+end_src

** company-cabal
#+begin_src emacs-lisp
  (use-package company-cabal
    :after company)
#+end_src

** company-plsense
This is a company backend for the =plsense= intellisense engine for Perl.  It
is a good alternative to LSP mode for Perl, since the Perl LanguageServer
currently does not seem to provide any useful features.

Make sure you've already installed =plsense= and run =plsense config= on the
command line before trying to use this plugin, since this plugin depends on
the =~/.plsense= configuration file containing the proper settings.

#+begin_src emacs-lisp
  (use-package company-plsense
    :disabled
    :hook
    ((cperl-mode perl-mode) . (lambda ()
                                ;; Turn on company-plsense for perl and cperl mode.
                                (make-local-variable 'company-backends)
                                (add-to-list 'company-backends 'company-plsense)
                                (when (not company-plsense--server-started-p)
                                  (company-plsense-start-server))
                                (company-plsense-init)))
    :init
    (setq company-plsense-ignore-compile-errors t))
#+end_src

** company-auctex
#+begin_src emacs-lisp
  (use-package company-auctex
    :hook
    ((latex-mode tex-mode) . company-auctex-init))
#+end_src

** company-lsp
=company-lsp= is a company backend supporting =lsp-mode=.

*NOTE*: You should never have to use =company-lsp=! It is a deprecated
package that is only useful in particular circumstances. The only supported
company backend for =lsp-mode= is =company-capf=, so try using that one
first.

#+begin_src emacs-lisp
  (use-package company-lsp
    :disabled
    :after (company lsp-mode)
    ;; Only activate company-lsp for specific modes
    :hook
    ((sh-mode c-mode-common) . (lambda ()
                                 (make-local-variable 'company-backends)
                                 (add-to-list 'company-backends 'company-lsp)))
    :custom
    (company-lsp-cache-candidates nil)
    (company-lsp-async t)
    (company-lsp-enable-snippet t)
    (company-lsp-enable-recompletion t))
#+end_src

** company-box
=company-box= is a company front-end with icons! It provides a great, modern
looking UI for company completions similar to something like Visual Studio Code,
and allows users to customize the icons it displays alongside completion
candidates. It also integrates with =company-quickhelp= for bringing up
completion item documentation.

I have noticed that =company-box= actually improves my experience with Company
while coding with a language server that supports references, such as
=clojure-lsp=. The child frames that =company-box= uses keep the completion
window from jumping around when references are re-calculated.

*COMPATIBILITY:* =company-box= requires Emacs 26 or newer, and only works in GUI
Emacs.

*IMPORTANT PERFORMANCE NOTE:* I have noticed that enabling =company-box=
/greatly/ increases input lag when using =company= completion, sometimes causing
Emacs to freeze completely (this sometimes happens in =emacs-lisp-mode=). The
input lag can drag your editing speed to a halt. =company-box= certainly is
cool, and looks beautiful, but you should use it at your own risk.

#+begin_src emacs-lisp
  (use-package company-box
    :after company
    :if (display-graphic-p)
    :delight
    :custom
    ;; Max number of candidates to show in tooltip.
    ;; A large number can slow down rendering.
    (company-box-max-candidates 10)
    ;; Min/max dimensions for the completion tooltip window.
    (company-box-tooltip-minimum-width 260)
    (company-box-tooltip-maximum-width 260))
#+end_src

** company-prescient
=prescient= intelligent completion support for =company-mode=.

#+begin_src emacs-lisp
  (use-package company-prescient
    :after (company prescient)
    :hook
    (company-mode . company-prescient-mode))
#+end_src

** company-elixir
Company completion backend for Elixir. This is an old, unmaintained plugin that
uses an external IEx process to generate completion candidates. It's not
terribly useful anymore, since anyone writing Elixir code from within Emacs
should be using =lsp-mode= which has a much better completion backend using
=elixir-ls=. However, it can be useful for generating completions for other
Elixir-related major modes that are not covered by =lsp-mode=, such as
=inf-elixir-mode=.

#+begin_src emacs-lisp
  (use-package company-elixir
    ;; Not that useful. Completions only work if you have a valid,
    ;; working Elixir project.
    :disabled
    ;; This package is not in ELPA or MELPA
    :straight
    (company-elixir :flavor melpa :type git :host github
                    :repo "ayrat555/company-elixir"
                    :files (:defaults "company_elixir_script.exs"))
    :hook
    (inf-elixir-mode . company-elixir-hook)
    :custom
    ;; The command used to start IEx.
    ;; Defaults to "iex -S mix".
    (company-elixir-iex-command "iex -S mix")
    ;; The major mode used to kick off company-elixir
    (company-elixir-major-mode #'inf-elixir-mode))
#+end_src

** company-restclient
Company completion backend for =restclient-mode= using the =know-your-http-well=
Emacs Lisp library.

#+begin_src emacs-lisp
  (use-package company-restclient
    :init
    (my/add-company-backends-for-mode 'restclient-mode '(company-restclient)))
#+end_src

** slime-company
SLIME completions for =company-mode=. SLIME is the premier Common Lisp
development environment for Emacs, and this package integrates SLIME's
autocompletion features into Company.

#+begin_src emacs-lisp
  (use-package slime-company
    :after (slime company)
    :hook
    (slime-mode . (lambda ()
                    ;; Add '(company-slime :with company-yasnippet) to the list of
                    ;; Company backends without duplicating the entry.
                    (let* ((backend 'company-slime)
                           (backend-with-yas `(,backend :with company-yasnippet))
                           (backends (seq-remove (lambda (e)
                                                   (member e `(,backend ,backend-with-yas)))
                                                 company-backends)))
                      (setq-local company-backends
                                  (append (list backend-with-yas)
                                          backends)))))
    :custom
    (slime-company-completion 'fuzzy)
    (slime-company-after-completion 'slime-company-just-one-space))
#+end_src
