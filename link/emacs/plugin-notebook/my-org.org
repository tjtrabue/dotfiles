#+TITLE:   Org Mode Configuration (meta!)
#+AUTHOR:  Tom Trabue
#+EMAIL:   tom.trabue@gmail.com
#+DATE:    2020-05-26
#+TAGS:    org mode markup literate programming
#+STARTUP: fold

Org is one of Emacs' killer apps: a powerful ORGanizer and much more, Org
enables Emacs users to engage in /literate programming/, a method of software
development where engineers embed source code into explanatory, notebook-like
textual documents to be evaluated as needed or all at once.

* org-bullets
Use fancy bullets in =org-mode=.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook
    (org-mode . org-bullets-mode))
#+end_src

* org-beautify-theme
Remove colors from headings, and instead differentiate them by changing their
font size.

While very pretty, this theme can greatly slow down Emacs when editing an Org
buffer, so use with caution.

*IMPORTANT:* This theme *MUST* be loaded *AFTER* your primary Emacs theme!
Otherwise all of your =.org= files will look awful, with each heading surrounded
by big ugly boxes. See file =my-theme.org= for this theme's activation.

#+begin_src emacs-lisp
  (use-package org-beautify-theme
    ;; 11/20/2023: This package appears broken in modern Org mode.
    :disabled
    ;; Only use org-beautify-theme in GUI Emacs.
    :if (display-graphic-p)
    :after org
    :demand t)
#+end_src

* org-cliplink
=org-cliplink= is a simple function that takes a URL from the clipboard and
inserts an org-mode link into the current buffer, the title of which comes from
the page title found from the URL. It's a little limited, but it's handy for
getting URLs into an Org document, which you can edit later.

#+begin_src emacs-lisp
  (use-package org-cliplink
    :after org
    :general
    (my/user-leader-def org-mode-map
      "L" 'org-cliplink))
#+end_src

* org-fragtog
=org-fragtog-mode= is a minor mode that automatically toggles Org mode LaTeX
previews as the cursor enters and exits LaTeX fragments. When the cursor is
inside of a fragment, the preview turns off. When the cursor leaves the
fragment, the preview toggles back on.

A LaTeX fragment is any LaTeX environment embedded within an Org document
surrounded by blank lines before and after. For instance:

\begin{equation}
x=\sqrt{b}
\end{equation}

** Deprecation warning
Based on what I have seen, starting with the official release of Org version
9.7, =org-fragtog= should no longer be necessary. Org mode will include a
built-in auto mode that provides the same feature as =org-fragtog= only much,
much faster. We should switch to that feature as soon as possible. [[https://orgmode.org/Changes.html][Be on the
lookout as Org updates]] to see if that new feature arrives.

** =use-package= specification
#+begin_src emacs-lisp
  (use-package org-fragtog
    ;; I prefer to enable fragtog mode manually.  It's not terribly CPU-intensive, but little things
    ;; do add up.
    ;; :hook
    ;; (org-mode . org-fragtog-mode)
    )
#+end_src

* org-roam
=org-roam= is an amazing plugin that integrates some of Roam's advanced note
taking features into =org-mode=. =org-roam= depends on a custom SQLite
database running behind the scenes to support its intelligent,
non-hierarchical note system. However, if you have a standard C compiler
installed, such as =gcc= or =clang=, =org-roam= will compile the database
automatically.

You will need to install the =graphviz= suite of tools in order to use
=org-roam='s graph functionality.

Because =org-roam='s nodes are just Org files, you can check your =org-roam=
database into your favorite version control system. Once pulled down,
=org-roam= will completely recreate your database from the metadata in your
repository. [[https://github.com/tjtrabue/roam-notes][I keep my org-roam database on GitHub]].

** Variables
#+begin_src emacs-lisp
  (defvar my/org-roam-dir (file-truename (concat user-emacs-directory "roam-notes"))
    "The directory acting as my `org-roam' database.")
#+end_src

** =use-package= specification
#+begin_src emacs-lisp
  (use-package org-roam
    :after (emacsql org)
    :demand t
    :general
    (my/user-leader-def
      "n c" 'org-roam-capture
      "n f" 'org-roam-node-find
      "n g" 'org-roam-graph   ; Need graphviz tools to generate/view graph.
      "n i" 'org-roam-node-insert
      "n l" 'org-roam-buffer-toggle
      ;; Dailies
      "n j" 'org-roam-dailies-capture-today)
    :custom
    ;; Set the path to the org-roam directory.
    (org-roam-directory my/org-roam-dir)
    ;; Automatically treat completion-at-point candidates as possible org-roam
    ;; node names.
    (org-roam-completion-everywhere t)
    :init
    ;; Acknowledge that we've upgraded from v1 to v2.
    (setq org-roam-v2-ack t)
    ;; I have my roam-notes directory checked in as a git repository on GitHub.
    ;; (make-directory org-roam-directory t)
    :config
    ;; Automatically keep org roam session synchronized.
    (org-roam-db-autosync-enable))
#+end_src

* org-super-agenda
Improved Org agenda that allows you to break your agenda items up into
sections.

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org)
#+end_src

* org-download
Utility for moving downloaded images into Org buffers.

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :hook
    ;; Enable org-download in dired-mode.
    (dired-mode . org-download-enable)
    :init
    (setq-default org-download-image-dir
                  (file-truename (concat (getenv "HOME") "/images/org")))
    :config
    (make-directory org-download-image-dir t))
#+end_src

* org-modern
=org-modern-mode= utilizes a modern style for your Org buffers using font
locking and text properties. This package styles headlines, keywords, tables,
and source blocks. The styling is configurable: you can enable, disable, or
modify the style of each syntax element individually via the =org-modern=
customization group.

#+begin_src emacs-lisp
  (use-package org-modern
    :hook
    ((org-mode            . org-modern-mode)
     (org-agenda-finalize . org-modern-agenda)))
#+end_src

* org-preview-html
Preview org files in Emacs rendered as HTML.

#+begin_src emacs-lisp
  (use-package org-preview-html
    :after org
    :custom
    ;; May be either:
    ;;   'eww (default): Use EWW to preview Org documents.
    ;;   'xwidget: Use configured X widget browser to preview Org documents.
    (org-preview-html-viewer (if (string-match-p "\sXWIDGETS\s" system-configuration-features)
                                 ;; Use the X widget browser if available.
                                 'xwidget
                               ;; Otherwise, fall back on EWW.
                               'eww))
    ;; Can be one of:
    ;;   'manual
    ;;   'save (default)
    ;;   'timer
    ;;   'export
    ;;   'instant
    (org-preview-html-refresh-configuration 'save)
    ;; The number of seconds between preview updates if `org-preview-html-refresh-configuration' is
    ;; set to `timer'.
    (org-preview-html-timer-interval 2))
#+end_src

* org-tree-slide
Give beautiful presentations from regular Org mode buffers! This is a
must-have plugin for the Org enthusiast.

To get started, =M-x org-tree-slide-mode=, and then use =C->= and =C-<= to
navigate slides.

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :general
    (general-def org-tree-slide-mode-map
      "C->" 'org-tree-slide-move-next-tree
      "C-<" 'org-tree-slide-move-previous-tree)
    :init
    (add-hook 'org-tree-slide-mode-hook (lambda ()
                                          ;; Set the default profile for org-tree-slide-mode
                                          ;; Pre-defined profiles are simple, presentation, and TODO
                                          ;; pursuit with narrowing.
                                          (org-tree-slide-presentation-profile))))
#+end_src

* ob-mermaid
Generate mermaid diagrams from =org-babel= source blocks. Adding a source
block is easy. Simple guard your mermaid code with a code block similar to
this: =#+begin_src mermaid :file output_file.png=

Supports the following properties:

- =file= - Output file. It should be either *svg*, *png* or *pdf*.
- =width= - Width of the page (Optional).
- =height= - Height of the page (Optional).
- =theme= - Theme of the chart, could be default, forest, dark or
  neutral (Optional).
- =background-color= - Background color. Example: transparent, red,
  ‘#F0F0F0’ (Optional).
- =mermaid-config-file= - JSON configuration file for mermaid (Optional).
- =css-file= - CSS file for the page (Optional).
- =pupeteer-config-file= - JSON configuration file for puppeteer (Optional).

#+begin_src emacs-lisp
  (use-package ob-mermaid
    :after (htmlize org)
    :custom
    (ob-mermaid-cli-path (executable-find "mmdc")))
#+end_src

* ob-sagemath
=ob-sagemath= provides an org-babel integration with SageMath by
=sage-shell-mode=. This package takes inspiration from =ob-ipython=, though its
implementation is entirely different.

#+begin_src emacs-lisp
  (use-package ob-sagemath
    :after sage-shell-mode
    ;; This package requires a SageMath installation on the system.
    :if (executable-find "sage")
    :init
    ;; Ob-sagemath supports only evaluating with a session, meaning each Org babel block for sagemath
    ;; requires a `:session foo' tag.
    (setq org-babel-default-header-args:sage '((:session . t)
                                               (:results . "output"))))
#+end_src

* ox-gfm
This is a small exporter based on the Markdown exporter already existing in
Org mode.

#+begin_src emacs-lisp
  (use-package ox-gfm
    :after org
    :demand t
    :config
    (require 'ox-gfm nil t))
#+end_src

* org-ql
This package provides a query language for Org files. It offers two syntax
styles: Lisp-like sexps and search engine-like keywords.

It includes three libraries: The =org-ql= library is flexible and may be used as
a backend for other tools. The libraries =org-ql-search= and =helm-org-ql= (a
separate package) provide interactive search commands and saved views.

=org-ql= is a /very/ feature-rich package, and quite complex. It takes some time
to learn, but if you make prolific use of Org mode, =org-ql= can be a
game-changer.

#+begin_src emacs-lisp
  (use-package org-ql
    :after org)
#+end_src

* org-sticky-header
Keep the =org-mode= header for the current section at the top of the buffer.

#+begin_src emacs-lisp
  (use-package org-sticky-header
    :hook
    (org-mode . org-sticky-header-mode)
    :custom
    ;; How to display the sticky header. Can be one of:
    ;;   nil
    ;;   'full (show full path to the current heading)
    ;;   'reversed (show full path to current heading but in reverse order)
    (org-sticky-header-full-path 'full)
    ;; The prefix string for the sticky header-line.
    (org-sticky-header-heading-star "◉"))
#+end_src

* org-trello
=org-trello= is a minor mode that synchronizes org-mode buffers and a Trello
board. It has [[https://org-trello.github.io/][copious documentation online at its website]], so please check it
out for more details.

#+begin_src emacs-lisp
  (use-package org-trello
    ;; Not currently using Trello professionally.
    :disabled
    :after org)
#+end_src

* org-web-tools
A library of Org mode functions for inserting copied URLs into Org buffers,
processing HTML into Org syntax, and much more. A very powerful package!

*NOTE:* This package depends on the Pandoc executable for many of its features.

#+begin_src emacs-lisp
  (use-package org-web-tools)
#+end_src
