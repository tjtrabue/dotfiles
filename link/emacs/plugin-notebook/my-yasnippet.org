#+title:  Yasnippet Snippet System
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:26
#+STARTUP: fold

=yasnippet= is the snippet engine for Emacs. It behaves in a similar fashion to
UltiSnips for Vim, or TextMate's snippet system. You use =yasnippet= by typing a
snippet's /key/, which is a word used as an abbreviation for expanding the
snippet, followed by a /trigger/ for the snippet, which is a key or key chord
that expands the snippet based on the abbreviation before point.

* yasnippet
  =yasnippet= itself.

  #+begin_src emacs-lisp
    (use-package yasnippet
      :commands yas-minor-mode
      :hook
      (after-init . yas-global-mode)
      :bind
      (:map yas-minor-mode-map
            ("<tab>" . nil)
            ("TAB" . nil)
            ("C-c y e" . yas-expand)
            ("C-c y i" . yas-insert-snippet)
            ("C-c y n" . yas-new-snippet))
      :custom
      ;; Condition evaluated whenever YAS tries to expand a key.
      (yas-buffer-local-condition yas-not-string-or-comment-condition)
      ;; How Yasnippet prompts the user for a snippet
      (yas-prompt-functions '(yas-completing-prompt))
      :init
      ;; Integrate yasnippet with hippie-expand
      (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
      :config
      (yas-reload-all))
  #+end_src

* yasnippet-snippets
  A big collection of pre-written snippets for =yasnippet=.

  #+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :after yasnippet
      :demand t)
  #+end_src

* common-lisp-snippets
  Yasnippet snippets for Common Lisp.

  #+begin_src emacs-lisp
    (use-package common-lisp-snippets
      :after yasnippet
      :demand t)
  #+end_src

* clojure-snippets
  Yasnippet snippets for Clojure.

  #+begin_src emacs-lisp
    (use-package clojure-snippets
      :after yasnippet
      :demand t)
  #+end_src

* helm-c-yasnippet
  Use helm menu for yasnippet completions

  #+begin_src emacs-lisp
    (use-package helm-c-yasnippet
      :after (helm yasnippet)
      :config
      (setq helm-yas-space-match-any-greedy t)
      ;; Must use global-set-key here because this function must be defined at
      ;; the top level to be used in conjunction with yas-maybe-expand.
      (global-set-key (kbd "C-c y") 'helm-yas-complete))
  #+end_src
