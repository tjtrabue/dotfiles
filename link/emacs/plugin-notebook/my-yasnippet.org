#+TITLE:  Yasnippet Snippet System
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020:05:26
#+STARTUP: fold

=yasnippet= is the snippet engine for Emacs. It behaves in a similar fashion to
UltiSnips for Vim, or TextMate's snippet system. You use =yasnippet= by typing a
snippet's /key/, which is a word used as an abbreviation for expanding the
snippet, followed by a /trigger/ for the snippet, which is a key or key chord
that expands the snippet based on the abbreviation before point.

* yasnippet
  =yasnippet= itself.

  #+begin_src emacs-lisp
    (use-package yasnippet
      :demand t
      :commands
      (yas-minor-mode yas-global-mode)
      :general
      (general-unbind yas-minor-mode-map
        "TAB"
        "<tab>")
      (my/user-leader-def yas-minor-mode-map
        "y e" 'yas-expand
        "y f" 'yas-visit-snippet-file
        "y i" 'yas-insert-snippet
        "y n" 'yas-new-snippet)
      :custom
      ;; Condition evaluated whenever YAS tries to expand a key.
      (yas-buffer-local-condition yas-not-string-or-comment-condition)
      ;; How Yasnippet prompts the user for a snippet
      (yas-prompt-functions '(yas-completing-prompt))
      :config
      ;; Integrate Yasnippet with hippie-expand.  We want to add the Yasnippet
      ;; expand function to hippie-expand's expand function list when we turn
      ;; Yasnippet on, and remove that expansion function when we turn Yasnippet
      ;; off.
      (add-hook 'yas-minor-mode-hook
                (lambda ()
                  (if (bound-and-true-p yas-minor-mode)
                      (add-to-list 'hippie-expand-try-functions-list
                                   'yas-hippie-try-expand)
                    (setq-local hippie-expand-try-functions-list
                                (remove 'yas-hippie-try-expand
                                        hippie-expand-try-functions-list)))))
      (add-hook 'yas-global-mode-hook
                (lambda ()
                  (if (bound-and-true-p yas-global-mode)
                      (add-to-list 'hippie-expand-try-functions-list
                                   'yas-hippie-try-expand)
                    (setq hippie-expand-try-functions-list
                          (remove 'yas-hippie-try-expand
                                  hippie-expand-try-functions-list)))))
      (yas-global-mode 1)
      (yas-reload-all))
  #+end_src

* yasnippet-snippets
  A big collection of pre-written snippets for =yasnippet=.

  #+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :after yasnippet
      :demand t)
  #+end_src

* common-lisp-snippets
  Yasnippet snippets for Common Lisp.

  #+begin_src emacs-lisp
    (use-package common-lisp-snippets
      :after yasnippet
      :demand t)
  #+end_src

* clojure-snippets
  Yasnippet snippets for Clojure.

  #+begin_src emacs-lisp
    (use-package clojure-snippets
      :after yasnippet
      :demand t)
  #+end_src

* helm-c-yasnippet
  Use helm menu for yasnippet completions

  #+begin_src emacs-lisp
    (use-package helm-c-yasnippet
      :after (helm yasnippet)
      :config
      (setq helm-yas-space-match-any-greedy t)
      ;; Must use global-set-key here because this function must be defined at
      ;; the top level to be used in conjunction with yas-maybe-expand.
      (global-set-key (kbd "C-c y") 'helm-yas-complete))
  #+end_src

* auto-yasnippet
Auto-YASnippet is a hybrid of keyboard macros and YASnippet. You create the
snippet on the go and it'll be ready to use immediately. Because you're not
leaving the current buffer the workflow is very fast.

All you do is enter the code you'd enter anyway but placing ~ chars where you`d
like YASnippet fields and mirrors to be.

#+begin_src emacs-lisp
  (use-package auto-yasnippet
    :after yasnippet
    :general
    (my/user-leader-def yas-minor-mode-map
      "y TAB" 'aya-expand
      "y SPC" 'aya-expand-from-history
      "y c"   'aya-clear-history
      "y d"   'aya-delete-from-history
      "y j"   'aya-next-in-history
      "y k"   'aya-previous-in-history
      "y o"   'aya-open-line
      "y s"   'aya-persist-snippet
      "y w"   'aya-create))
#+end_src
