#+title:   Generic Lisp Configuration
#+author:   Tom Trabue
#+email:    tom.trabue@gmail.com
#+date:     2021:07:05
#+property: header-args:emacs-lisp :lexical t
#+tags:
#+STARTUP: fold

This file contains configuration and plugins for editing generic LISP code
regardless of its particular dialect.

* lispy
  =lispy= is a great plugin for editing LISP files in a VI-oriented
  manner. There is also the fantastic =lispyville= plugin for integrating
  =lispy= with =evil-mode=. See the =my-evil.org= file for =lispyville='s
  configuration, which is where I keep most of my interesting =lispy= settings.

  #+begin_src emacs-lisp
    (use-package lispy
      :hook
      ;; Load lispyj-mode for any LISP derived major mode.
      ;; IELM is the Emacs Lisp REPL.
      ((cider-repl-mode
        clojure-mode
        emacs-lisp-mode
        ielm-mode
        lisp-mode
        lisp-interaction-mode
        sly-mrepl-mode)
       . lispy-mode)
      :general
      (general-unbind lispy-mode-map
        ;; Unbind HORRIFIC keybindings that keep me from inserting characters.
        "["
        "]"
        "{"
        "}")
      :init
      ;; Whether to consider all open parens in the window, rather than just the
      ;; open parens in the current defun.
      (setq lispy-teleport-global t)
      :config
      ;; Tweak key themes enabled by default.  Since I use lispyville for evil-mode
      ;; integration, I don't need the annoying "special" mode bindings that lispy
      ;; likes to use.
      (lispy-set-key-theme '(lispy c-digits)))
  #+end_src

* parinfer-rust-mode
  Parinfer is an incredible editing system designed to make programming in any
  Lisp dialect a joy. It automatically handles indentation and parentheses for
  you, effectively replacing and improving upon minor modes such as
  =aggressive-indent= and =electric-pair-mode=. There are Parinfer plugins for
  Vim, Neovim, Kakoune, and Emacs. This is the latter.

  Please note that this minor mode has nothing to do with the Rust programming
  language, from the user's perspective, at least. The authors wrote the
  original version of this plugin in Emacs Lisp, but after failing to achieve
  the performance they desired, they deprecated the original plugin and created
  this version which is written in Rust, hence the =-rust-= part of the name.

** *IMPORTANT:* How Parinfer affects your workflow
   Parinfer is quite opinionated, and takes control of several aspects of your
   Lisp code without asking. This can take some getting used to. Take the
   following Emacs Lisp snippet as an example (Note: =:tangle no= in the source
   code blocks means that Org will not include them in the tangled Emacs Lisp
   file it generates):

   #+begin_src emacs-lisp :tangle no
     (+ 1 2)
     (* 3 4)
   #+end_src

   When =parinfer-rust-mode= is active, if you indent the second line at all,
   Parinfer changes the structure of your code to the following:

   #+begin_src emacs-lisp :tangle no
     (+ 1 2
       (* 3 4))
   #+end_src

  Please note what just happened: Parinfer detected that you indented the second
  line, and interpreted that action as a desire on your part to /nest/ the
  second expression inside of the first. This makes sense from a stylistic point
  of view: the coding convention in Lisp is to only indent lines for expressions
  that are continuations of the expression on the previous line. Thus, Parinfer
  simultaneously enforces proper Lisp coding style and makes it easy to change
  expression nesting, which is a common coding task.

  You will notice similar phenomena when you delete or comment a line of Lisp
  code. If you delete the second line of the last code block:

   #+begin_src emacs-lisp :tangle no
     (+ 1 2
       (* 3 4))
   #+end_src

  You will end up with:

   #+begin_src emacs-lisp :tangle no
     (+ 1 2)
   #+end_src

  Notice how Parinfer automatically closes the expression on line 1. The same
  edit would have happened if you had commented line 2 instead of deleting it.

** Notes on interoperability between Parinfer and other plugins
   Parinfer automatically detects active troublesome minor modes and prompts
   the user to deactivate them. Such minor modes include =electric-pair-mode=,
   =hungry-delete-mode=, and =global-hungry-delete-mode=

   You should be able to use Parinfer with plugins such as =smartparens= without
   any trouble.

** Parinfer default keymap
   Be default, the Parinfer commands keymap is bound to =C-c C-p=. See the
   GitHub page for more information about which interactive functions are
   available. You can change the default keymap prefix by changing the binding
   for =parinfer-rust-mode-map=.

** =use-package= specification
  #+begin_src emacs-lisp
    (use-package parinfer-rust-mode
      ;; I'm trying not to use parinfer as a crutch while I learn Lispy.
      :disabled
      :hook
      ;; Automatically activate parinfer-rust-mode in these major modes.
      (clojure-mode
       emacs-lisp-mode
       ielm-mode
       lisp-mode
       lisp-interaction-mode
       sly-mrepl-mode)
      :custom
      ;; Controls how parinfer behaves. Can be one of "paren", "indent", or
      ;; "smart".
      ;; "paren" gives you full control over parentheses and automatically
      ;; balances indentation blocks. It's a bit like aggressive-indent-mode.
      ;; "indent" gives you full control over indentation and automatically
      ;; adjusts parentheses as you indent blocks.
      ;; "smart" automatically balance delimiters but try to preserve structure
      ;; as well.
      (parinfer-rust-preferred-mode "smart")
      ;; Never prompt user for permission before adjusting indentation.
      (parinfer-rust-check-before-enable nil)
      ;; Dim the parentheses inferred by Parinfer.
      (parinfer-rust-dim-parens t)
      ;; Automatically download latest parinfer-rust library needed for this
      ;; plugin to work without prompting the user.
      (parinfer-rust-auto-download t))
  #+end_src
