#+TITLE: The Hydra Keyboard Macro System
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020:5:25
#+STARTUP: fold

This file contains Plugins and configuration for the hydra hotkey macro package.

=hydra= is a system for defining a keybinding as a "gateway" to a group of
related keybindings that the user intends to press repeatedly. For instance, the
user could map =C-*= to the hydra for zooming the current window in and out with
the =j= and =k= keys. In fact, I define such a hydra in this file! To get rid of
(or slay) the hydra, the user merely has to hit any other key not defined within
the current hydra.  After that, the hydra disappears and the key the user
pressed to slay the hydra performs its normal function. Thus, if the user
activates the aforementioned zoom hydra with =C-*= and proceeds to zooms in and
out with the =j= and =k= keys, and then presses =p= to slay the hydra, then the
hydra disappears and =p= performs its usual operation for the prioritized
keymap.

* Hydras
** hydra-zoom
This is a simple, nearly trivial hydra used as an example and starting point for
creating more complex specimens. All that =hydra-zoom= accomplishes is defining
a zoom in/out hydra for the global keymap.

#+begin_src emacs-lisp
  (defun my/define-hydra-zoom ()
    "Wrapper function for defhydra hydra-zoom"

    ;; NOTE: This overrides the default `undo' keybinding.
    (defhydra hydra-zoom (global-map "C-/")
      "Zoom in/out in the current window"
      ("k" text-scale-increase "in")
      ("j" text-scale-decrease "out")))
#+end_src

** hydra-resize-window
This hydra resizes the current window using VI keys.

#+begin_src emacs-lisp
  (defun my/define-hydra-resize-window ()
    "Wrapper function for defhtdra hydra-resize-window."
    (defhydra hydra-resize-window (global-map "C-]")
      "Resize window with VI keys"
      ("h" shrink-window-horizontally "Shrink horizontally")
      ("j" shrink-window "Shrink vertically")
      ("k" enlarge-window "Enlarge vertically")
      ("l" enlarge-window-horizontally "Enlarge horizontally")
      ("q" nil "Quit" :exit t))
    (my/evil-leader-def 'override
      "ar" 'hydra-resize-window/body))
#+end_src

** hydra-expand-region
This hydra expands and contracts the active region by semantic units using the
=expand-region= plugin.

#+begin_src emacs-lisp
  (defun my/define-hydra-expand-region ()
    "Wrapper function for defhydra hydra-expand-region."
    (defhydra hydra-expand-region ()
      "Expand/contract visual region"
      ("=" er/expand-region "Expand region")
      ("-" er/contract-region "Contract region"))
    ;; We bind the hydra key separately so that pressing the binding immediately
    ;; expands the region, as well as activates the hydra.
    (general-def
      "C-=" 'hydra-expand-region/er/expand-region))
#+end_src

** hydra-org-todo
Cycles through todo states for an Org file entry.

#+begin_src emacs-lisp
  (defun my/define-hydra-org-todo ()
    "Wrapper function for defhydra hydra-org-todo."
    ;; Notice that we don't bind any keys in the hydra definition because this
    ;; hydra only contains one binding: "t". We bind to this command directly
    ;; after we define the hydra.
    (defhydra hydra-org-todo ()
      "Cycle org todo states"
      ("t" org-todo))
    (general-def org-mode-map
      "C-c C-t" 'hydra-org-todo/org-todo))
#+end_src

* Activate hydras
#+begin_src emacs-lisp
  (defun my/define-hydras ()
    "Load custom hydra definitions."
    (interactive)
    (my/define-hydra-zoom)
    (my/define-hydra-resize-window)
    (my/define-hydra-expand-region)
    ;; It's better to use org-todo's menu keys instead.
    ;; (my/define-hydra-org-todo)
    )
#+end_src

* =use-package= specification
#+begin_src emacs-lisp
  (use-package hydra
    :after evil-collection
    :demand t
    :config
    (my/define-hydras))
#+end_src
