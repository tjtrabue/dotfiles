#+title:  Version Control Configuration/Plugins
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:26
#+STARTUP: fold

Plugins for extending Emacs with version control capabilities.

* vc
General version control plugin for Emacs. =vc-mode= is agnostic to any
particular version control system, providing functions that work for Git, SVN,
Mercurial, and more.

#+begin_src emacs-lisp
  (use-package vc)
#+end_src

* git-modes
The following plugin contains major modes for editing Git file types.

#+begin_src emacs-lisp
  (use-package git-modes)
#+end_src

* magit
The /best/ interactive Git client out there! Honestly, Magit is reason enough
by itself to use Emacs. Every capability you have ever wanted from a Git
porcelain exists in Magit.

** Functions
#+begin_src emacs-lisp
  (defun my/magit-kill-buffers ()
    "Restore window configuration and kill all Magit buffers."
    (interactive)
    (let ((buffers (magit-mode-get-buffers)))
      (magit-restore-window-configuration)
      (mapc #'kill-buffer buffers)))
#+end_src

** =use-package= specification
#+begin_src emacs-lisp
  ;; I've configured most keybindings for Magit in `my-evil.el' under
  ;; evil-leader's config section.
  (use-package magit
    :after evil-collection
    :general
    (general-def '(normal emacs) magit-status-mode-map
      ;; This helps get rid of Magit buffers as we dismiss the *magit-status*
      ;; buffer, which keeps our buffer list clean.
      ;; NOTE: Can slow down Magit's performance just a bit.
      ;; "q" 'my/magit-kill-buffers
      )
    (my/evil-leader-def
      "gD"  'magit-diff-dwim
      "gP"  'magit-push
      "gR"  'magit-reset
      "gc"  'magit-commit
      "gd"  'magit-dispatch
      "gg"  'magit-status
      "gm"  'magit-merge
      "gp"  'magit-pull
      "gr"  'magit-rebase
      "gs"  'magit-stage-modified
      "gtt" 'git-timemachine-toggle)
    :custom
    ;; List of symbols for actions that Magit should not confirm, or t.
    (magit-no-confirm '(stage-all-changes unstage-all-changes)))
#+end_src

* magit-todos
Lists =TODO= items and related comments in the =magit-status= buffer.

#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit
    :demand t
    :hook
    (magit-status-mode . (lambda ()
                           (setq-local magit-todos-exclude-globs
                                       '("*.a"
                                         "*.class"
                                         "*.elc"
                                         "*.jar"
                                         "*.o"
                                         "*.so"
                                         "*.tar.gz"
                                         "*.tgz"
                                         "*.zip"
                                         ".git/"
                                         "build/"
                                         "dist/"
                                         "elpa/"
                                         "node_modules/"
                                         "straight/"))))
    :config
    (magit-todos-mode 1))
#+end_src

* magit-lfs
Adds Git Large File Storage capabilities to Magit.

#+begin_src emacs-lisp
  (use-package magit-lfs
    :after magit)
#+end_src

* forge
A seriously powerful =magit= plugin for interfacing with numerous Git "forges",
such as GitHub, GitLab, and more.

Forge fetches issues, pull-requests and other data using the forgeâ€™s API and
stores that in a local database. Additionally it fetches the pull-request
references using Git. Forge implements features that use this data, but
third-party packages can also use the database and pull-request refs.

** Configuring Authentication with GitHub
First, you need to [[https://github.com/settings/tokens][create a Personal Authentication Token (PAT) on GitHub]]. You
need to specify certain scopes to when you create your PAT, I'd go ahead and
check all of the boxes.  Next, copy and save your token to your =~/.authinfo=
file in a line like this:

=machine api.github.com login YOUR_GITHUB_USERNAME^forge password
YOUR_GITHUB_TOKEN=

*NOTE:* the =^forge= after your GitHub username is important! That is a package
specifier.

After this, you should be able to use =forge= and all of its features.

** Using forge in a local repository
To start using Forge in a certain repository visit the Magit status buffer for
that repository and type =f n= (=forge-pull=). Alternatively, you can use =M-x
forge-add-repository=, which makes it possible to add a forge repository without
pulling all topics and even without having to clone the respective Git
repository.

*NOTE:* You must set up a token before you can add the first repository.

** =use-package= specification
#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src

* diff-hl
Highlights current Git changes in the fringe, much like =git-gutter= in
Vim. There were =git-gutter= plugins for Emacs, but they are no longer
maintained.

#+begin_src emacs-lisp
  (use-package diff-hl
    :demand t
    :hook
    ;; These hooks are needed for Magit 2.4 and newer.
    ((magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :config
    ;; Enable diff-hl globally.
    (global-diff-hl-mode)
    ;; Provide similar functionality in dired-mode.
    (diff-hl-dired-mode)
    ;; Update highlights on the fly instead of after each file write. Much
    ;; more useul than the default behavior.
    (diff-hl-flydiff-mode)
    ;; Makes the fringe/margin react to mouse clicks to show the corresponding
    ;; hunk.
    (diff-hl-show-hunk-mouse-mode))
#+end_src

* git-timemachine
Step through historic versions of git controlled file using Emacs.  All you must
do is visit a git-controlled file and invoke =git-timemachine= or
=git-timemachine-toggle=. Check the documentation for the default keybindings.

#+begin_src emacs-lisp
  (use-package git-timemachine
    :commands (git-timemachine git-timemachine-toggle)
    ;; The MELPA package is out of date because the project moved from GitLab to
    ;; Codehub.
    :straight
    (git-timemachine :host github
                     :repo "emacsmirror/git-timemachine")
    :general
    (general-def 'normal git-timemachine-mode-map
      "?" 'git-timemachine-help
      "W" 'git-timemachine-kill-revision
      "b" 'git-timemachine-blame
      "c" 'git-timemachine-show-commit
      "g" 'git-timemachine-show-nth-revision
      "n" 'git-timemachine-show-next-revision
      "p" 'git-timemachine-show-previous-revision
      "q" 'git-timemachine-quit
      "t" 'git-timemachine-show-revision-fuzzy
      "w" 'git-timemachine-kill-abbreviated-revision))
#+end_src

* git-link
Interactively create and retrieve links to the current file's page on GitHub,
GitLab, BitBucket, etc.

#+begin_src emacs-lisp
  (use-package git-link
    :general
    (my/user-leader-def
      "g l" 'git-link))
#+end_src

* ghub
=ghub= is an Emacs Lisp library for interacting with the web APIs, both REST and
GraphQL, for a number of "forges", such as GitHub, GitLab, BitBucket, and
more. The Magit team maintains =ghub= as a separate project. =ghub= is a
complementary package to =forge=, not an alternative. =ghub= is much simpler
than =forge=, designed for quick and easy access to Git forge resources.

Ghub abstracts access to API resources using only a handful of basic functions
such as =ghub-get=. These are convenience wrappers around
=ghub-request=. Additional forge-specific wrappers like =glab-put=, =gtea-put=,
=gogs-post= and =buck-delete= are also available. Ghub does not provide any
resource-specific functions, with the exception of =FORGE-repository-id=.

#+begin_src emacs-lisp
  (use-package ghub)
#+end_src

* git-messenger
Pop up the last commit message for the current line.

I've noticed that this plugin doesn't work that well with PGP-signed
commits. The popup only shows the PGP signature, not the commit message.

#+begin_src emacs-lisp
  (use-package git-messenger
    :commands
    (git-messenger:popup-diff
     git-messenger:popup-message
     git-messenger:popup-show)
    :general
    (my/user-leader-def
      "g S" 'git-messenger:popup-show-verbose
      "g d" 'git-messenger:popup-diff
      "g m" 'git-messenger:popup-message
      "g s" 'git-messenger:popup-show)
    :custom
    ;; Whether to use `magit-show-commit' for showing status/diff commands.
    (git-messenger:use-magit-popup t))
#+end_src

* git-undo
Adds a command for Emacs to regress, or "undo" a region back through its Git
history, a region back through its Git history.

#+begin_src emacs-lisp
  (use-package git-undo
    :general
    (my/evil-leader-def
      "gu" 'git-undo))
#+end_src
