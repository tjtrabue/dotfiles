#+TITLE:   Cape: Flying Completion-at-Point Functions
#+AUTHOR:  Thomas Trabue
#+EMAIL:   tom.trabue@gmail.com
#+DATE:    2023-12-22
#+TAGS:    cape completion at point capf corfu company
#+STARTUP: fold

=cape= is a set of enhanced completion-at-point functions (AKA, "capf backends")
that work alongside =company=, =corfu=, or the default completion UI. You can
register =cape-*= functions in the =completion-at-point-functions= list, making
those backends available for completion, either through a completion UI such as
=corfu=, or by pressing =TAB= or =M-TAB=. Users can also bind specific =cape-*=
completion functions directly to keys to invoke them manually.

#+begin_src emacs-lisp
  (use-package cape
    :hook
    ((emacs-lisp-mode . (lambda ()
                          (add-to-list 'completion-at-point-functions #'cape-elisp-block)
                          (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)))
     (sgml-mode . (lambda ()
                    (add-to-list 'completion-at-point-functions #'cape-sgml)))
     ((tex-mode LaTeX-mode latex-mode) .
      (lambda ()
        (add-to-list 'completion-at-point-functions #'cape-tex)))
     ((comint-mode eshell-mode) .
      (lambda ()
        (add-to-list 'completion-at-point-functions #'cape-history)))
     (company-mode . (lambda ()
                       ;; Use Company backends as Capfs.
                       (setq-local completion-at-point-functions
                                   (mapcar #'cape-company-to-capf
                                           (list #'company-files #'company-keywords #'company-dabbrev))))))
    :general
    (my/user-leader-def
      "o p" 'completion-at-point
      "o t" 'complete-tag
      "o d" 'cape-dabbrev
      "o h" 'cape-history
      "o f" 'cape-file
      "o k" 'cape-keyword
      "o s" 'cape-elisp-symbol
      "o e" 'cape-elisp-block
      "o a" 'cape-abbrev
      "o l" 'cape-line
      "o w" 'cape-dict
      "o -" 'cape-tex
      "o =" 'cape-sgml
      "o r" 'cape-rfc1345)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is used by
    ;; `completion-at-point'.  The order of the functions matters, the first function returning a
    ;; result wins.  Note that the list of buffer-local completion functions takes precedence over the
    ;; global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-line)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    )
#+end_src
