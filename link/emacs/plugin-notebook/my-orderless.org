#+TITLE:    Orderless: Smart Completion Backend
#+AUTHOR:   Tom Trabue
#+EMAIL:    tom.trabue@gmail.com
#+DATE:     2021-01-21
#+TAGS:
#+STARTUP: fold

=orderless= provides an orderless completion style that divides the pattern into
space-separated components, and matches candidates that match all of the
components in any order. Each component can match in any one of several ways:
literally, as a regexp, as an initialism, in the flex style, or as multiple word
prefixes. By default, regexp and literal matches are enabled.

* =use-package= specification
#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion))
                                     (project-file (styles basic partial-completion))))
    (orderless-matching-styles '(orderless-literal
                                 orderless-regexp
                                 ;; Prefixes: "re-re" ~ "recode-region",
                                 ;;                     "query-replace-regex"
                                 ;; orderless-prefixes
                                 ;;
                                 ;; Initialisms: "abc" ~ "alfred-batman-catwoman"
                                 ;; NOTE: Initialism regexps are really slow under
                                 ;;       the hood. You probably don't want them
                                 ;; orderless-initialism
                                 ;;
                                 ;; Flex:
                                 ;; characters in the search string must appear in the candidate
                                 ;; string, but not necessarily consecutively,  i.e, "abc" really
                                 ;; means "a.*b.*c", so it would match "anybody can."
                                 ;; orderless-flex
                                 )))
#+end_src
