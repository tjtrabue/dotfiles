#+TITLE:  Emacs Color Theme
#+AUTHOR: Tom Trabue
#+EMAIL:  tom.trabue@gmail.com
#+DATE:   2020-05-26
#+TAGS:   color colors theme
#+STARTUP: fold

This is where we set Emacs' primary color theme.

*WARNING:* Do NOT set themes via the 'M-x load-theme' command or through
customize! Those systems will add a ton of 'safety' checks to ~/.emacs and mess
up our nice, easy method of loading themes from right here in this file. If you
do, you'll need to go through the custom-set-variables section and delete the
theme code added by customize.

* Variables
#+begin_src emacs-lisp
  (defvar my/theme-after-load-hook nil
    "Functions to run after the main theme activates.
  Please do not make this hook run as advice to `load-theme' because
  it will end up in an infinite loop due to the need to load the
  `org-beautify-theme' after the main theme. Thus, it will call `load-theme'
  automatically after it calls `load-theme' for all eternity.")
#+end_src

* Functions
#+begin_src emacs-lisp
  (defun my/activate-theme--doom ()
    "Activation/configuration function for doom theme."
    (load-theme 'doom-one t)
    ;; Flash the modeline when the Emacs bell rings.
    ;; (doom-themes-visual-bell-config)
    ;; Two treemacs icon themes: one that takes after Atom's themes, and
    ;; another more colorful theme.
    (doom-themes-treemacs-config)
    ;; Correct and improve some of org-mode's native fontification.
    (doom-themes-org-config))

  (defun my/activate-theme--modus ()
    "Activation/configuration function for modus theme."
    (load-theme 'modus-vivendi t)
    ;; Set custom faces for the active Modus theme.
    (my/modus-themes-custom-faces))

  (defun my/activate-theme ()
    "Activate my favorite color theme.
  This function wraps the `load-theme' function and other theme activation
  functions to provide a single point of theme configuration."
    (my/activate-theme--modus))
#+end_src

* Add advice to theme activation function
We want to run our custom theme hooks automatically after the theme loads.

#+begin_src emacs-lisp
  (defadvice my/activate-theme (after run-my/theme-after-load-hook activate)
    "Run `my/theme-after-load-hook'."
    (run-hooks 'my/theme-after-load-hook))
#+end_src

* Add theme hooks
There are some appearance-based functions that can only run after the primary
theme has loaded, so we should put all such logic inside of an "after load"
hook.

#+begin_src emacs-lisp
  (add-hook 'my/theme-after-load-hook
            (lambda ()
              ;; It's important to load org-beautify-theme after the main theme
              ;; has loaded.
              (with-eval-after-load "org-beautify-theme"
                (if (not (custom-theme-enabled-p 'org-beautify-theme))
                    (load-theme 'org-beautify t)))))
#+end_src

* Theme Packages
These are some great Emacs color themes from Emacs contributors.

** modus-themes
Highly accessible and configurable color themes for Emacs. They conform to the
high standards of the [[https://www.w3.org/WAI/standards-guidelines/wcag/][Web Content Accessibility Guidelines]] and are thus a
fantastic choice for users with vision impairment or looking to reduce eye
strain. As of Emacs version 28.1, the Modus themes come prepackaged with
Emacs. The Modus themes are far more lightweight than themes in the
=doom-themes= package, and I have found them to greatly enhance Emacs'
performance as compared to the =doom-themes=.

Modus uses special names for its color variables (i.e., =bg-main=, =fg-alt=,
=blue-warmer=, etc). These variables are theme-independent, and are only
available in certain contexts, such as within the body of a
=modus-themes-with-colors= macro. Check the online documentation for a [[https://protesilaos.com/emacs/modus-themes-colors][list of
color names used by Modus]].

*** Functions
#+begin_src emacs-lisp
  (defun my/modus-themes-custom-faces ()
    "Customize faces for modus themes."
    (modus-themes-with-colors
      (when (bound-and-true-p solaire-mode)
        ;; Support Solaire.
        (custom-set-faces
         `(solaire-default-face ((,c :inherit default
                                     :background ,bg-dim
                                     :foreground ,fg-dim)))
         `(solaire-line-number-face ((,c :inherit solaire-default-face
                                         :foreground ,fg-dim)))
         `(solaire-hl-line-face ((,c :background ,bg-active)))
         `(solaire-org-hide-face ((,c :background ,bg-dim
                                      :foreground ,bg-dim)))))
      (when (bound-and-true-p highlight-indent-guides-mode)
        ;; Customize faces for `highlight-indent-guides-mode' since that mode
        ;; cannot seem to figure out its faces on its own when using Modus themes.
        (set-face-background 'highlight-indent-guides-odd-face bg-dim)
        (set-face-background 'highlight-indent-guides-even-face bg-dim)
        (set-face-foreground 'highlight-indent-guides-character-face bg-dim)
        (set-face-background 'highlight-indent-guides-top-odd-face magenta-faint)
        (set-face-background 'highlight-indent-guides-top-even-face magenta-faint)
        (set-face-foreground 'highlight-indent-guides-top-character-face magenta-faint)
        (set-face-background 'highlight-indent-guides-stack-odd-face bg-lavender)
        (set-face-background 'highlight-indent-guides-stack-even-face bg-lavender)
        (set-face-foreground 'highlight-indent-guides-stack-character-face bg-lavender))))
#+end_src

*** =use-package= specification

#+begin_src emacs-lisp
  (use-package modus-themes
    :demand t
    :init
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs t
          modus-themes-mixed-fonts t
          modus-themes-custom-auto-reload t
          modus-themes-disable-other-themes t
          modus-themes-prompts '(italic bold)
          modus-themes-completions
          '((matches . (extrabold))
            (selection . (semibold italic text-also)))
          modus-themes-org-blocks 'gray-background
          modus-themes-headings '((1 . (variable-pitch 1.5))
                                  (2 . (1.3))
                                  (agenda-date . (1.3))
                                  (agenda-structure . (variable-pitch light 1.8))
                                  (t . (1.1)))
          ;; Whether to allow UI components under the direct control of Emacs
          ;; (such as the mode line, header line, and tab line) to contain
          ;; variable-pitch fonts instead of just monospaced fonts.
          modus-themes-variable-pitch-ui t
          ;; Override colors for all Modus themes.
          modus-themes-common-palette-overrides
          '((cursor magenta-cooler)
            ;; Make the fringe invisible.
            (fringe unspecified)
            ;; Make line numbers less intense and add a shade of cyan
            ;; for the current line number.
            (fg-line-number-inactive "gray50")
            (fg-line-number-active cyan-cooler)
            (bg-line-number-inactive unspecified)
            (bg-line-number-active unspecified)
            ;; Make the current line of `hl-line-mode' a fine shade of
            ;; gray (though also see my `lin' package).
            (bg-hl-line bg-dim)
            ;; Make the region have a cyan-green background with no
            ;; specific foreground (use foreground of underlying text).
            ;; "bg-sage" refers to Salvia officinalis, else the common
            ;; sage.
            (bg-region bg-sage)
            (fg-region unspecified)
            ;; Make matching parentheses a shade of magenta.  It
            ;; complements the region nicely.
            (bg-paren-match bg-magenta-intense)
            ;; Make email citations faint and neutral, reducing the
            ;; default four colors to two; make mail headers cyan-blue.
            (mail-cite-0 fg-dim)
            (mail-cite-1 blue-faint)
            (mail-cite-2 fg-dim)
            (mail-cite-3 blue-faint)
            (mail-part cyan-warmer)
            (mail-recipient blue-warmer)
            (mail-subject magenta-cooler)
            (mail-other cyan-warmer)
            ;; Change dates to a set of more subtle combinations.
            (date-deadline magenta-cooler)
            (date-scheduled magenta)
            (date-weekday fg-main)
            (date-event fg-dim)
            (date-now blue-faint)
            ;; Make tags (Org) less colorful and tables look the same as
            ;; the default foreground.
            (prose-done cyan-cooler)
            (prose-tag fg-dim)
            (prose-table fg-main)
            ;; Make headings in various prose modes more colorful.
            (fg-heading-1 blue-warmer)
            (fg-heading-2 red-warmer)
            (fg-heading-3 magenta-warmer)
            (fg-heading-4 green-warmer)
            (fg-heading-5 red-warmer)
            (fg-heading-6 cyan-warmer)
            (fg-heading-7 yellow-warmer)
            (fg-heading-8 indigo)
            ;; Make the active mode line a fine shade of lavender
            ;; (purple) and tone down the gray of the inactive mode
            ;; lines.
            (bg-mode-line-active bg-lavender)
            (border-mode-line-active bg-lavender)
            (bg-mode-line-inactive bg-dim)
            (border-mode-line-inactive bg-inactive)
            ;; Make the prompts a shade of magenta, to fit in nicely with
            ;; the overall blue-cyan-purple style of the other overrides.
            ;; Add a nuanced background as well.
            (bg-prompt bg-magenta-nuanced)
            (fg-prompt magenta-cooler)
            ;; Tweak some more constructs for stylistic constistency.
            (name blue-warmer)
            (identifier magenta-faint)
            (keybind magenta-cooler)
            (accent-0 magenta-cooler)
            (accent-1 cyan-cooler)
            (accent-2 blue-warmer)
            (accent-3 red-cooler)))
    (add-hook 'modus-themes-after-load-theme-hook #'my/modus-themes-custom-faces)
    :config
    (my/activate-theme))
#+end_src

** doom-themes
This is a /huge/ collection of Emacs themes contributed by the very gracious
creator of Doom Emacs and several others.

*NOTE:* Enabling one of the =doom-themes= can /greatly/ degrade Emacs'
performance, especially when combined with =doom-modeline=! I highly recommend
using a simpler theme. It's worth taking the UI hit for the sake of a
buttery-smooth editing experience.

#+begin_src emacs-lisp
  (use-package doom-themes
    ;; Currently using `modus-themes' for performance reasons.
    :disabled
    :after all-the-icons
    :demand t
    :custom
    ;; Enable bold fonts
    (doom-themes-enable-bold t)
    ;; Enable italic fonts
    (doom-themes-enable-italic t)
    ;; A more colorful theme for Treemacs that leverages all-the-icons.
    (doom-themes-treemacs-theme "doom-colors")
    :config
    (my/activate-theme))
#+end_src

* theme-magic
This package applies your Emacs theme to the rest of Linux. It. Is. Awesome.

It also depends on =pywal=, so make sure that you have it installed on
your =PATH=. =pywal= is a Python package, so installing it is easy:

#+begin_src shell :tangle no
  python3 -m pip install --user --upgrade pywal
#+end_src

** =use-package= specification
#+begin_src emacs-lisp
  (use-package theme-magic
    ;; Not currently used.
    :disabled
    :config
    ;; This global minor mode automatically updates your Linux theme
    ;; whenever Emacs' theme changes.
    (theme-magic-export-theme-mode))
#+end_src
