#+title:  Emacs Theme Customization
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:05:26
#+tags:   color colors theme
#+STARTUP: fold

This is where we set Emacs' primary color theme.

*WARNING:* Do NOT set themes via the 'M-x load-theme' command or through
customize! Those systems will add a ton of 'safety' checks to ~/.emacs and mess
up our nice, easy method of loading themes from right here in this file. If you
do, you'll need to go through the custom-set-variables section and delete the
theme code added by customize.

#+begin_src emacs-lisp :tangle yes
;; -*- lexical-binding: t; -*-

#+end_src

* Provide Package
#+begin_src emacs-lisp :tangle yes
  (provide 'my-theme)
#+end_src

* Variables
#+begin_src emacs-lisp :tangle yes
  (defvar my-theme-after-load-hook nil
    "Functions to run after the primary theme loads.")
#+end_src

* Functions

#+begin_src emacs-lisp :tangle yes
  (defun my/set-color-theme-alist (theme-alist &optional sublist)
    "Sets `my/color-theme-alist' to the specified THEME-ALIST.

If the user specifies SUBLIST as the name of a nested alist within
THEME-ALIST, then use that nested SUBLIST as the main theme alist."
    (require 'my-colors)
    (let ((the-right-alist theme-alist))
      (if sublist
          (setq the-right-alist (cdr (assq sublist theme-alist))))
      (setq my/color-theme-alist the-right-alist)))

  (defun my/set-semantic-colors-for-theme ()
    "Make Semantic's faces match our theme."
    (set-face-attribute 'semantic-tag-boundary-face nil :overline
      (alist-get 'purple my/color-theme-alist)))

  (defun my/set-ecb-colors-for-theme ()
    "Make some of the faces in ECB cohesive with our color theme."
    (set-face-attribute 'ecb-default-highlight-face nil
      :foreground (alist-get 'alt-background my/color-theme-alist)
      :background (alist-get 'orange my/color-theme-alist)
      :weight 'extra-bold))
#+end_src

* Add theme hooks
  There are some appearance-based functions that can only run after the primary
  theme has loaded, so we should put all such logic inside of an "after load"
  hook.

#+begin_src emacs-lisp :tangle yes
  (add-hook 'my-theme-after-load-hook #'(lambda ()
    ;; It's important to load org-beautify-theme after the main theme has
    ;; loaded.
    (with-eval-after-load "org-beautify-theme"
      (if (not (custom-theme-enabled-p 'org-beautify-theme))
        (load-theme 'org-beautify t)))
    ;; Fix org-mode line number height.
    (let ((height (face-attribute 'default :height)))
      ;; for all linum/nlinum users
      (set-face-attribute 'linum nil :height height)
      ;; only for `linum-relative' users:
      (set-face-attribute 'linum-relative-current-face nil :height height))))
#+end_src

* Theme Packages
  These are some great themes from Emacs contributors. I marked the theme I
  currently use by appending "(active)" to the end of its =org-mode= heading.

** color-theme-sanityinc-tomorrow
   The predecessor to the =base-16= color theme system.

#+begin_src emacs-lisp :tangle yes
  (use-package color-theme-sanityinc-tomorrow
    ;; :init
    ;; (load-theme 'sanityinc-tomorrow-eighties t)
    :config
    (my/set-color-theme-alist color-theme-sanityinc-tomorrow-colors 'eighties))
#+end_src

** moe-theme

#+begin_src emacs-lisp :tangle yes
  ;; (use-package moe-theme
  ;;   :defer t
  ;;   :init (load-theme 'moe-dark t)
  ;;   )
#+end_src

** spacemacs-theme

#+begin_src emacs-lisp :tangle yes
  ;; (use-package spacemacs-theme
  ;;   :defer t
  ;;   :init (load-theme 'spacemacs-dark t)
  ;;   )
#+end_src

** zenburn-theme

#+begin_src emacs-lisp :tangle yes
  ;; (use-package zenburn-theme
  ;;   :defer t
  ;;   :init (load-theme 'zenburn t)
  ;;   )
#+end_src

** doom-themes
   This is a /huge/ collection of Emacs themes contributed by the very gracious
   creator of Doom Emacs.

#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :after (all-the-icons)
    :custom
    ;; Enable bold fonts
    (doom-themes-enable-bold t)
    ;; Enable italic fonts
    (doom-themes-enable-italic t)
    ;; A more colorful theme for Treemacs that leverages all-the-icons.
    (doom-themes-treemacs-theme "doom-colors")
    :config
    (load-theme 'doom-vibrant t)
    ;; Flash the modeline when the Emacs bell rings.
    ;; (doom-themes-visual-bell-config)
    ;; Two treemacs icon themes: one that takes after Atom's themes, and
    ;; another more colorful theme.
    (doom-themes-treemacs-config)
    ;; Correct and improve some of org-mode's native fontification.
    (doom-themes-org-config)
    (run-hooks 'my-theme-after-load-hook))
#+end_src
* theme-magic
  This package applies your Emacs theme to the rest of Linux. It. Is. Awesome.

  It also depends on =pywal=, so make sure that you have it installed on
  your =PATH=. =pywal= is a Python package, so installing it is easy:

#+begin_src shell
python3 -m pip install --user --upgrade pywal
#+end_src

** use-package specification
#+begin_src emacs-lisp :tangle yes
  (use-package theme-magic
    :config
    ;; This global minor mode automatically updates your Linux theme
    ;; whenever Emacs' theme changes.
    (theme-magic-export-theme-mode))
#+end_src

* Apply theme to other faces
#+begin_src emacs-lisp :tangle yes
  ;; (add-hook 'semantic-mode-hook #'my/set-semantic-colors-for-theme)
  ;; (add-hook 'ecb-activate-hook #'my/set-ecb-colors-for-theme)
#+end_src
