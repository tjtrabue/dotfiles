#+title:   Emacs Initialization File
#+author:  Thomas Trabue
#+email:   tom.trabue@gmail.com
#+date:    2020:5:25
#+STARTUP: fold

This Org document contains my primary Emacs configuration. =~/.emacs= only
holds custom-set-variables and a few core pieces of code needed to load this
file. The full repository for my dotfiles can be found [[https://github.com/tjtrabue/dotfiles][here]].

* Require statements
  These are =require= directives used to import Elisp modules used heavily by
  plugins and my custom code. Please only list the most important modules
  here. Wait to load modules only used by an individual plugin in its =init=
  block.

  #+begin_src emacs-lisp
    ;; Man pager library
    (require 'man)
    ;; Newer dired library
    (require 'dired-x)
    ;; String manipulation library
    (require 'subr-x)
    ;; Make C and C++ modes available; necessary for many third-party packages
    (require 'cc-mode)
    ;; "find function at point" library
    (require 'ffap)
  #+end_src

* Define User Variables
  This is where I define new variables to be used throughout my configuration.

  #+begin_src emacs-lisp
    ;; Make these variables compile-time constants (and available during
    ;; compilation)
    (eval-when-compile
      (defvar my/emacs-plugin-dir (file-truename
                                   (concat user-emacs-directory "/plugin"))
        "Directory for additional elisp config files.
    Mostly for enumerating and configuring downloaded plugins.")
      (defvar my/plugin-notebook-dir (file-truename
                                      (concat user-emacs-directory
                                              "/plugin-notebook"))
        "Directory for config files written in Org syntax.")
      (defvar my/elisp-lib-dir (file-truename
                                (concat user-emacs-directory "/require"))
        "Directory for custom Emacs Lisp library files.")
      (defvar my/local-repos-dir (file-truename
                                  (concat user-emacs-directory "/local-repos"))
        "Directory for local `straight' repos.")
      (defvar my/emacs-backup-dir (file-truename
                                   (concat user-emacs-directory "/backups"))
        "Directory housing all Emacs backup files.")
      (defvar my/emacs-lisp-dir (file-truename
                                 (concat user-emacs-directory "/lisp"))
        "Extra miscellaneous elisp code goes here (if necessary).")
      (defvar user-fonts-dir (file-truename
                              (concat (getenv "HOME") "/.local/share/fonts"))
        "Fonts directory for the current user")
      (defvar my/straight-home-dir (file-truename
                                    (concat user-emacs-directory "/straight"))
        "Home directory for the straight package manager.")
      (defvar my/straight-repos-dir (file-truename
                                     (concat my/straight-home-dir "/repos"))
        "Housing area for repositories cloned by straight.")
      (defvar my/straight-build-dir (file-truename
                                     (concat my/straight-home-dir "/build"))
        "Housing area for linked and compiled Elisp files for packages installed
    with straight.el.")
      (defvar my/workspace-dir (file-truename
                                (concat (getenv "HOME") "/workspace"))
        "Directory containig development projects.")
      (defvar my/practice-dir (file-truename
                               (concat (getenv "HOME") "/practice"))
        "Directory containig practice or scratch code.")
      (defvar my/line-width 80 "The width of each line of code.")
      (defvar my/use-helm-gtags t
        "If non-nil, use helm-gtags over the ggtags package. Otherwise, use ggtags.")
      (defvar my/user-info-dir
        (file-truename (concat (getenv "HOME") "/.local/share/info"))
        "The directory containing extra info pages installed by the user.")
      (defvar my/max-worker-processes
        (string-trim (shell-command-to-string "nproc"))
        "The maximum number of processor threads that can be running at once.")
      (defvar my/org-dir
        (file-truename (concat user-emacs-directory "/org"))
        "My custom directory used by Org to store miscellaneous notes.")
      (defvar my/org-agenda-dir (file-truename (concat my/org-dir "/agenda"))
        "Directory containing my Org agenda files.")
      (defvar my/org-capture-file (file-truename (concat my/org-dir "/inbox.org"))
        "File receiving Org captures from other files. A dumping ground for ideas.")
      (defvar my/lisp-major-modes
        '(clojure-mode
          emacs-lisp-mode
          ielm-mode
          lisp-mode
          lisp-interaction-mode
          sly-mrepl-mode)
        "List of important Lisp major modes")
      (defvar my/authinfo-files (mapcar (lambda (file)
                                          (file-truename (concat (getenv "HOME") "/" file)))
                                        '(".authinfo.gpg" ".authinfo" ".netrc"))
        "The user's .authinfo files used to store login credentials.")
      (defvar my/recentf-timer nil
        "Reference to timer for `recentf-save-list' so we can disable it later."))
  #+end_src

* Language/Encoding
  Language and encoding parameters for this particular Emacs instance.

  #+begin_src emacs-lisp
    ;; Define a standard text encoding system for all files.
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
  #+end_src

* Configure Load Path
  The load-path list is a collection of file paths that Emacs uses to locate
  Elisp modules at runtime.

  #+begin_src emacs-lisp
    ;; Tell Emacs where custom library files are
    (add-to-list 'load-path my/elisp-lib-dir)
    ;; Tell Emacs where our personal elisp lib dir resides.
    (add-to-list 'load-path my/emacs-lisp-dir)
    ;; Tell Emacs where to find plugin config files.
    (add-to-list 'load-path my/emacs-plugin-dir)
  #+end_src

* Require Custom Libraries
  Once we have configured the =load-path= we can add =require= statements for
  custom Emacs Lisp libraries.

  #+begin_src emacs-lisp
    ;; My own font functions and definitions.
    (require 'my-font)
    ;; My custom window functions.
    (require 'my-window)
    ;; Functions for interacting with hooks.
    (require 'my-hook-fns)
    ;; My hippie-expand customizations.
    (require 'my-hippie-expand)
  #+end_src

* Load Hotfix Modules
  Load any HOTFIX modules in order to fix backwards-compatibility issues.  It is
  best to keep these code snippets out of the main Emacs configuration file
  since they are necessary evil, not main configuration code, and as such will
  soon become unnecessary and may be safely removed.

  #+begin_src emacs-lisp
    ;; Fix `make-obsolete' functions argument list issues.
    (load "fix/em28-obsolete-functions-fix")
    ;; Fix certain org-mode function argument list issues.
    (load "fix/org-functions-fix")
  #+end_src

* Configure Backup Dirs/Files
  It's handy to have Emacs put all backup files in a centralized directory, as
  opposed to strewing them about each directory you visit.

  #+begin_src emacs-lisp
    ;; Put all backup files in ~/.emacs.d/backups to avoid causing
    ;; unwanted side-effects.
    (if (not (file-exists-p my/emacs-backup-dir))
        (make-directory my/emacs-backup-dir t))
    (setq backup-directory-alist `(("." . ,my/emacs-backup-dir)))
    ;; Backup of a file the first time it is saved.
    (setq make-backup-files t)
    ;; don't clobber symlinks
    (setq backup-by-copying t)
    ;; Version numbers for backup files
    (setq version-control t)
    ;; Delete excess backup files silently
    (setq delete-old-versions t)
    (setq delete-by-moving-to-trash t)
    ;; Oldest versions to keep when new numbered backups created (default 2)
    (setq kept-old-versions 6)
    ;; Newest versions to keep when new numbered backups created (default 2)
    (setq kept-new-versions 9)
    ;; Auto-save every buffer that visits a file
    (setq auto-save-default t)
    ;; Number of seconds idle time before auto-save (default 30)
    (setq auto-save-timeout 20)
    ;; Number of keystrokes between auto-saves (default 300)
    (setq auto-save-interval 200)
  #+end_src

* Color Configuration
  Here we configure ANSI colors for various modes used throughout Emacs.
  We need to make =comint-mode=, which all shell emulators in Emacs (known as
  inferior interpreters) inherit from, recognize ANSI color escape sequences
  so that shells don't look like a hot mess. We also want colorized man pages.

  #+begin_src emacs-lisp
    ;; Set ANSI color integration in comint-mode
    (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
    ;; Colorize Emacs' man page viewer
    (set-face-attribute 'Man-overstrike nil
                        :inherit font-lock-type-face
                        :bold t)
    (set-face-attribute 'Man-underline nil
                        :inherit font-lock-keyword-face
                        :underline t)
  #+end_src

* Set Emacs Variables
  Here is where we set existing Emacs variables to our preferred values, both
  for customization and performance. Emacs is notoriously slow unless you tweak
  many existing variables, especially if you use advanced programming tools such
  as LanguageServerProtocol clients and servers.

  #+begin_src emacs-lisp
    ;; Show diagnostic output in the event of an error if non-nil.  Blowing up the
    ;; screen with debugging output seems to mess with evil-mode, so I find it
    ;; prudent to turn this variable off until I have a reason to turn it on.
    (setq debug-on-error nil)
    ;; Always follow symlinks
    (setq vc-follow-symlinks t)
    ;; Reduce risk of loading outdated bytecode
    (setq load-prefer-newer t)

    ;; Do not show standard GNU Emacs welcome screen when Emacs starts,
    ;; but instead enter the *scratch* buffer.
    (setq inhibit-startup-screen t)

    ;; Silence the annoying error/warning bell
    (setq ring-bell-function 'ignore)

    ;; Display relative line numbers like in Vim.
    (setq display-line-numbers-type 'relative)

    ;; Up the maximum depth for eval, apply, and funcall functions.
    ;; This variable is supposed to catch infinite recursions before
    ;; they cause a stack overflow, but its default value is very low.
    (setq max-lisp-eval-depth 10000)

    ;; Get rid of scrollbars since l33t programmers don't need any.
    (setq vertical-scroll-bar nil)

    ;; Increase the amount of bytes Emacs reads per unit time from a given
    ;; process. The initial value is 4KB, far too low for modern day applications.
    (setq read-process-output-max (* 1024 1024))

    ;; Set the max number of variable bindings allowed at one time to a
    ;; number considerably higher than the default (which is 1600).
    ;; Modern problems require modern solutions!
    (setq max-specpdl-size 12000)

    ;; Each line should be 80 characters wide.
    (setq-default fill-column my/line-width)

    ;; Set vertical ruler in programming modes
    (setq-default
     whitespace-line-column my/line-width
     whitespace-style '(face lines-tail))

    ;; Set smooth scrolling
    ;; (also see the sublimity plugin configuration)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
    (setq mouse-wheel-progressive-speed nil)
    (setq mouse-wheel-follow-mouse 't)
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (setq auto-window-vscroll nil)

    ;; Automatically reload TAGS file without prompting us.
    (setq tags-revert-without-query t)

    ;; Never prompt us to take tags tables with us when moving between
    ;; directories. Always assume "no".
    (setq tags-add-tables nil)

    ;; Use spaces instead of tabs.
    (setq-default indent-tabs-mode nil)
    ;; Indent in increments of 2 spaces.
    (setq-default tab-width 2)

    ;; Show trailing whitespace characters by default.
    (setq-default show-trailing-whitespace t)

    ;; This must be set to nil in order for evil-collection to replace
    ;; evil-integration in all important ways. This variable must be set
    ;; here, NOT in the :config or :init blocks of a use-package expression.
    ;; (otherwise a warning gets printed)
    (setq evil-want-keybinding nil)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))

    ;; Display the name of the real file when visiting a symbolic link.
    ;; WARNING: DO NOT SET THIS TO T! It messes with straight.el's autoload
    ;; generation!
    ;; (setq find-file-visit-truename nil)

    ;; Don’t compact font caches during GC. This can resolve lag issues with
    ;; doom-modeline and some other plugins.
    (setq inhibit-compacting-font-caches t)

    ;; Whether to cycle completions.
    (setq completion-cycle-threshold t)

    ;; Emacs 28 variables.
    (when (>= emacs-major-version 28)
      ;; Hide commands in M-x which do not work in the current mode.
      ;; Vertico commands are hidden in normal buffers.
      (setq read-extended-command-predicate #'command-completion-default-include-p))
  #+end_src

* Adjust initial frame size
  In keeping with the spirit of Emacs, there are a plethora of methods for
  changing the size of the first frame Emacs creates. A frame is basically
  Emacs' concept of a window in Microsoft Windows or macOS lingo. The method(s)
  used below are the most portable.

  #+begin_src emacs-lisp
    (let (;; Get desired frame height and width as fraction of total monitor size.
          (frame-height-pixels (truncate (* (display-pixel-height) 0.96)))
          (frame-width-pixels (truncate (* (display-pixel-width) 0.99))))
      (when (eq system-type 'darwin)
        ;; Adjust default frame size on macOS.
        (setq initial-frame-alist `((height . (text-pixels . ,frame-height-pixels))
                                    (width . (text-pixels . ,frame-width-pixels))))))
  #+end_src

* Font Configuration
  Set default font for Emacs.
  *NOTE:* The main font configuration is in =my-font.el=.

  #+begin_src emacs-lisp
    (my-font-set-default-font)
  #+end_src

* Info
  =info= is Emacs' built in help system. You use =info= to browse various
  documentation pages. However, by default, Emacs only looks in a small number
  of locations for help pages. Here we add more locations for browsing
  user-installed info pages.

  #+begin_src emacs-lisp
    ;; Make sure user-installed info pages are available.
    (add-to-list 'Info-default-directory-list my/user-info-dir)
  #+end_src

* Aliases
  Here we alias existing functions to new names, usually to tell Emacs to run a
  different function whenever it tries to use one we don't like.

  #+begin_src emacs-lisp
    ;; Turn all "yes or no" prompts into "y or n" single character prompts to make
    ;; our lives eaiser.
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

* Activate/Deactivate Default Minor Modes
  Turn certain minor modes on or off by default. You can think of a minor mode
  as a plugin, or an extra set of functions and behaviors that can be turned on
  or off by calling their parent minor-mode function. For instance, calling
  (save-place-mode 1) will make Emacs open previously closed files at their last
  edited location, as opposed to opening them at the beginning.

  #+begin_src emacs-lisp
    ;; Disable menubar and toolbar (they take up a lot of space!)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    ;; Also diable the scrollbar
    (toggle-scroll-bar -1)

    ;; Open files at last edited position
    (save-place-mode 1)

    ;; Turn on recentf-mode for keeping track of recently opened files.
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (setq recentf-max-saved-items 25)
    (global-set-key (kbd "C-x C-r") 'recentf-open-files)
    ;; Periodically save recent file list (every 5 minutes) so that we do not lose
    ;; the list if Emacs crashes.
    (setq my/recentf-timer (run-at-time nil (* 5 60) 'recentf-save-list))

    ;; subword-mode is super handy! It treats parts of camelCase and snake_case
    ;; names as separate words. This enables subword-mode in all buffers.
    (global-subword-mode 1)

    ;; Automatically insert closing delimiters when an opening delimiter is typed.
    ;; NOTE: Parinfer does a much better job balancing parentheses and much more,
    ;; so we can disable electric-pair-mode.
    ;; See my-lisp.org for details.
    (electric-pair-mode -1)

    ;; Automatically keep code indented when blocks change.
    ;; Not necessary since we use clean-aindent-mode.
    ;; See my-whitespace.org for more details.
    (electric-indent-mode -1)

    ;; Allow tooltips in pop-up mini-frames.
    (tooltip-mode 1)

    ;; Turn on syntax highlighting (AKA font locking) by default.
    (global-font-lock-mode 1)

    ;; Always show line numbers
    (global-display-line-numbers-mode 1)

    ;; Keep buffers in sync with their respective files on disk as they change
    ;; outside of Emacs. An example would be an untracked file being added to the
    ;; Git index. With this mode active, Git information would display automatically
    ;; after the file is added. If it was not active, you would have to manually
    ;; revert the buffer.
    ;; NOTE: Enabling global-auto-revert can slow down Emacs!
    (global-auto-revert-mode -1)

    ;; Persist command history to disk so that it is saved between restarts.
    (savehist-mode 1)

    ;; Automatically visit image files as images.
    (auto-image-file-mode 1)
  #+end_src

* Key Bindings
  Custom key bindings.

** Global
   Key bindings available in any major mode.

   #+begin_src emacs-lisp
     ;; Find file at point ("g f" in evil-mode)
     ;; (global-set-key (kbd "C-c f p") #'ffap)

     ;; Change window size (Vim-like bindings)
     (global-set-key (kbd "S-C-l") #'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-h") #'shrink-window-horizontally)
     (global-set-key (kbd "S-C-j") #'enlarge-window)
     (global-set-key (kbd "S-C-k") #'shrink-window)

     ;; Turns vertically split frame into a horizontal split one.
     (global-set-key (kbd "C-c w t") #'my-window-toggle-frame-split)

     ;; Select a bookmark to delete by means of an interactive menu.
     (global-set-key (kbd "C-c D") #'bookmark-delete)
   #+end_src

* Email
  These settings are used to configure Emacs' mail-mode and integrations with
  external email programs, such as mutt.

  #+begin_src emacs-lisp

    ;; Change mode when Emacs is used to edit emails for Mutt
    (setq auto-mode-alist (append '(("/tmp/mutt.*" . message-mode)) auto-mode-alist))
  #+end_src

* Function Definitions
  Custom functions, both standard and interactive.

  #+begin_src emacs-lisp
    (defun print-major-mode ()
      "Show the major mode of the current buffer in the echo area."
      (interactive)
      (message "%s" major-mode))

    (defun gnus-new-frame ()
      "Create a new frame and start the Gnus news reader in it."
      (interactive)
      (with-selected-frame (make-frame)
        (gnus)))

    (defun reload-config ()
      "Reload all Emacs config files."
      (interactive)
      (load-file my/emacsrc))

    (defun download-elisp-lib (url &optional file-name)
      "Downloads an elisp file from a URL to `my/emacs-lisp-dir'.

      If FILE-NAME is omitted or nil, it defaults to the last segment of the URL."
      (if (not file-name)
          (setq file-name (url-file-nondirectory (url-unhex-string url))))
      (let ((file-path (concat my/emacs-lisp-dir (concat "/" file-name))))
        (make-directory my/emacs-lisp-dir t)
        (url-copy-file url (file-truename file-path) t)))

    (defun my/gtags-root-dir ()
      "Returns GTAGS root directory or nil if doesn't exist."
      (with-temp-buffer
        (if (zerop (call-process "global" nil t nil "-pr"))
            (buffer-substring (point-min) (1- (point-max)))
          nil)))

    (defun my/gtags-update ()
      "Make GTAGS incremental update"
      (call-process "global" nil nil nil "-u"))

    (defun my/gtags-update-hook-fn ()
      "Update GTAGS file whenever an appropriate file is saved."
      (when (my/gtags-root-dir)
        (my/gtags-update)))

    (defun my/trimmed-shell-result (shell-command-str)
      "Execute a shell command and return the result without leading or
    trailing whitespace.

    SHELL-COMMAND-STR is the shell command to execute."
      (string-trim (shell-command-to-string shell-command-str)))

    (defun my/tool-installed-p (tool)
      "Determine whether or not a given executable (TOOL) exists

    TOOL is a string corresponding to an executable in the UNIX environment."
      (not (string= "" (my/trimmed-shell-result (concat "command -v " tool)))))

    (defun my/recursive-add-dirs-to-load-path (base-dir &optional subdirs)
      "Recursively add directories from a BASE-DIR to load-path.

    Optionally, SUBDIRS is a list of subdirectory strings beneath BASE-DIR that
    should be added to load-path. If this argument is absent, all subdirectories
    of BASE-DIR are added to load-path."
      (interactive)
      (let ((default-directory base-dir))
        (setq load-path
              (append
               (let ((load-path (copy-sequence load-path))) ; Shadow
                 (if subdirs
                     ;; If user supplied list of subdirs, pass it here
                     (normal-top-level-add-to-load-path subdirs)
                   ;; Otherwise, add all directories under base-dir
                   (normal-top-level-add-subdirs-to-load-path)))
               load-path))))

    (defun my/compile-org-dir (org-dir)
      "Tangle then byte compile every .org file in ORG-DIR, but only if necessary.

    This function first checks for byte-compiled .elc files in the
    directory. If they do not yet exist for their corresponding .el
    files, or if the .elc files are older than their parent .el
    files, this function byte-compiles the .el files. However, the
    .el files are generated from their ancestor .org files, so this
    function then checks to make sure that the .el files are present
    and up-to-date with each .org file. If they are absent or out of
    sync, tangle the .org files to generate the .el files."
      (interactive)
      (let* ((default-directory org-dir)
             (org-files (directory-files org-dir 'full ".*\\.org"))
             (elc-files (mapcar (lambda (file)
                                  (concat
                                   (file-name-sans-extension file) ".elc"))
                                org-files)))
        (mapc #'my/create-update-config-artifact elc-files)))

    (defun straight-update-and-freeze ()
      "Custom function that updates all installed packages and regenerates the
    lock file."
      (interactive)
      (straight-pull-all)
      (straight-rebuild-all)
      (straight-freeze-versions t))

    (defun my/straight-pull-recipe-repositories ()
      "Update all straight.el recipe repositories. This is a custom function that
        I defined in order to make my life easier.
        --tjtrabue"
      (interactive)
      (dolist (repo straight-recipe-repositories)
        (straight-pull-package repo)))

    (defun my/use-mu4e-p ()
      "Return T if the system is configured for `mu4e'. Return NIL otherwise."
      (and (executable-find "mu") (executable-find "mbsync")))

    (defun my/disable-recentf ()
      "Disable `recentf' configuration. Safe to run multiple times."
      (interactive)
      (when my/recentf-timer
        (cancel-timer my/recentf-timer))
      (when (eq (key-binding "C-x C-r") 'recentf-open-files)
        (global-unset-key (kbd "C-x C-r")))
      (recentf-mode -1))
  #+end_src

* Environment Variables
  Set additional environment variables not taken care of through the
  =initial-environment= list of variables.

** Basic
   #+begin_src emacs-lisp
     ;; Set standard language that Emacs assumes.
     (setenv "LANG" "en_US.UTF-8")
   #+end_src

** Perl
   Perl's operations depends on a number of environment variables that Emacs
   will not recognize by default, so we must set them here.

   #+begin_src emacs-lisp
     (let* ((perl-local-lib-root (concat (getenv "HOME") "/perl5"))
            (perl-local-lib (concat perl-local-lib-root "/lib/perl5")))
       (setenv "PERL5LIB" perl-local-lib)
       (setenv "PERL_LOCAL_LIB_ROOT"
               (concat perl-local-lib-root ":$PERL_LOCAL_LIB_ROOT") 'subst-env-vars)
       (setenv "PERL_MB_OPT" (concat "--install_base '" perl-local-lib-root "'"))
       (setenv "PERL_MM_OPT" (concat "INSTALL_BASE=" perl-local-lib-root))
       (setenv "PERL_MM_USE_DEFAULT" "1"))
   #+end_src

* Hooks
  Hooks are analogous to Vim's autocmds. They represent a series of functions to
  run when a particular event occurs. Both Emacs proper and third party plugins
  design and expose certain hooks along with their packages, and the user can
  then attach functions to each hook by means of the 'add-hook function. The
  most commonly used hooks are those for major modes, each having a name like
  java-mode-hook, or haskell-mode-hook.  However, most packages provide
  additional hooks for use besides those for major and minor modes.

** Buffer-menu-mode hooks
   #+begin_src emacs-lisp
     (add-hook 'Buffer-menu-mode-hook (lambda ()
                                        ;; Disable whitespace visualization in Buffer
                                        ;; menu.
                                        (setq-local show-trailing-whitespace nil)
                                        (whitespace-mode -1)))
   #+end_src

** dired-mode hooks
   dired is the awesome "directory editor" mode in Emacs. It's much more
   convenient than entering the shell, for the most part.

   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook (lambda ()
                                  ;; Auto-refresh dired buffer when files change.
                                  (auto-revert-mode 1)
                                  ;; Allow user to toggle long-form ls output in dired mode with '('.
                                  (dired-hide-details-mode 1)))
     (add-hook 'wdired-mode-hook (lambda ()
                                   ;; Auto-refresh wdired buffer when files change.
                                   (auto-revert-mode 1)))
   #+end_src

** emacs-startup hooks
   These run after loading init files and handling the command line.

   #+begin_src emacs-lisp
     (add-hook 'emacs-startup-hook
               (lambda ()
                 ;; After startup, it is important you reset the garbage collector
                 ;; settings to some reasonable defaults. A large gc-cons-threshold
                 ;; will cause freezing and stuttering during long-term interactive
                 ;; use. I find these are nice defaults:
                 (setq gc-cons-threshold (* 100 1024 1024)
                       gc-cons-percentage 0.1
                       file-name-handler-alist last-file-name-handler-alist)))
   #+end_src

** minibuffer-setup hooks
   These hooks just after entry into the minibuffer.

   #+begin_src emacs-lisp
     ;; Do not allow the cursor in the minibuffer prompt
     (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
   #+end_src

** minibuffer-mode hooks
   These hooks run after =minibuffer-mode= activates for a buffer.

   #+begin_src emacs-lisp
     (add-hook 'minibuffer-mode-hook (lambda ()
                                       ;; Don't highlight whitespace in minibuffer.
                                       (setq-local show-trailing-whitespace nil)
                                       (whitespace-mode -1)))
   #+end_src

** prog-mode hooks
   These commands run whenever Emacs finds a file of any programming language.

   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook (lambda ()
                                 ;; Make hyperlinks clickable.
                                 (goto-address-mode 1)
                                 ;; Turn various keywords into pretty programming symbols,
                                 ;; such as "lambda" -> "λ" in lisp-mode.
                                 (prettify-symbols-mode 1)
                                 ;; Show invisible characters.
                                 (whitespace-mode 1)))
   #+end_src

** shell-mode hooks
   shell-mode is a basic terminal emulator in Emacs.

   #+begin_src emacs-lisp
     (add-hook 'shell-mode-hook (lambda ()
                                  (ansi-color-for-comint-mode-on)))
   #+end_src

** text-mode hooks
   These commands run whenever Emacs finds a text type file or any of its
   derivatives.

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook (lambda ()
                                 ;; Wrap words if they exceed the fill column
                                 ;; threshold.
                                 (auto-fill-mode 1)
                                 ;; Make hyperlinks clickable.
                                 (goto-address-mode 1)
                                 ;; Show invisible characters.
                                 (whitespace-mode 1)))
   #+end_src

** conf-mode hooks
   These commands run whenever Emacs finds a configuration file, such as =.ini=
   or =.gitconfig= files.

   #+begin_src emacs-lisp
     (add-hook 'conf-mode-hook (lambda ()
                                 ;; Make hyperlinks clickable.
                                 (goto-address-mode 1)
                                 ;; Show invisible characters.
                                 (whitespace-mode 1)))
   #+end_src

** before-save hooks
   These hooks run before Emacs saves a file.

   #+begin_src emacs-lisp
     (add-hook 'before-save-hook (lambda ()
                                   ;; Strip trailing whitespace from the
                                   ;; current buffer before saving.
                                   (delete-trailing-whitespace)
                                   ;; Convert tabs to spaces.
                                   (untabify (point-min) (point-max))))
   #+end_src

** after-save hooks
   These hooks run after Emacs saves a file.

   #+begin_src emacs-lisp
     (add-hook 'after-save-hook (lambda ()
                                  ;; Update any GTAGS files if necessary.
                                  (my/gtags-update-hook-fn)))
   #+end_src

** window-size-change hooks
   Hooks that run whenever the window size changes.

   #+begin_src emacs-lisp
     ;; NOTE: Most of the time, Emacs seems to take care of zooming the font size
     ;;       by itself. Only uncomment this hook if you notice a very small font
     ;;       size on large monitors.
     ;; (add-hook 'window-size-change-functions #'my-font-adjust-font-size)
   #+end_src

* Package Manager
** straight
   =straight= is a newer package manager for Emacs that differs from
   =package.el=.  It operates by cloning Git repositories for Emacs packages and
   symlinking them to Emacs' runtime path. =straight= is also a purely
   functional package manager, and integrates nicely with the =use-package=
   macro.  *NOTE:* straight requires Emacs version 24.5 or higher to properly
   function.

   To update all packages installed through straight, run =M-x
   straight-pull-all=

   #+begin_src emacs-lisp
     (eval-when-compile
       (defvar bootstrap-version)
       ;; Always use use-package when installing packages, making the ':straight t'
       ;; part of the use-package macro unnecessary.
       (setq straight-use-package-by-default t)
       ;; The branch of straight.el to use
       (setq straight-repository-branch "develop")
       (let ((bootstrap-file
              (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
             (bootstrap-version 5))
         (unless (file-exists-p bootstrap-file)
           (with-current-buffer
               (url-retrieve-synchronously
                "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                'silent 'inhibit-cookies)
             (goto-char (point-max))
             (eval-print-last-sexp)))
         (with-no-warnings
           (load bootstrap-file nil 'nomessage))

         ;; Refresh package repositories
         (when (not (fboundp 'straight-pull-recipe-repositories))
           ;; Sometimes straight.el does not include the convenience function
           ;; `straight-pull-recipe-repositories', in which case we should alias
           ;; that function to our own custom version.
           (defalias 'straight-pull-recipe-repositories
             'my/straight-pull-recipe-repositories))
         (straight-pull-recipe-repositories)

         ;; Default mode for loading packages: either defer or demand.
         ;; (setq use-package-always-demand t)
         (setq use-package-always-defer t)

         ;; Install use-package via straight.
         ;; After this function runs, use-package will automatically use straight
         ;; to install packages if you specify ':stright t' instead of ':ensure t'.
         ;; If you have set straight-use-package-by-default to t, this is
         ;; unnecessary.
         (straight-use-package
          ;; Override the MELPA recipe in order to get all Elisp files for
          ;; use-package. For some reason, the MELPA recipe excludes several
          ;; important source files.
          '(use-package :type git :host github :repo "jwiegley/use-package"
             :files (:defaults)))))
   #+end_src

** Install packages needed from the very start
   Some packages are important to load right at the get-go, either because we
   want their functionality right now, or because they provide extra keywords
   for =use-package= that we want to make use of in our =use-package=
   statements.

*** use-package-chords
    Adds =:chords= keyword to =use-package= for defining key-chords.

    #+begin_src emacs-lisp
      (use-package use-package-chords
        :demand t
        :config
        (key-chord-mode 1))
    #+end_src

*** general
    =general.el= is a macro system for managing Emacs keybindings. You can think
    of it as a wrapper around both standard Emacs keybinding forms, such as
    =define-key=, =global-set-key=, etc., and third-party keybinding macros,
    such as =evil-define-key=. Thus, General allows you to define keys in a
    package-agnostic fashion. General also adds a number of keywords to
    =use-package=, such as =:general=, =ghook=, and =gfhook= for defining keys
    and hooks in a way that defers loading the package.

    #+begin_src emacs-lisp
      (use-package general
        :demand t
        :config
        ;; Define a shortcut function for defining keys that begin with "C-c"
        (general-create-definer my/user-leader-def
          :prefix "C-c")
        ;; Create a replacement macro for `evil-leader'. This completely obsoletes the
        ;; need to include `evil-leader' in your configuation!
        (general-create-definer my/evil-leader-def
          :states '(normal visual)
          :prefix ",")
        ;; Allows using Vim-style key definers.
        ;; Available definers are:
        ;;   general-imap
        ;;   general-emap
        ;;   general-nmap
        ;;   general-vmap
        ;;   general-omap
        ;;   general-mmap
        ;;   general-rmap
        ;;   general-iemap
        ;;   general-nvmap
        ;;   general-otomap
        ;;   general-itomap
        ;;   general-tomap
        ;; If a non-nil argument is passed to `general-evil-setup', you may omit the
        ;; "general-" prefix for these macros. I find that leaving them in makes your
        ;; code more descriptive, however.
        (general-evil-setup))
    #+end_src

* Load External Configuration Files
  Load additional Emacs configuration files from my custom plugins directories.
  Most of these files correspond directly to third-party dependencies from
  MELPA.  My configuration files install, configure, and load those third-party
  packages in a way that does not clutter my primary configuration file.

  #+begin_src emacs-lisp
    (my/apply-to-dir-files my/emacs-plugin-dir
                           #'load-file "\\.el$")
    (my/apply-to-dir-files my/plugin-notebook-dir
                           #'org-babel-load-file "\\.org$")
  #+end_src
