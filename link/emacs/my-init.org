#+title:   Emacs Initialization File
#+author:  Thomas Trabue
#+email:   tom.trabue@gmail.com
#+date:    2020:5:25
#+STARTUP: fold

This Org document contains my primary Emacs configuration. =~/.emacs= only holds
pieces of code necessary to prepare and load this file. You can find my full
dotfiles repository [[https://github.com/tjtrabue/dotfiles][here]].

* NOTE: Slow Emacs Initial Load

When running a fresh Emacs installation with all the goodies for the first time
(things like AOT native compilation, jitted trampolines, etc.), Emacs will
probably take a very, very long time to fully load due to the insane number of
Elisp files Emacs must compile to native code. I'm talking many hours, possibly
a full day depending on the beefiness of your CPU. This can be discouraging, but
it is nothing to worry about. Emacs will eventually finish compiling all your
files...usually. If Emacs does hang during compilation, for some reason, it can
be difficult to tell if Emacs is still running or if something went wrong. Here
are some tips for ensuring Emacs does, in fact, finish compiling your Elisp
files and become useable:

- Make sure to set the max number of open file descriptors in
  =/etc/security/limits.conf= to something pretty high:

  #+begin_quote
    * soft nofile 8192
    * hard nofile 65535
  #+end_quote

- Run Emacs in daemon-mode from the command line to keep track of the native
  compilation process:

  #+begin_src shell :tangle no
    # First, set the max number of open file descriptors to a sufficiently high
    # value.
    ulimit -Sn 8192
    ulimit -Hn 65535
    # Then, run Emacs in server-mode and keep it in the terminal's foreground to
    # keep track of Emacs' native compilation process. Once complete, Emacs will
    # print "Starting Emacs daemon."
    emacs --fg-daemon
  #+end_src

* Require statements
These are =require= directives used to import Elisp modules used heavily by
plugins and my custom code. Please only list the most important modules
here. Wait to load modules only used by an individual plugin in its =init=
block.

#+begin_src emacs-lisp
  ;; Man pager library
  (require 'man)
  ;; Newer dired library
  (require 'dired-x)
  ;; String manipulation library
  (require 'subr-x)
  ;; Make C and C++ modes available; necessary for some third-party packages
  (require 'cc-mode)
  ;; "find function at point" library
  (require 'ffap)
  ;; EasyPG, Emacs' front-end for GPG.
  (require 'epa)
#+end_src

* Define User Variables
This is where I define new variables needed throughout my configuration.

#+begin_src emacs-lisp
  ;; Make these variables compile-time constants (and available during
  ;; compilation)
  (eval-when-compile
    (defvar my/emacs-plugin-dir (file-truename
                                 (concat user-emacs-directory "/plugin"))
      "Directory for additional elisp config files.
  Mostly for enumerating and configuring downloaded plugins.")
    (defvar my/plugin-notebook-dir (file-truename
                                    (concat user-emacs-directory
                                            "/plugin-notebook"))
      "Directory for config files written in Org syntax.")
    (defvar my/elisp-lib-dir (file-truename
                              (concat user-emacs-directory "/require"))
      "Directory for custom Emacs Lisp library files.")
    (defvar my/private-elisp-dir (file-truename
                                  (concat user-emacs-directory "/private"))
      "Directory containing private config for my local environment.")
    (defvar my/local-repos-dir (file-truename
                                (concat user-emacs-directory "/local-repos"))
      "Directory for local `straight' repos.")
    (defvar my/emacs-backup-dir (file-truename
                                 (concat user-emacs-directory "/backups"))
      "Directory housing all Emacs backup files.")
    (defvar my/emacs-auto-saves-dir (file-truename
                                     (concat user-emacs-directory "/auto-saves"))
      "Directory housing all Emacs auto-save files.")
    (defvar my/emacs-lisp-dir (file-truename
                               (concat user-emacs-directory "/lisp"))
      "Extra miscellaneous elisp code goes here (if necessary).")
    (defvar user-fonts-dir (file-truename
                            (concat (getenv "HOME") "/.local/share/fonts"))
      "Fonts directory for the current user")
    (defvar my/static-path-file (file-truename
                                 (concat (getenv "HOME") "/.path_static"))
      "The compiled PATH file used to quickly determine PATH.")
    (defvar my/straight-home-dir (file-truename
                                  (concat user-emacs-directory "/straight"))
      "Home directory for the straight package manager.")
    (defvar my/straight-repos-dir (file-truename
                                   (concat my/straight-home-dir "/repos"))
      "Housing area for repositories cloned by straight.")
    (defvar my/straight-build-dir (file-truename
                                   (concat my/straight-home-dir "/build"))
      "Housing area for linked and compiled Elisp files for packages installed
  with straight.el.")
    (defvar my/workspace-dir (file-truename
                              (concat (getenv "HOME") "/workspace"))
      "Directory containig development projects.")
    (defvar my/practice-dir (file-truename
                             (concat (getenv "HOME") "/practice"))
      "Directory containig practice or scratch code.")
    (defvar my/line-width 80 "The width of each line of code.")
    (defvar my/use-helm-gtags t
      "If non-nil, use helm-gtags over the ggtags package. Otherwise, use ggtags.")
    (defvar my/user-info-dir
      (file-truename (concat (getenv "HOME") "/.local/share/info"))
      "The directory containing extra info pages installed by the user.")
    (defvar my/max-worker-processes
      (string-trim (shell-command-to-string "nproc"))
      "The maximum number of processor threads that can be running at once.")
    (defvar my/org-dir
      (file-truename (concat user-emacs-directory "/org"))
      "My custom directory used by Org to store miscellaneous notes.")
    (defvar my/org-agenda-dir (file-truename (concat my/org-dir "/agenda"))
      "Directory containing my Org agenda files.")
    (defvar my/org-capture-file (file-truename (concat my/org-dir "/inbox.org"))
      "File receiving Org captures from other files. A dumping ground for ideas.")
    (defvar my/lisp-major-modes
      '(cider-repl-mode
        clojure-mode
        clojurec-mode
        clojurescript-mode
        emacs-lisp-mode
        ielm-mode
        lisp-mode
        lisp-data-mode
        lisp-interaction-mode
        sly-mrepl-mode)
      "List of important Lisp major modes")
    (defvar my/authinfo-files (mapcar (lambda (file)
                                        (file-truename (concat (getenv "HOME") "/" file)))
                                      '(".authinfo.gpg" ".authinfo" ".netrc"))
      "The user's .authinfo files used to store login credentials.")
    (defvar my/line-number-state 'relative
      "The current global line number setting. Either `absolute' or `relative'."))
#+end_src

* Create Directories
Create directories that must be present for our Emacs configuration to function.

#+begin_src emacs-lisp
  (make-directory my/emacs-plugin-dir 'and-parents)
#+end_src

* Language/Encoding
Language and encoding parameters for this particular Emacs instance.

#+begin_src emacs-lisp
  ;; Define a standard text encoding system for all files.
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src

* Configure Load Path
=load-path= is a list of directories Emacs searches when asked to load a
module. It is analogous to the =PATH= environment variable used by the shell
when searching for executable programs, or the =CLASSPATH= variable used by Java
to search for compiled classes.

Here we add important paths to =load-path= that Emacs does not search by
default.

#+begin_src emacs-lisp
  ;; Add /usr/local/share/emacs/site-lisp/ to load-path, and then
  ;; add all of its child directories recursively to load-path
  (let ((usr-local-lisp "/usr/local/share/emacs/site-lisp"))
    (when (file-directory-p usr-local-lisp)
      (let ((default-directory usr-local-lisp))
        (add-to-list 'load-path usr-local-lisp)
        (normal-top-level-add-subdirs-to-load-path))))

  ;; Add our custom Elisp library dir to load-path, and then
  ;; add all of its child directories recursively to load-path
  (let ((default-directory my/elisp-lib-dir))
    (add-to-list 'load-path my/elisp-lib-dir)
    (normal-top-level-add-subdirs-to-load-path))

  ;; Tell Emacs where our personal elisp lib dir resides.
  (add-to-list 'load-path my/emacs-lisp-dir)

  ;; Tell Emacs where to find plugin config files.
  (add-to-list 'load-path my/emacs-plugin-dir)
#+end_src

* Native Compilation
To speed up performance, we want to native-compile our configuration files.

** Native compile personal Elisp files
Emacs compiles its own built-in Emacs Lisp files to native code, but users must
instruct Emacs to compile custom libraries.

#+begin_src emacs-lisp
  ;; This command native-compiles all Elisp files under a directory
  (native-compile-async `(,my/elisp-lib-dir
                          ,my/emacs-plugin-dir
                          ,my/plugin-notebook-dir)
                        'recursively)
#+end_src

* Require Custom Libraries
Once we have configured the =load-path= we can add =require= statements for
custom Emacs Lisp libraries.

#+begin_src emacs-lisp
  ;; My own font functions and definitions.
  (require 'my-font)
  ;; My custom window functions.
  (require 'my-window)
  ;; Functions for interacting with hooks.
  (require 'my-hook-fns)
  ;; recentf library for managing recently accessed filed.
  (require 'my-recentf)
  ;; GTAGS function library.
  (require 'my-gtags)
  ;; straight.el convenience functions.
  (require 'my-straight-helpers)
  ;; My hippie-expand customizations.
  (require 'my-hippie-expand)
  ;; Custom completing-read functions.
  (require 'my-completing-read)
#+end_src

* Load Hotfix Modules
Load any HOTFIX modules in order to fix backwards-compatibility issues.  It is
best to keep these code snippets out of the main Emacs configuration file since
they are necessary evil, not main configuration code, and as such will soon
become unnecessary and may be safely removed.

#+begin_src emacs-lisp
  ;; Fix certain org-mode function argument list issues.
  (require 'org-functions-fix)
  ;; Add dummy values to fix `helpful' and `color-identifiers' dependency on
  ;; read-symbol-positions-list
  (require 'symbol-positions-fix)
  ;; Add dummy variables needed to get native compilation to work, especially
  ;; for Straight.el. This should be able to go away pretty soon.
  (require 'native-comp-fix)
#+end_src

* Configure Backup Dirs/Auto-Saves
It's handy to have Emacs put all backup files in a centralized directory, as
opposed to strewing them about each directory you visit. Same goes for the
auto-save feature for buffers.

#+begin_src emacs-lisp
  ;; Put all backup files in ~/.emacs.d/backups and auto save files in
  ;; ~/.emacs.d/auto-saves to avoid causing unwanted side-effects.
  (dolist (dir (list my/emacs-backup-dir my/emacs-auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist
        `((".*" . ,(file-truename (concat my/emacs-backup-dir "/")))))
  (setq auto-save-file-name-transforms
        `((".*" ,(file-truename (concat my/emacs-auto-saves-dir "/")) t)))
  (setq auto-save-list-file-prefix
        (file-truename (concat my/emacs-auto-saves-dir "/.saves-")))
  (setq tramp-backup-directory-alist
        `((".*" . ,(file-truename my/emacs-backup-dir))))
  (setq tramp-auto-save-directory
        (file-truename (concat my/emacs-auto-saves-dir "/")))

  ;; Backup of a file the first time it is saved.
  (setq make-backup-files t)
  ;; Don't clobber symlinks
  (setq backup-by-copying t)
  ;; Version numbers for backup files
  (setq version-control t)
  ;; Delete excess backup files silently
  (setq delete-old-versions t)
  (setq delete-by-moving-to-trash nil)
  ;; Oldest versions to keep when new numbered backups created (default 2)
  (setq kept-old-versions 2)
  ;; Newest versions to keep when new numbered backups created (default 2)
  (setq kept-new-versions 5)
  ;; Auto-save every buffer that visits a file
  (setq auto-save-default t)
  ;; Number of seconds idle time before auto-save (default 30)
  (setq auto-save-timeout 30)
  ;; Number of keystrokes between auto-saves (default 300)
  (setq auto-save-interval 300)
#+end_src

* Color Configuration
Here we configure ANSI colors for major and minor modes used throughout Emacs.
We need to make =comint-mode=, which all shell emulators in Emacs (known as
inferior interpreters) inherit from, recognize ANSI color escape sequences so
that shells don't look like a hot mess. We also want colorized man pages.

#+begin_src emacs-lisp
  ;; Set ANSI color integration in comint-mode
  (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
  ;; Colorize Emacs' man page viewer
  (set-face-attribute 'Man-overstrike nil
                      :inherit font-lock-type-face
                      :bold t)
  (set-face-attribute 'Man-underline nil
                      :inherit font-lock-keyword-face
                      :underline t)
#+end_src

* Set Emacs Variables
Here is where we set existing Emacs variables to our preferred values, both for
customization and performance. Emacs is notoriously slow unless you tweak
GC-related variables, especially if you use advanced programming tools such as
LanguageServerProtocol clients and servers.

#+begin_src emacs-lisp
  ;; Always follow symlinks
  (setq vc-follow-symlinks t)
  ;; Reduce risk of loading outdated bytecode
  (setq load-prefer-newer t)

  ;; Do not show standard GNU Emacs welcome screen when Emacs starts,
  ;; but instead enter the *scratch* buffer.
  (setq inhibit-startup-screen t)

  ;; Silence the annoying error/warning bell
  (setq ring-bell-function 'ignore)

  ;; Suppress specified warning types.
  (setq warning-suppress-log-types '((comp)))

  ;; Describe the types of byte-compile warnings disired
  ;; as a list. `nil' means present no byte compile warnings.
  ;; `t' means present nearly all of them. `all' means
  ;; present absolutely all of them.
  (setq byte-compile-warnings t)

  ;; Display relative line numbers like in Vim.
  (setq display-line-numbers 'relative)
  (setq display-line-numbers-type 'relative)

  ;; Up the maximum depth for eval, apply, and funcall functions.  This variable
  ;; catches infinite recursions before they cause a stack overflow, but its
  ;; default value is low.
  (setq max-lisp-eval-depth 10101)

  ;; Get rid of scrollbars since l33t programmers don't need any.
  (setq vertical-scroll-bar nil)

  ;; Increase the amount of bytes Emacs reads per unit time from a given
  ;; process. The initial value is 4KB, far too low for modern day applications.
  (setq read-process-output-max (* 3 (* 1024 1024)))

  ;; Max file size (in bytes) before a confirmation is required of the user before
  ;; opening.
  (setq large-file-warning-threshold 100000000)

  ;; Echo unfinished commands after this many seconds of pause.
  (setq echo-keystrokes 0.1)

  ;; Set the max number of variable bindings allowed at one time to a
  ;; number considerably higher than the default (which is 1600).
  ;; Modern problems require modern solutions!
  (setq max-specpdl-size 12000)

  ;; Each line should be 80 characters wide.
  (setq-default fill-column my/line-width)

  ;; Set vertical ruler in programming modes
  (setq-default
   whitespace-line-column my/line-width
   whitespace-style '(face lines-tail))

  ;; Set smooth scrolling
  ;; (also see the sublimity plugin configuration)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-follow-mouse 't)
  (setq scroll-margin 0)
  (setq scroll-step 1)
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)

  ;; Automatically reload TAGS file without prompting us.
  (setq tags-revert-without-query t)

  ;; Never prompt us to take tags tables with us when moving between
  ;; directories. Always assume "no".
  (setq tags-add-tables nil)

  ;; Try to indent the current line, or complete the thing at point if the code is
  ;; already properly indented.
  (setq tab-always-indent 'complete)

  ;; Use spaces instead of tabs.
  (setq-default indent-tabs-mode nil)
  ;; Indent in increments of 2 spaces.
  (setq-default tab-width 2)

  ;; Show trailing whitespace characters by default.
  (setq-default show-trailing-whitespace t)

  ;; This must be set to nil in order for evil-collection to replace
  ;; evil-integration in all important ways. This variable must be set
  ;; here, NOT in the :config or :init blocks of a use-package expression.
  ;; (otherwise a warning gets printed)
  (setq evil-want-keybinding nil)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  ;; Move custom set variables to a separate file so as not to clutter my personal
  ;; initialization files.
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))

  ;; Whether to use a graphical dialog box for user input.  Disabling this option
  ;; causes Emacs to prompt the user from the minibuffer instead, keeping Emacs
  ;; more keyboard-centric.
  (setq use-dialog-box nil)

  ;; Automatically revert Dired and other buffers when the filesystem updates.
  (setq global-auto-revert-non-file-buffers t)

  ;; Display the name of the real file when visiting a symbolic link.
  ;; WARNING: DO NOT SET THIS TO T! It messes with straight.el's autoload
  ;; generation!
  (setq find-file-visit-truename nil)

  ;; Controls whether and when Emacs saves bookmarks to disk.
  ;;   nil    -> Emacs never saves bookmarks.
  ;;   t      -> Emacs saves bookmarks when it is killed.
  ;;   NUMBER -> Emacs will save bookmarks to file after NUMBER changes
  ;;             are made to bookmarks (i.e., if NUMBER is 1, Emacs will
  ;;             will save the bookmarks file every time a bookmark is created
  ;;             or deleted).
  (setq bookmark-save-flag 1)

  ;; Don’t compact font caches during GC. This can resolve lag issues with
  ;; doom-modeline and some other plugins.
  (setq inhibit-compacting-font-caches t)

  ;; Whether to cycle completions.
  (setq completion-cycle-threshold t)

  ;; Show file name and major mode in title bar.
  (setq-default frame-title-format
                '("%b [%m]@"
                  (:eval (or (file-remote-p default-directory 'host) system-name))
                  " — Emacs"))

  ;; Emacs 28 variables.
  (when (>= emacs-major-version 28)
    ;; Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate #'command-completion-default-include-p)
    ;; Automatically native compile all packages installed with package.el
    (setq package-native-compile t))

  ;; Emacs supports editing text in languages that order text horizontally
  ;; right-to-left, such as Hebrew or Arabic. If you do not work in a language
  ;; such as these, you can improve Emacs' performance if you tell it to assume
  ;; all languages display left-to-right by default, resulting in fewer line scans
  ;; necessary to display text.
  (setq-default bidi-paragraph-direction 'left-to-right)
  (if (version<= "27.1" emacs-version)
      (setq bidi-inhibit-bpa t))

  ;;; EasyPG settings (Emacs' front-end for GPG)
  ;; Whether to cache the user's passphrases for symmetrically encrypted files.
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  ;; How to prompt the user for passphrases.
  ;; 'loopback means to query passphrases through the minibuffer.
  (setq epg-pinentry-mode 'loopback)
#+end_src

* Set fringe width
In Emacs, the /fringe/ is the margin on the left and/or right side of a frame
between the edge of the frame and the first buffer. You can even set the width
of the right and left fringes individually.

#+begin_src emacs-lisp
  ;; When called with a number, set the fringe on the right and left to the
  ;; specified number of pixels.  When called interactively, prompt the user for a
  ;; fringe style to apply.
  (set-fringe-mode 10)
#+end_src

* Adjust initial frame size
In keeping with the spirit of Emacs, there are a plethora of methods for
changing the size of the first frame Emacs creates. A frame is basically Emacs'
concept of a window in Microsoft Windows or macOS lingo. The method(s) used
below are the most portable.

** Fullscreen options
To change the initial fullscreen behavior of a frame using =initial-frame-alist=
or =default-frame-alist=, append one of the following options to one or both of
those lists:

- ='(fullscreen . fullwidth)=: Make the frame as wide as possible, but do not
  adjust vertical size.
- ='(fullscreen . fullheight)=: Make the frame as tall as possible, but do not
  adjust horizontal size.
- ='(fullscreen . fullboth)=: Set height and width to the size of the screen.
- ='(fullscreen . maximized)=: Like =fullboth=, but you cannot readjust the
  frame size later with the mouse.

** How to adjust the initial frame's size
Use the =initial-frame-alist= to change the size of the first frame Emacs
creates on startup.

** How to adjust all frames' sizes
To change the size of all frames Emacs creates, use =default-frame-alist=.

** Initial frame size
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; Maximize Emacs' initial frame on macOS.
    (add-to-list 'initial-frame-alist `(fullscreen . fullboth)))
#+end_src

* Font Configuration
Set default font for Emacs.

*NOTE:* The main font configuration is in =my-font.el=.

#+begin_src emacs-lisp
  (my-font-set-default-font)
#+end_src

* Info
=info= is Emacs' built in help system. You use =info= to browse documentation
pages. However, by default, Emacs only looks in a small number of locations for
help pages. Here we add more locations for browsing user-installed info pages.

#+begin_src emacs-lisp
  ;; Make sure user-installed info pages are available.
  (add-to-list 'Info-default-directory-list my/user-info-dir)
#+end_src

* Aliases
Here we alias existing functions to new names, usually to tell Emacs to run a
different function whenever it tries to use one we don't like.

** Change "yes or no" to "y or n"
Turn all "yes or no" prompts into "y or n" single character prompts to make
our lives easier.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Activate/Deactivate Default Minor Modes
Turn certain minor modes on or off by default. You can think of a minor mode as
a plugin, or an extra set of functions and behaviors that the user turns on or
off by calling the minor mode's function. For instance, calling
=(save-place-mode 1)= will make Emacs open previously closed files at their last
edited location, as opposed to opening them at the beginning of the file.

#+begin_src emacs-lisp
  ;; Disable menubar and toolbar (they take up a lot of space!)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  ;; Also diable the scrollbar
  (toggle-scroll-bar -1)

  ;; Open files at last edited position
  (save-place-mode 1)

  ;; Use recentf: bind to a keybinding, save recentf list to filesystem every so
  ;; often.
  (my-recentf-enable)

  ;; subword-mode is super handy! It treats parts of camelCase and snake_case
  ;; names as separate words. This enables subword-mode in all buffers.
  (global-subword-mode 1)

  ;; Automatically insert closing delimiters when the user types an opening
  ;; delimiter.
  ;;
  ;; NOTE: Parinfer does a much better job balancing parentheses and
  ;; much more, so we can disable electric-pair-mode.  See my-lisp.org for
  ;; details.
  (electric-pair-mode -1)

  ;; Automatically keep code indented when blocks change.
  ;; Not necessary since we use clean-aindent-mode.
  ;; See my-whitespace.org for more details.
  (electric-indent-mode -1)

  ;; Allow tooltips in pop-up mini-frames.
  (tooltip-mode 1)

  ;; Turn on syntax highlighting (AKA font locking) by default.
  (global-font-lock-mode 1)

  ;; Always show line numbers
  (global-display-line-numbers-mode 1)

  ;; Keep buffers in sync with their respective files on disk as those files
  ;; change outside of Emacs. An example would be the user adding a previously
  ;; untracked file to the Git index. With this mode active, Emacs will update Git
  ;; information automatically upon adding the file. If this mode is not active,
  ;; the user will have to manually revert the buffer to see the updated
  ;; information.
  ;;
  ;; NOTE: Enabling global-auto-revert can cause Emacs to slow down!
  (global-auto-revert-mode 1)

  ;; Persist command history to disk to maintain it between restarts.
  (savehist-mode 1)

  ;; Automatically visit image files as images.
  (auto-image-file-mode 1)

  ;; Display file size in mode line.
  (size-indication-mode 1)

  ;; Turns on column numbers in mode line.
  (column-number-mode 1)

  ;; Automatically uncompress files when you visit them, and recompress them if
  ;; you alter and save them.  This mode is necssary when your Elisp files are
  ;; compressed as `.el.gz' files, which is often the default for Elisp bundled
  ;; with Emacs.
  (auto-compression-mode 1)
#+end_src

* Key Bindings
Custom key bindings.

** Global
Key bindings available in any major mode.

#+begin_src emacs-lisp
  ;; Indent according to major mode after pressing Enter.
  (global-set-key (kbd "RET") #'newline-and-indent)

  ;; Find file at point ("g f" in evil-mode)
  ;; (global-set-key (kbd "C-c f p") #'ffap)

  ;; Change window size (Vim-like bindings)
  (global-set-key (kbd "S-C-l") #'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-h") #'shrink-window-horizontally)
  (global-set-key (kbd "S-C-j") #'enlarge-window)
  (global-set-key (kbd "S-C-k") #'shrink-window)

  ;; Turns vertically split frame into a horizontal split one.
  (global-set-key (kbd "C-c w t") #'my-window-toggle-frame-split)

  ;; Select a bookmark to delete by means of an interactive menu.
  (global-set-key (kbd "C-c D") #'bookmark-delete)
#+end_src

* Email
Settings for Emacs' =mail-mode= and integration with external email programs,
such as =mutt= and =mu=.

#+begin_src emacs-lisp
  ;; Change mode when editing emails for Mutt
  (setq auto-mode-alist (append '(("/tmp/mutt.*" . message-mode)) auto-mode-alist))
#+end_src

* Function Definitions
Custom functions, both standard and interactive.

#+begin_src emacs-lisp
  (defun print-major-mode ()
    "Show the major mode of the current buffer in the echo area."
    (interactive)
    (message "%s" major-mode))

  (defun gnus-new-frame ()
    "Create a new frame and start the Gnus news reader in it."
    (interactive)
    (with-selected-frame (make-frame)
      (gnus)))

  (defun reload-config ()
    "Reload all Emacs config files."
    (interactive)
    (load-file my/emacsrc))

  (defun download-elisp-lib (url &optional file-name)
    "Downloads an elisp file from a URL to `my/emacs-lisp-dir'.

    If FILE-NAME is omitted or nil, it defaults to the last segment of the URL."
    (if (not file-name)
        (setq file-name (url-file-nondirectory (url-unhex-string url))))
    (let ((file-path (concat my/emacs-lisp-dir (concat "/" file-name))))
      (make-directory my/emacs-lisp-dir t)
      (url-copy-file url (file-truename file-path) t)))

  (defun my/recursive-add-dirs-to-load-path (base-dir &optional subdirs)
    "Recursively add directories from a BASE-DIR to load-path.

  Optionally, SUBDIRS is a list of subdirectory strings beneath BASE-DIR that
  should be added to load-path. If this argument is absent, all subdirectories
  of BASE-DIR are added to load-path."
    (interactive)
    (let ((default-directory base-dir))
      (setq load-path
            (append
             (let ((load-path (copy-sequence load-path))) ; Shadow
               (if subdirs
                   ;; If user supplied list of subdirs, pass it here
                   (normal-top-level-add-to-load-path subdirs)
                 ;; Otherwise, add all directories under base-dir
                 (normal-top-level-add-subdirs-to-load-path)))
             load-path))))

  (defun my/compile-org-dir (org-dir)
    "Tangle then byte compile every .org file in ORG-DIR, but only if necessary.

  This function first checks for byte-compiled .elc files in the
  directory. If they do not yet exist for their corresponding .el
  files, or if the .elc files are older than their parent .el
  files, this function byte-compiles the .el files. However, the
  .el files are generated from their ancestor .org files, so this
  function then checks to make sure that the .el files are present
  and up-to-date with each .org file. If they are absent or out of
  sync, tangle the .org files to generate the .el files."
    (interactive)
    (let* ((default-directory org-dir)
           (org-files (directory-files org-dir 'full ".*\\.org"))
           (elc-files (mapcar (lambda (file)
                                (concat
                                 (file-name-sans-extension file) ".elc"))
                              org-files)))
      (mapc #'my/create-update-config-artifact elc-files)))

  (defun my/use-mu4e-p ()
    "Return T if the system is configured for `mu4e'. Return NIL otherwise."
    (and (executable-find "mu") (executable-find "mbsync")))

  (defun my/toggle-line-number-type ()
    "Toggle absolute/relative line numbers in all open buffers."
    (interactive)
    ;; Figure out global line number state for all buffer.
    (if (eq my/line-number-state 'absolute)
        (setq my/line-number-state 'relative
              display-line-numbers-type 'relative)
      (setq my/line-number-state 'absolute
            display-line-numbers-type t))
    ;; Apply new line number type to all open buffers.
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        ;; Only operate on buffers that display line numbers..
        (when (bound-and-true-p display-line-numbers-mode)
          (if (eq my/line-number-state 'relative)
              (setq display-line-numbers 'relative)
            (setq display-line-numbers t))))))

  (defun my/eval-and-replace ()
    "Replace the preceding sexp with its value."
    (let ((value (eval (preceding-sexp))))
      (backward-kill-sexp)
      (insert (format "%S" value))))
#+end_src

* Environment Variables
Set additional environment variables not taken care of through the
=initial-environment= list of variables.

** Standard
Set standard environment variables that affect Emacs as a whole.

#+begin_src emacs-lisp
  ;; Set standard language that Emacs assumes.
  (setenv "LANG" "en_US.UTF-8")
#+end_src

** Perl
Perl's operations depends on a number of environment variables that Emacs
will not recognize by default, so we must set them here.

#+begin_src emacs-lisp
  (let* ((perl-local-lib-root (concat (getenv "HOME") "/perl5"))
         (perl-local-lib (concat perl-local-lib-root "/lib/perl5")))
    (setenv "PERL5LIB" perl-local-lib)
    (setenv "PERL_LOCAL_LIB_ROOT"
            (concat perl-local-lib-root ":$PERL_LOCAL_LIB_ROOT") 'subst-env-vars)
    (setenv "PERL_MB_OPT" (concat "--install_base '" perl-local-lib-root "'"))
    (setenv "PERL_MM_OPT" (concat "INSTALL_BASE=" perl-local-lib-root))
    (setenv "PERL_MM_USE_DEFAULT" "1"))
#+end_src

** LSP
Set variables used by LSP servers.

#+begin_src emacs-lisp
  ;; lsp-mode can be compiled in two modes: `plist' and `hash-table'.
  ;; Plists provide better performance in deserialization and are lighter than
  ;; hash tables.
  ;; NOTE: You MUST rebuilt all lsp-mode related packages if you change this
  ;;       variable!
  (setenv "LSP_USE_PLISTS" "true")
#+end_src

* Hooks
Hooks are analogous to Vim's =autocmds=. They represent a series of functions to
run when a particular event occurs. Both Emacs proper and third party plugins
expose certain hooks along with their packages, and the user can then attach
functions to each hook by means of the =add-hook= function. The most commonly
used hooks are those for major and minor modes, each having a name like
=java-mode-hook=, or =company-mode-hook=.  However, most packages provide
additional hooks for use besides those for major and minor modes, such as Evil's
state change hooks like =evil-insert-state-entry-hook= and
=evil-insert-state-exit-hook=.

** Buffer-menu-mode hooks
#+begin_src emacs-lisp
  (add-hook 'Buffer-menu-mode-hook (lambda ()
                                     ;; Disable whitespace visualization in Buffer
                                     ;; menu.
                                     (setq-local show-trailing-whitespace nil)
                                     (whitespace-mode -1)))
#+end_src

** dired-mode hooks
dired is the awesome "directory editor" mode in Emacs. It's much more
convenient than entering the shell, for the most part.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook (lambda ()
                               ;; Auto-refresh dired buffer when files change.
                               (auto-revert-mode 1)
                               ;; Allow user to toggle long-form ls output in dired mode with '('.
                               (dired-hide-details-mode 1)))
  (add-hook 'wdired-mode-hook (lambda ()
                                ;; Auto-refresh wdired buffer when files change.
                                (auto-revert-mode 1)))
#+end_src

** emacs-startup hooks
These run after loading init files and handling the command line.

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              ;; After startup, it is important you reset the garbage collector
              ;; settings to some reasonable defaults. A large gc-cons-threshold
              ;; will cause freezing and stuttering during long-term interactive
              ;; use. I find these are nice defaults:
              (setq gc-cons-threshold 104857600) ;; 100 MB
              (setq gc-cons-percentage 0.1)
              (setq file-name-handler-alist last-file-name-handler-alist)))
#+end_src

** minibuffer-setup hooks
These hooks just after entry into the minibuffer.

#+begin_src emacs-lisp
  ;; Do not allow the cursor in the minibuffer prompt
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** minibuffer-mode hooks
These hooks run after =minibuffer-mode= activates for a buffer.

#+begin_src emacs-lisp
  (add-hook 'minibuffer-mode-hook (lambda ()
                                    ;; Don't highlight whitespace in minibuffer.
                                    (setq-local show-trailing-whitespace nil)
                                    (whitespace-mode -1)))
#+end_src

** prog-mode hooks
These commands run whenever Emacs finds a file of any programming language.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              ;; Make hyperlinks clickable.
                              (goto-address-mode 1)
                              ;; Turn various keywords into pretty programming
                              ;; symbols, such as "lambda" -> "λ" in lisp-mode.
                              (prettify-symbols-mode 1)
                              ;; Show invisible characters.
                              (whitespace-mode 1)))
#+end_src

** shell-mode hooks
shell-mode is a basic terminal emulator in Emacs.

#+begin_src emacs-lisp
  (add-hook 'shell-mode-hook (lambda ()
                               (ansi-color-for-comint-mode-on)))
#+end_src

** text-mode hooks
These commands run whenever Emacs finds a text type file or any of its
derivatives.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook (lambda ()
                              ;; Wrap words if they exceed the fill column
                              ;; threshold.
                              (auto-fill-mode 1)
                              ;; Make hyperlinks clickable.
                              (goto-address-mode 1)
                              ;; Show invisible characters.
                              (whitespace-mode 1)))
#+end_src

** conf-mode hooks
These commands run whenever Emacs finds a configuration file, such as =.ini=
or =.gitconfig= files.

#+begin_src emacs-lisp
  (add-hook 'conf-mode-hook (lambda ()
                              ;; Make hyperlinks clickable.
                              (goto-address-mode 1)
                              ;; Show invisible characters.
                              (whitespace-mode 1)))
#+end_src

** before-save hooks
These hooks run before Emacs saves a file.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook (lambda ()
                                ;; Strip trailing whitespace from the
                                ;; current buffer before saving.
                                (delete-trailing-whitespace)
                                ;; Convert tabs to spaces.
                                (untabify (point-min) (point-max))))
#+end_src

** after-save hooks
These hooks run after Emacs saves a file.

#+begin_src emacs-lisp
  (add-hook 'after-save-hook
            (lambda ()
              ;; Update any GTAGS files if necessary.
              (my-gtags-update-hook-fn)))
#+end_src

* Load Private Configuration
There are times when we need to write environment-specific configuration
containing sensitive information, such as usernames and passwords. My solution
is to create an untracked directory =~/.emacs.d/private/= containing all of the
Emacs configuration I want to keep private to my current machine, and load that
configuration here if it is present.

#+begin_src emacs-lisp
  (when (file-directory-p my/private-elisp-dir)
    (my/apply-to-dir-files my/private-elisp-dir "\\.el$"
                           (lambda (f &rest args)
                             "Make use of `load''s extensionless file loading
    feature for Elisp files. This means `load' will first look for an .elc file,
    then for a .el file in lieu of that."
                             (load (file-name-sans-extension f) args))))
#+end_src

* Periodically Purge Backup/Temp Files
We do not want to clutter up our backup and auto-save file directories with old,
stale files. We should periodically purge old files from these directories.

#+begin_src emacs-lisp
  (message "Deleting old backup and auto-save files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (append (directory-files
                           (concat (file-truename my/emacs-backup-dir) "/") t)
                          (directory-files
                           (concat (file-truename my/emacs-auto-saves-dir) "/") t)))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (nth 5 (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+end_src

* Package Manager
Configure package managers Emacs leverages to install and configure third-party
packages.

** straight
=straight= is a newer package manager for Emacs that differs from
=package.el=.  It operates by cloning Git repositories for Emacs packages and
sym-linking them to Emacs' runtime path. =straight= is also a purely
functional package manager, and integrates nicely with the =use-package=
macro.  *NOTE:* straight requires Emacs version 24.5 or higher to properly
function.

To update all packages installed through straight, run =M-x
straight-pull-all=

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  ;; Always use `use-package' when installing packages, making the `:straight t'
  ;; part of the `use-package' macro unnecessary.
  (setq straight-use-package-by-default t)
  ;; The straight.el branch to clone.
  (setq straight-repository-branch "master")
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           (concat
            "https://raw.githubusercontent.com/raxod502/straight.el/"
            straight-repository-branch
            "/install.el")
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (with-no-warnings
      (load bootstrap-file nil 'nomessage))

    ;; Register more Git project hosting sites with Straight.el.
    ;; TODO: Remove these host additions once straight.el includes them by
    ;;       default.
    (add-to-list 'straight-hosts '(codeberg "codeberg.org" ".git"))

    ;; Refresh package repositories
    (when (not (fboundp 'straight-pull-recipe-repositories))
      ;; Sometimes straight.el does not include the convenience function
      ;; `straight-pull-recipe-repositories', in which case we should alias
      ;; that function to our own custom version.
      (defalias 'straight-pull-recipe-repositories
        'my-straight-helpers-pull-recipe-repositories))
    (straight-pull-recipe-repositories)

    ;; Default mode for loading packages: either defer or demand.
    ;; (setq use-package-always-demand t)
    (setq use-package-always-defer t)

    ;; Install use-package via straight.
    ;; After this function runs, use-package will automatically use straight
    ;; to install packages if you specify ':stright t' instead of ':ensure t'.
    ;; If you have set straight-use-package-by-default to t, this is
    ;; unnecessary.
    (straight-use-package
     ;; Override the MELPA recipe in order to get all Elisp files for
     ;; use-package. For some reason, the MELPA recipe excludes several
     ;; important source files.
     '(use-package :type git :host github :repo "jwiegley/use-package"
        :files (:defaults))))
#+end_src

* Install Packages Needed on Startup
Some packages are important to load right at the get-go, either because we
want their functionality right now, or because they provide extra keywords
for =use-package= that we want to make use of in our =use-package=
statements.

** exec-path-from-shell
Keep Emacs' own =PATH= environment variable in sync with the user's =PATH=,
making sure that all external executable available to the user are also within
Emacs' reach.

*NOTE:* Running =exec-path-from-shell= can be slow since it has to spawn an
external shell process and parse the =PATH= environment variable from that
process. I prefer to parse my =PATH= from the =~/.path_static= file, since that
path is already calculated.

#+begin_src emacs-lisp
  (if (and (member system-type '(gnu gnu/linux darwin cygwin))
           (file-exists-p my/static-path-file))
      ;; If we have compiled our `~/.path_static` file, use the PATH in that file
      ;; because using that PATH is much faster than calculating it dynmaically.
      (setenv "PATH" (substitute-env-vars
                      (shell-command-to-string (concat "cat " my/static-path-file " | grep '^\s*PATH=' | sed -e 's/^\s*PATH=//' -e 's/\"//g'"))))
    ;; When launched as a graphical application, Emacs typically inherits a
    ;; default PATH variable, not the user's.  This can be annoying when it comes
    ;; to launching external applications from within Emacs.  This plugin solves
    ;; the problem by manually importing the user's PATH variable and using it as
    ;; the value of Emacs exec-path variable.
    (use-package exec-path-from-shell
      :demand t
      :init
      ;; Whether to output debug info to the *Messages* buffer.
      ;; NOTE: This variable is not customizable.
      (setq exec-path-from-shell-debug nil)
      :custom
      ;; How long to wait before warning about long startup time for shell.
      (exec-path-from-shell-warn-duration-millis 500)
      :config
      ;; Only run this plugin for macOS, Linux, or Cygwin systems.
      (when (member system-type '(gnu gnu/linux darwin cygwin))
        ;; Make sure to use the lean version of our login shell profile to
        ;; avoid timing out or excessive memory consumption.
        (setenv "USE_LEAN_PROFILE" "true")
        ;; Set $PATH by running the user's login shell.
        (exec-path-from-shell-initialize)
        ;; Remove USE_LEAN_PROFILE environment variable once it has served its
        ;; purpose.
        (setenv "USE_LEAN_PROFILE" nil))))
#+end_src

** use-package-chords
Adds =:chords= keyword to =use-package= for defining key-chords.

#+begin_src emacs-lisp
  (use-package use-package-chords
    :demand t
    :config
    (key-chord-mode 1))
#+end_src

** general
=general.el= is a macro system for managing Emacs keybindings. You can think
of it as a wrapper around both standard Emacs keybinding forms, such as
=define-key=, =global-set-key=, etc., and third-party keybinding macros,
such as =evil-define-key=. Thus, General allows you to define keys in a
package-agnostic fashion. General also adds a number of keywords to
=use-package=, such as =:general=, =ghook=, and =gfhook= for defining keys
and hooks in a way that defers loading the package.

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    ;; Define a shortcut function for defining keys that begin with "C-c"
    (general-create-definer my/user-leader-def
      :prefix "C-c")
    ;; Create a replacement macro for `evil-leader'. This obsoletes the need to
    ;; include `evil-leader' in your configuation!
    (general-create-definer my/evil-leader-def
      :states '(normal visual)
      :prefix ",")
    ;; Allows using Vim-style key definers.
    ;; Available definers are:
    ;;   general-imap
    ;;   general-emap
    ;;   general-nmap
    ;;   general-vmap
    ;;   general-omap
    ;;   general-mmap
    ;;   general-rmap
    ;;   general-iemap
    ;;   general-nvmap
    ;;   general-otomap
    ;;   general-itomap
    ;;   general-tomap
    ;; If you pass a non-nil argument to `general-evil-setup', you may omit the
    ;; "general-" prefix for these macros. I find that leaving them in makes your
    ;; code more descriptive, however.
    (general-evil-setup)
    ;;; Set universal keybindings with General
    (general-unbind
      ;; Unbind some keys to make room for my custom keybindings.
      "M-c")
    (general-def
      ;; Nobody uses downcase-region, anyway.
      "C-x C-l" 'find-library
      ;; Compile command for the current buffer.
      "M-c c" 'compile
      ;; Re-run the previous compile command.
      "M-c r" 'recompile
      ;; Kill the running compilation process.
      "M-c k" 'kill-compilation
      ;; Much easier than `C-x 4 C-f'
      "C-x F" 'find-file-other-window
      ;; Kill the current buffer.
      "C-M-k" 'kill-this-buffer)
    ;; Evil leader shortcuts:
    (my/evil-leader-def
      ;; Evaluating s-exps
      "<" 'eval-last-sexp
      ">" 'eval-print-last-sexp
      ;; Toggle relative/absolute line numbers.
      "N"  'my/toggle-line-number-type
      ;; Bookmarks
      "bd" 'bookmark-delete
      "bj" 'bookmark-jump
      "bl" 'list-bookmarks
      "bs" 'bookmark-set
      ;; Buffer
      "bb" 'switch-to-buffer
      "bk" 'kill-this-buffer
      "kk" 'kill-buffer
      ;; Dired
      "dd" 'dired
      ;; eshell
      "es" 'eshell-below
      ;; File
      "lf" 'load-file
      "of" 'org-babel-load-file))
#+end_src

** org
We should load =org= now to avoid version mismatch errors that could occur if we
try to load =org= later.

#+begin_src emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :hook
    (org-mode .
              (lambda ()
                ;; Disable whitespace mode for org mode.
                (whitespace-mode -1)))
    :general
    (general-def org-mode-map
      ;; Mainly used to cycle through todo states.
      "C-M-l" 'org-shiftright
      "C-M-h" 'org-shiftleft)
    (general-def 'insert org-mode-map
      ;; Cycle/continue to next option depending on context.  This moves through
      ;; fields in a table, opens/closes org headings, etc.
      "C-l" 'org-cycle)
    (my/user-leader-def
      ;; These bindings should be available everywhere.  We'll want to use them
      ;; outside of org-mode.
      "M-o l" 'org-store-link
      "M-o a" 'org-agenda)
    (my/evil-leader-def
      "oa" 'org-agenda)
    :custom
    (org-hide-leading-stars t)
    ;; Only show headings when visiting a new Org file.
    (org-startup-folded 'fold)
    ;; Open Org mode buffers with `org-indent-mode' enabled.
    (org-startup-indented t)
    ;; Directory used by Org only in rare circumstances, such as when filing
    ;; away remember notes.
    (org-directory my/org-dir)
    ;; Pressing return while point is over a hyperlink will open the link in
    ;; the user's web browser.
    (org-return-follows-link t)
    ;; Record a timestamp when a todo item is marked as done.
    (org-log-done 'time)
    ;; The keywords to use when cycling through org-todo. In the parentheses, the
    ;; letter is a key you press to immediately transition a todo to the
    ;; appropriate state. The `@' character means we should capture a note when
    ;; entering that state.
    (org-todo-keywords '((sequence "TODO(t)"
                                   "NEXT(n)"
                                   "WAITING(w@)"
                                   "INACTIVE(i@)"
                                   "MEETING(m)"
                                   "|"
                                   "DONE(d)"
                                   "CANCELLED(c@)")))
    ;; Set Org agenda files to a list of files and/or directories.
    (org-agenda-files `(,my/org-agenda-dir))
    ;; Whether to prompt the user for confirmation before evaluating source
    ;; blocks.
    (org-confirm-babel-evaluate nil)
    ;; Whether to keep images their original size or to shrink them to fit their
    ;; corresponding Org mode buffer.
    (org-image-actual-width nil)
    ;; PlantUML configuration
    ;; Whether to use the PlantUML JAR file or the executable.
    ;;   'plantuml -> use executable
    ;;   'jar -> use JAR file
    (org-plantuml-exec-mode 'plantuml)
    (org-plantuml-executable-path (executable-find "plantuml"))
    :init
    ;; Make sure the Org notes directory is present.
    (make-directory my/org-dir t)
    ;; Also create the agenda directory.
    (make-directory my/org-agenda-dir t)
    :config
    ;; Required for expand-region.
    (require 'org-fold)
    ;; Register PlantUML as an Org-compatible language for source blocks.
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))
#+end_src

** org-auto-tangle
=org-auto-tangle= is a simple emacs package that allows you to automatically
tangle org files on save. You do this by adding the option =#+auto_tangle: t= in
your org file.

The tangling process happens asynchronously so it will not block your emacs
session.

If =org-auto-tangle-mode= is on, it will try to automatically tangle your org
files if they contain a non-nil value for the =#+auto_tangle:= option.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook
    (org-mode . org-auto-tangle-mode)
    :custom
    ;; Whether to use auto-tangle as the default behavior for all org buffers.
    (org-auto-tangle-default t))
#+end_src

* Load External Configuration Files
Load additional Emacs configuration files from my custom plugins directories.
Most of these files correspond directly to third-party dependencies from MELPA.
My configuration files install, configure, and load those third-party packages
in a way that does not clutter my primary configuration file.

#+begin_src emacs-lisp
  ;; Load the file containing custom set variables.
  (load custom-file 'noerror 'nomessage)

  ;; Load personal Elisp files.
  (my/apply-to-dir-files my/emacs-plugin-dir "\\.el$"
                         (lambda (f &rest args)
                           "Make use of `load''s extensionless file loading
  feature for Elisp files. This means `load' will first look for an .elc file,
  then for a .el file in lieu of that."
                           (load (file-name-sans-extension f) args)))

  ;; Load configuration embedded in Org mode files.
  (my/apply-to-dir-files my/plugin-notebook-dir "\\.org$"
                         #'org-babel-load-file)
#+end_src
