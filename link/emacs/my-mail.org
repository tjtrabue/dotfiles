#+title:  Mail Configuration/Plugins
#+author: Tom Trabue
#+email:  tom.trabue@gmail.com
#+date:   2020:06:25
#+tags:   mail email mu4e

This is my Emacs email configuration file.

* =mu4e=
=mu4e= is a =maildir=-based email client for Emacs. Quite different from
programs like =gnus=, which get their information from a remote server, =mu4e=
relies on an offline IMAP sync of the user's email account for reading email.

** Installing =mu4e=
=mu4e= is a different creature than most Emacs packages. Instead of installing
=mu4e= from MELPA, you must install the =mu= or =maildir-utils= system utility
using your distribution's package manager. =mu4e= is simply a collection of =mu=
bindings for Emacs. If your package repositories do not contain =mu= or
=maildir-utils=, you must install =mu= from source. Check the [[https://github.com/djcb/mu][GitHub repository]]
for manual installation instructions if you must go that route.

*** Why you shouldn't install =mu4e= with straight.el
While it is theoretically /possible/ to install both =mu= and =mu4e= using
straight.el, this approach is not recommended for a number of reasons. First,
=mu= is a collection of system utilities, it is not just an Emacs package. This
means that straight.el will not be able to determine if your system has all of
the requisite dependencies installed in order to use =mu=. That's what your
/system's package manager/ is for. Second, you must keep =mu= and =mu4e= in sync
with one another. This is best accomplished by installing =mu= as a system
package, which will build and install both =mu= and a compatible version of
=mu4e=, removing the hassle of manually installing interoperable versions of the
two tools.

** =mu4e= Setup
*** Dependencies
Please check online for an updated list of dependencies, but some /system
packages/ that you will definitely need are:

- =maildir-utils= (some repositories store it as =mu=)
- =isync= (some repositories store it as =mbsync=)

*** Setting up =isync=/=mbsync=
=mbsync= is the executable program that keeps your local Maildir in sync with
your remote mail server. =mu4e= depends on =mbsync= to stay up-to-date. To set
it up,

- Make sure to symlink the =.mbsyncrc= file from this =dotfiles= repo to
  =~/.mbsyncrc= (should happen by default after running =install.sh=),
- Create an app password for your email account (or just use your regular
  password if you don't have 2FA set up, but holy crap, man, get 2FA!),
- Copy the password to =~/.password.crt=,
- Run the command =mbsync <account name>= (for instance, =mbsync gmail=).

The initial sync can, and probably will take a very long time, so be ready for
that.

*NOTE:* The above approach to storing passwords is probably the simplest, but it
is far from secure. Keeping a password unencrypted in a text file is a terrible
idea. For added security, you could set up the =pass= program to store your
passwords securely, and call into =pass= in =~/.mbsyncrc= instead of the simple
(and awful) =cat ~/.password.crt= command.

*** Resources
The following are some great resources for configuring =mu4e=:

- [[https://miikanissi.com/blog/email-setup-with-mbsync-mu4e][Miika Nissi's post on mu4e in Emacs]]

** =use-package= specification
#+begin_src emacs-lisp
  (use-package mu4e
    ;; Only load mu4e if we have the requisite executables installed.
    :if (my/use-mu4e-p)
    ;; Remember: we do not want to use straight.el to install mu4e!
    :ensure nil
    :straight nil
    ;; Probably not necessary to set this value, but may come in handy if mu4e
    ;; doesn't load:
    ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :init
    ;; Load mu4e
    (require 'mu4e)
    ;; Set the user's mail dir if not already set from environment variable.
    (defvar my/mail-dir (getenv "MAIL_DIR") "Local email folder.")
    (if (not my/mail-dir)
        (setq my/mail-dir (file-truename (concat my/home-dir "/Mail"))))
    (defvar my/remote-mail-inbox-dir "/Inbox"
      "Email inbox directory on remote server.")
    (defvar my/remote-mail-drafts-dir "/[Gmail]/Drafts"
      "Remote Drafts email directory on remote server.")
    (defvar my/remote-mail-sent-dir "/[Gmail]/Sent Mail"
      "Remote Sent email directory on remote server.")
    (defvar my/remote-mail-refile-dir "/[Gmail]/All Mail"
      "Remote Refile email directory on remote server.")
    (defvar my/remote-mail-trash-dir "/[Gmail]/Trash"
      "Remote Trash email directory on remote server.")
    ;; This is set to 't' to avoid mail syncing issues when using mbsync.
    (setq mu4e-change-filenames-when-moving t
          ;; Refresh mail using isync every 10 minutes.
          mu4e-update-interval (* 10 60)
          mu4e-get-mail-command "mbsync -a"
          ;; mu4e-maildir my/mail-dir

          mu4e-drafts-folder my/remote-mail-drafts-dir
          mu4e-sent-folder my/remote-mail-sent-dir
          mu4e-refile-folder my/remote-mail-refile-dir
          mu4e-trash-folder my/remote-mail-trash-dir
          mu4e-maildir-shortcuts
          '((my/remote-mail-inbox-dir  . ?i)
            (my/remote-mail-sent-dir   . ?s)
            (my/remote-mail-trash-dir  . ?t)
            (my/remote-mail-drafts-dir . ?d)
            (my/remote-mail-refile-dir . ?a))))
#+end_src

** Plugins
*** mu4e-alert
Get desktop notifications for =mu4e=.

#+begin_src emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    ;; Only load mu4e if we have the requisite executables installed.
    :if (my/use-mu4e-p)
    :config
    (mu4e-alert-enable-notifications)
    (if (eq system-type 'darwin)
        ;; Use growlnotify for macOS
        (mu4e-alert-set-default-style 'growl)
      ;; Default to libnotify, otherwise
      (mu4e-alert-set-default-style 'libnotify)))
#+end_src
