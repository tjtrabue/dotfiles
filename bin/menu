#!/usr/bin/env bash

# input: list of menu items
# output: item selected
# exit codes: 0 - normal, 1 - abort, 2 - no menu items
# to select item, press enter; to abort, press q

# make sure that cursor is returned to normal when script exits:
function cleanup() {
   tput cnorm
   trap - EXIT
}
trap cleanup EXIT

[[ $# -lt 1 ]] && exit 2 # no menu items, at least 1 required

# set colors
cn="`echo -e '\r\e[0;1m'`" # normal
cr="`echo -e '\r\e[1;7m'`" # reverse

# keys
au="`echo -e '\e[A'`" # arrow up
ad="`echo -e '\e[B'`" # arrow down
ec="`echo -e '\e'`"   # escape
nl="`echo -e '\n'`"   # newline

tn="$#" # total number of items
num_rows=$((`tput lines` - 1))
line_length=`tput cols`
if [[ $tn -le $num_rows ]]; then
   num_rows=$tn
fi
# The object range to display at any given time:
upper_index=$num_rows
lower_index=1

# The amount of space between the item number and the item itself:
spacer=10

{ # capture stdout to stderr
   tput civis # hide cursor
   cp=1 # current position
   end=false

   while ! $end; do
      for i in $(seq $lower_index $upper_index); do
         item=$(eval "echo -n \"\${$i}\"")
         space_padding=$(printf %$((line_length - ${#item} - $spacer))s)
         [[ $cp == $i ]] && echo -n "$cr" || echo -n "$cn"
         eval "printf \"%-${spacer}s%s%s\n\" \"[\$i]\" \"\${$i}\" \"\$space_padding\""
      done

      read -sn 1 key
      [[ "$key" == "$ec" ]] &&
      {
         read -sn 2 k2
         key="$key$k2"
      }

      case "$key" in
         "$au")
            cp=$((cp - 1))
            if [[ $cp -gt 0 && $cp -eq $((lower_index - 1)) ]]; then
               lower_index=$((lower_index - 1))
               upper_index=$((upper_index - 1))
            fi
            if [[ $cp -eq 0 ]]; then
               lower_index=$((tn - num_rows + 1))
               upper_index=$tn
               cp=$tn
            fi
            ;;

         "$ad")
            cp=$((cp + 1))
            if [[ $cp -lt $((tn - num_rows + 2)) ]]; then
               lower_index=$((lower_index + 1))
               upper_index=$((upper_index + 1))
            fi
            if [[ $cp -eq $((tn + 1)) ]]; then
               lower_index=1
               upper_index=$num_rows
               cp=1
            fi
            ;;

         "$nl")
            si=true
            end=true
            ;;

         "q")
            si=false
            end=true
            ;;
      esac

      tput cuu $tn
   done

   tput cud $(( upper_index - 1 ))
   tput cnorm # unhide cursor
   echo "$cn" # normal colors
} >&2 # end capture

$si && eval "echo \${$cp} | tr -dc [:print:]"
# eof