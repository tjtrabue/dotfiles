#!/usr/bin/env bash

# Emacs installer script.
#
# All of the functions in this file are prefixed with "ie" to show they are
# privately namespaced to this script, and thus should not conflict with
# functions defined in other parts of my dotfiles repository.

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"
declare DOTFILES_REPO="${HOME}/.dotfiles"
declare WS

# Compiler/Linker options
declare IE_GCC_VERSION=""
declare IE_CC="gcc"
declare IE_CXX="g++"
declare USE_MOLD_LINKER=false

# Build options
declare INSTALL_PREFIX="/usr/local"
declare USE_PGTK=false
declare USE_LTO=false

# Emacs location variables
declare EMACS_GIT_URL="https://github.com/emacs-mirror/emacs.git"
declare EMACS_DEST="${WS}/emacs"
declare EMACS_BACKUP="${EMACS_DEST}.bak"
# }}}

# Logging variables {{{
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh" && src
# }}}

# Functions {{{

# Help {{{
_help() {
  command cat <<EOF
${THIS_EXEC}

Install Emacs from its master branch.

You will need to install lots of build dependencies, and unfortunately the list
changes pretty drastically depending on your OS. Some generic advice for
building Emacs from source:

- Make sure you have libgccjit installed, and make sure its version matches
  your GCC version. Otherwise, the configure step will fail.

If installing on Windows for WSL, see the following page for instructions:
  https://github.com/hubisan/emacs-wsl

As well as the following article on using Linux GUI apps on Windows:
  https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -g VERSION | --gcc-version=VERSION
    Use the specified numeric VERSION of the GCC and G++ compilers.
    If this option is not specified, this program uses the system's default
    versions of GCC and G++.

  -h | --help
    Print the help message (this message) and exit.

  -l | --use-lto
    Enable link-time optimization. This build option is still experimental, and
    may result in a slower Emacs.

  -m | --use-mold
    Use the Modern Linker (mold) instead of the standard linker. This requires
    you to have mold installed on your machine.

  --prefix=PREFIX_DIR
    Install all Emacs files under prefix directory PREFIX_DIR. PREFIX_DIR
    defaults to '/usr/local', meaning that this script will install Emacs files
    to '/usr/local/bin', '/usr/local/lib', etc.

  -p | --pgtk
    Compile Emacs with Pure GTK support. This is not recommended if you will be
    running Emacs in an X Windows session. Pure GTK works well for Wayland, and
    for Emacs running as part of WSL on Windows.
EOF
}

# }}}

# Security Checks {{{

# Make sure the user has their specified versions of GCC and G++ installed
# before proceeding.
ie__check_gcc_version() {
  if [ -z "$(command -v "${IE_CC}")" ]; then
    err "Could not find GCC version ${CYAN}${IE_GCC_VERSION}${NC} installed" \
      "on system."
    exit 1
  elif [ -z "$(command -v "${IE_CXX}")" ]; then
    err "Could not find G++ version ${CYAN}${IE_GCC_VERSION}${NC} installed" \
      "on system."
    exit 1
  fi
  log_info "Using GCC and G++ version: ${CYAN}${IE_GCC_VERSION}${NC}"
}
# }}}

# Setup/Cleanup Functions {{{
ie__set_global_vars() {
  log_info "Settings global variables"
  WS="${WS:-${HOME}/workspace}"
}

ie__make_dirs() {
  log_info "Creating necessary directories"
  mkdir -p "${WS}"
}

ie__setup() {
  ie__set_global_vars
  ie__make_dirs
  # Safety and security checks:
  ie__check_gcc_version
}

# We should only remove the Emacs backup repository if the installation
# succeeded.
ie__remove_emacs_backup_repository() {
  if [ -d "${EMACS_BACKUP}" ]; then
    log_info "Removing Emacs backup repository: ${BLUE}${EMACS_BACKUP}${NC}"
    rm -rf "${EMACS_BACKUP}"
  fi
}

# Make a backup of the emacs repository before we uninstall anything, just so
# we'll have a backup to work from if something goes wrong.
ie__backup_emacs_repository() {
  log_info "Backing up Emacs repository"
  cp -rf "${EMACS_DEST}" "${EMACS_BACKUP}"
}

# Delete an existing Emacs installation built from source.
# We delete from the backup Emacs directory because that is the one containing
# our old Emacs build.
ie__uninstall_old_emacs_installation() {
  if [ -d "${EMACS_BACKUP}" ]; then
    log_info "Removing old Emacs installation at: ${BLUE}${EMACS_BACKUP}${NC}"
    (
      cd "${EMACS_BACKUP}" &&
        sudo make uninstall
    )
  fi
}
# }}}

# OS-specific options {{{
ie__linux_build_options() {
  log_info "Adding Linux build options"
  printf '%s' "--with-x-toolkit=gtk3 \
    --without-xaw3d"
}

ie__mac_build_options() {
  log_info "Adding macOS build options"
  printf '%s' "--with-ns"
}
# }}}

# Construct C and C++ compiler/linker options, and export the appropriate
# environment variables.
ie__construct_cc_options() {
  CC="${IE_CC}"
  CXX="${IE_CXX}"
  LD="$(command -v ld)"
  CFLAGS=""
  CXXFLAGS=""

  if "${USE_MOLD_LINKER}" && [ -x "$(command -v mold)" ]; then
    LD="$(command -v mold)"
    CFLAGS="-fuse-ld=mold"
    CXXFLAGS="-fuse-ld=mold"
  elif "${USE_MOLD_LINKER}" && [ ! -x "$(command -v mold)" ]; then
    err "mold linker requested, but no mold executable found on PATH"
    return 1
  fi

  export CC
  export CXX
  export LD
  export CFLAGS
  export CXXFLAGS
}

ie__confirm_installation() {
  local configureCmd="${1}"
  local response=""

  while ! printf '%s' "${response}" | grep -q '[YyNn]'; do
    command cat <<EOF
This script will now install Emacs using the following compiler options:

CC = '${CC}'
CXX = '$CXX}'
LD = '${LD}'
CFLAGS = '${CFLAGS}'
CXXFLAGS = '${CXXFLAGS}'

And the following configuration command:

$(printf '%s' "${configureCmd}" | sed -E 's/\s+/\n  /g')

Continue? [y/n]
EOF
    read -r response
  done

  printf '%s' "${response}" | grep -q '[Yy]'
}

# Put together the options to pass to the './configure' script created by
# running './autogen.sh' in the Emacs repository root. Return the entire command
# to be evaluated for the configure step.
ie__construct_configure_cmd() {
  local osType=""
  local configureCmd="./configure \
    --prefix=${INSTALL_PREFIX} \
    --enable-year2038 \
    --without-compress-install \
    --with-json \
    --with-tree-sitter \
    --with-xwidgets \
    --with-imagemagick \
    --with-native-compilation=aot \
    --program-transform-name=s/\([ec]tags\)/\1.emacs/"

  osType="$(getostype)"

  # Add OS-specific build options to the configure command.
  case "${osType}" in
  "Linux")
    configureCmd="${configureCmd} $(ie__linux_build_options)"
    ;;
  "Darwin")
    configureCmd="${configureCmd} $(ie__mac_build_options)"
    ;;
  esac

  if "${USE_LTO}"; then
    configureCmd="${configureCmd} --enable-link-time-optimization"
  fi

  if "${USE_PGTK}"; then
    configureCmd="${configureCmd} --with-pgtk"
  elif [ "${osType}" = "Linux" ]; then
    # If we're on Linux and not using PGTK, we should fall back on the X Window
    # System.
    configureCmd="${configureCmd} --with-x"
  fi

  log_info "Will configure Emacs build with: ${GREEN}${configureCmd}${NC}"
  printf '%s' "${configureCmd}"
}

# Install emacs from source. This option is pretty hard to make portable, but
# I've done the best I can. You will need a lot of dependencies, and their names
# will change depending on you OS. Check my ubuntu_packages.txt and
# arch_packages.txt files to get a good idea of what you'll need.
ie__install_from_source() {
  local configureCmd=""

  configureCmd="$(ie__construct_configure_cmd)"

  # Export appropriate C/C++ compiler environment variables
  ie__construct_cc_options

  if ! ie__confirm_installation "${configureCmd}"; then
    err "Installation terminated by user."
    return 1
  fi

  if [ -d "${EMACS_DEST}" ]; then
    ie__backup_emacs_repository &&
    ie__uninstall_old_emacs_installation
  fi

  log_info "Cloning/Updating Emacs Git Repo"
  clone_or_update_git_repo "${EMACS_GIT_URL}" "${EMACS_DEST}"
  (
    log_info "Installing latest Emacs" &&
      cd "${EMACS_DEST}" &&
      ./autogen.sh &&
      eval "${configureCmd}" &&
      make bootstrap -j"$(nproc)" &&
      sudo make install
  ) &&
  ie__remove_emacs_backup_repository
}

main() {
  print_header "Installing Emacs (the best editor!)"
  ie__setup
  ie__install_from_source
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o g:hlmp --long gcc-version:,help,use-lto,use-mold,pgtk,prefix: -n 'install_emacs' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -g | --gcc-version)
    case "$2" in
      "")
        shift 2
        ;;
      *)
        IE_GCC_VERSION="${2}"
        IE_CC="gcc-${IE_GCC_VERSION}"
        IE_CXX="g++-${IE_GCC_VERSION}"
        shift 2
        ;;
    esac
    ;;

  -h | --help)
    _help
    exit 0
    ;;

  -l | --use-lto)
    log_info "Enabling ${CYAN}link-time optimization${NC}"
    USE_LTO=true
    shift
    ;;

  -m | --use-mold)
    log_info "Using ${CYAN}mold${NC} linker"
    USE_MOLD_LINKER=true
    shift
    ;;

  -p | --pgtk)
    log_info "Building with Pure GTK support"
    USE_PGTK=true
    shift
    ;;

  --prefix)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      INSTALL_PREFIX="$2"
      shift 2
      ;;
    esac
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker: