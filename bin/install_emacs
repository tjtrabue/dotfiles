#!/usr/bin/env bash

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"
declare DOTFILES_REPO="${HOME}/.dotfiles"
declare WS

declare EMACS_GIT_URL="https://github.com/emacs-mirror/emacs.git"
declare EMACS_DEST="${WS}/emacs"
# }}}

# Logging variables {{{
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  command cat <<EOF
${THIS_EXEC}

Install Emacs from its master branch.

You will need to install lots of build dependencies, and unfortunately the list
changes pretty drastically depending on your OS. Some generic advice for
building Emacs from source:

- Make sure you have libgccjit installed, and make sure its version matches
  your GCC version. Otherwise, the configure step will fail.

If installing on Windows for WSL, see the following page for instructions:
  https://github.com/hubisan/emacs-wsl

As well as the following article on using Linux GUI apps on Windows:
  https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

set_global_vars() {
  log_info "Settings global variables"
  WS="${WS:-${HOME}/workspace}"
}

make_dirs() {
  log_info "Creating necessary directories"
  mkdir -p "${WS}"
}

setup() {
  set_global_vars
  make_dirs
}

remove_old_emacs_installation() {
  if [ -d "${EMACS_DEST}" ]; then
    log_info "Removing old Emacs installation at: ${BLUE}${EMACS_DEST}${NC}"
    (
      cd "${EMACS_DEST}" && \
      sudo make uninstall
    )
  fi
}

# Install emacs from source. This option is pretty hard to make portable, but
# I've done the best I can. You will need a lot of dependencies, and their names
# will change depending on you OS. Check my ubuntu_packages.txt and
# arch_packages.txt files to get a good idea of what you'll need.
install_emacs__source() {
  local configureCmd="./configure \
    --without-compress-install \
    --with-json \
    --with-tree-sitter \
    --with-xwidgets \
    --with-imagemagick \
    --with-mailutils \
    --with-native-compilation=aot"

  if ! pgrep "tty.*Xorg" >>/dev/null 2>&1; then
    # If we are not running an X server, use the Pure GTK version of Emacs.
    # Note, PGTK does not work with X, but seems to work great for Weyland.
    configureCmd="${configureCmd} --with-pgtk"
  fi

  if [ -d "${EMACS_DEST}" ]; then
    remove_old_emacs_installation
  fi

  log_info "Cloning/Updating Emacs Git Repo"
  clone_or_update_git_repo "${EMACS_GIT_URL}" "${EMACS_DEST}"
  (
    log_info "Installing latest Emacs" && \
    cd "${EMACS_DEST}" && \
    export CC="gcc" CXX="g++" && \
    ./autogen.sh && \
    eval "${configureCmd}" && \
    make -j"$(nproc)" trampolines && \
    sudo make install
  )
}

install_emacs_using_best_option() {
  # TODO: Investigate other alternatives for a modern, portable installation
  #       process for Emacs.
  install_emacs__source
}

main() {
  print_header "Installing Emacs (the best editor!)"
  setup
  install_emacs_using_best_option
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'install_emacs' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker: