#!/usr/bin/env bash

# This script installs Emacs from source.
#
# All of the functions in this file are prefixed with "ie" to show they are
# privately namespaced to this script, and thus should not conflict with
# functions defined in other parts of my dotfiles repository.

set -u
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"
declare DOTFILES_REPO="${HOME}/.dotfiles"
declare WS

# Compiler/Linker options
declare IE_GCC_VERSION=""
declare IE_CC="gcc"
declare IE_CXX="g++"
declare USE_MOLD_LINKER=false
declare USE_CLANG=false
declare NATIVE_COMP=aot

# Build options
declare DOCS_HTML=false
declare DOCS_PDF=false
declare EXTRA_CONFIG_ARGS=""
declare INSTALL_PREFIX="/usr/local"
declare USE_PGTK=false
declare USE_LTO=false
declare SOUND_SUPPORT=""
declare NUM_THREADS="$(nproc)"

# User/group options
# The name of the user or group used for shared game score files.
# Prefixing the user name with ':' specifies a group instead.
declare GAME_USER=":games"

# Emacs location variables
declare EMACS_GIT_URL="https://github.com/emacs-mirror/emacs.git"
declare EMACS_DEST="${WS}/emacs"
declare EMACS_BACKUP="${EMACS_DEST}.bak"
# }}}

# Logging variables {{{
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_REPO}/shell/common/source/common.sh" && src
# }}}

# Functions {{{

# Help {{{
_help() {
  command cat <<EOF
${THIS_EXEC} - Install Emacs from its master branch.

You will need to install lots of build dependencies in order to run this script,
and unfortunately the list changes pretty drastically depending on your OS. Some
generic advice for building Emacs from source:

- Make sure you have libgccjit installed, and make sure its version matches
  your GCC version. Otherwise, the configure step will fail.

If installing on Windows for WSL, see the following page for instructions:
  https://github.com/hubisan/emacs-wsl

As well as the following article on using Linux GUI apps on Windows:
  https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps

This Arch Linux AUR package's PKGBUILD script is also a great reference for
understanding the Emacs compilation process, as well as common pitfalls you may
encounter, and I highly recommend you read through the entire script:
  https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=emacs-git

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -c | --use-clang
    Whether to use Clang to compile Emacs.
    You may need to install extra development libraries, such as openmp, for
    this option to work.

  --docs-html
    Generate Emacs documentation in HTML format after compiling Emacs.
    This makes the same documentation from Emacs' Info system available for
    browsing from any program capable of rendering HTML (usually a web
    browser).

  --docs-pdf
    Generate Emacs documentation in PDF format after compiling Emacs.
    This makes the same documentation from Emacs' Info system available for
    browsing from any program capable of rendering PDF documents.

  -e ARGS | --extra-config ARGS
    Add arbitrary arguments to pass to the configure command. The arguments must
    be a space-separated string of options.

    Example: ${THIS_EXEC} --extra-config '--without-xaw3d --with-gsettings'

    NOTE: Be careful before using this option! Most of the useful configure
    arguments are controlled through other options to this script, and you
    should prefer those over passing your own arguments using this option.

  -g VERSION | --gcc-version=VERSION
    Use the specified numeric VERSION of the GCC and G++ compilers.
    If this option is not specified, this program uses the system's default
    versions of GCC and G++.

  -h | --help
    Print the help message (this message) and exit.

  -j NUM_THREADS | --jobs NUM_THREADS
    The number of concurrent threads to run at once while building Emacs.
    Defaults to the result of running the 'nproc' command.

  -l | --use-lto
    Enable link-time optimization. This build option is still experimental, and
    may result in a slower Emacs.

  -m | --use-mold
    Use the Modern Linker (mold) instead of the standard linker. This requires
    you to have mold installed on your machine.

  -n TYPE | --native-comp=TYPE
    Use Emacs native compilation for Emacs Lisp code. TYPE must be one of: 
      - aot (ahead-of-time compilation; default)
      - yes (JIT compilation)
      - no (disable native compilation)

  --prefix=PREFIX_DIR
    Install all Emacs files under prefix directory PREFIX_DIR. PREFIX_DIR
    defaults to '/usr/local', meaning that this script will install Emacs files
    to '/usr/local/bin', '/usr/local/lib', etc.

  -p | --pgtk
    Compile Emacs with Pure GTK support. This is not recommended if you will be
    running Emacs in an X Windows session. Pure GTK works well for Wayland, and
    for Emacs running as part of WSL on Windows.

  -s VALUE | --sound VALUE
    Compile Emacs with sound support for backend with name VALUE.
    This option is only valid for GNU/Linux, FreeBSD, NetBSD, MinGW, or Cygwin
    builds.

    VALUE must be one of:
      - yes
      - alsa
      - oss
      - bsd-ossaudio
      - no
EOF
}

# }}}

# Security Checks {{{

# Make sure the user has their specified versions of GCC and G++ installed
# before proceeding.
ie__check_gcc_version() {
  if [ -z "$(command -v "${IE_CC}")" ]; then
    err "Could not find GCC version ${CYAN}${IE_GCC_VERSION}${NC} installed" \
      "on system."
    exit 1
  elif [ -z "$(command -v "${IE_CXX}")" ]; then
    err "Could not find G++ version ${CYAN}${IE_GCC_VERSION}${NC} installed" \
      "on system."
    exit 1
  fi
  log_info "Using GCC and G++ version: ${CYAN}${IE_GCC_VERSION}${NC}"
}

# If the user requeests to use mold as the executable linker, make sure the user
# has mold installed as it is not a standard GNU build tool.
ie__check_mold() {
  if "${USE_MOLD_LINKER}" && [ -z "$(command -v mold)" ]; then
    err "Mold linker requested, but no mold executable found on PATH"
    exit 1
  fi
}

# Make sure the user passes a valid argument to the --sound flag.
ie__check_sound() {
  local osType

  osType="$(getostype)"

  case "${SOUND_SUPPORT}" in
  "yes" | "alsa" | "oss" | "bsd-ossaudio" | "no") ;;

  *)
    err "Unsupported sound backend: ${CYAN}${SOUND_SUPPORT}${NC}"
    exit 1
    ;;
  esac

  if [ "${osType}" = "Darwin" ]; then
    err "Cannot specify sound option for Mac builds"
    exit 1
  fi
}
# }}}

# Setup/Cleanup Functions {{{
ie__set_global_vars() {
  log_info "Settings global variables"
  WS="${WS:-${HOME}/workspace}"
}

ie__make_dirs() {
  log_info "Creating necessary directories"
  mkdir -p "${WS}"
}

ie__setup() {
  ie__set_global_vars
  ie__make_dirs
  # Safety and security checks:
  if ! "${USE_CLANG}"; then
    ie__check_gcc_version
  fi
}

# We should only remove the Emacs backup repository if the installation
# succeeded.
ie__remove_emacs_backup_repository() {
  if [ -d "${EMACS_BACKUP}" ]; then
    log_info "Removing Emacs backup repository: ${BLUE}${EMACS_BACKUP}${NC}"
    sudo rm -rf "${EMACS_BACKUP}"
  fi
}

# Make a backup of the emacs repository before we uninstall anything, just so
# we'll have a backup to work from if something goes wrong.
ie__backup_emacs_repository() {
  log_info "Backing up Emacs repository"
  cp -rf "${EMACS_DEST}" "${EMACS_BACKUP}"
}

# Delete an existing Emacs installation built from source.
# We delete from the backup Emacs directory because that is the one containing
# our old Emacs build.
ie__uninstall_old_emacs_installation() {
  if [ -d "${EMACS_BACKUP}" ]; then
    log_info "Removing old Emacs installation at: ${BLUE}${EMACS_BACKUP}${NC}"
    (
      cd "${EMACS_BACKUP}" &&
        sudo make uninstall
    )
  fi
}
# }}}

# OS-specific options {{{
ie__linux_build_options() {
  log_info "Adding Linux build options"
  printf '%s' "--with-x-toolkit=gtk \
    --with-cairo-xcb \
    --with-file-notification=inotify \
    --without-gsettings"
}

ie__mac_build_options() {
  log_info "Adding macOS build options"
  printf '%s' "--with-ns"
}
# }}}

# Compile-From-Source Functions {{{

# Construct options common to both CFLAGS and CXXFLAGS.
ie__construct_cc_options_common() {
  printf '%s' "-O3 -mtune=native -march=native" \
    " -fomit-frame-pointer" \
    " -fallow-store-data-races" \
    " -fno-semantic-interposition" \
    " -fno-math-errno -floop-parallelize-all" \
    " -ftree-parallelize-loops=4" \
    " -funsafe-math-optimizations" \
    " -fno-finite-math-only" \
    " -fno-trapping-math" \
    " -freciprocal-math" \
    " -fno-rounding-math" \
    " -fno-signaling-nans" \
    " -fassociative-math" \
    " -fno-signed-zeros" \
    " -frename-registers" \
    " -funroll-loops"
}

# Construct C and C++ compiler/linker options, and export the appropriate
# environment variables.
ie__construct_cc_options_gcc() {
  local cflagsCommon
  cflagsCommon="$(ie__construct_cc_options_common)"

  CC="$(command -v "${IE_CC}")"
  CXX="$(command -v "${IE_CXX}")"
  LD="$(command -v ld)"
  CPP="$(command -v cpp)"
  AR="$(command -v gcc-ar)"
  AS="$(command -v as)"
  CPPFLAGS="-DFD_SETSIZE=10000 ${CPPFLAGS:-""}"
  CFLAGS="${cflagsCommon} ${CFLAGS:-""}"
  CXXFLAGS="${cflagsCommon} ${CXXFLAGS:-""}"
  LDFLAGS="${LDFLAGS:-""}"

  if "${USE_MOLD_LINKER}"; then
    ie__check_mold
    LD="$(command -v mold)"
    LDFLAGS="${LDFLAGS} -fuse-ld=mold"
  fi
}

# If the user desires to compile Emacs using LLVM/Clang, adjust the C/C++
# environment variables to reflect that choice.
ie__construct_cc_options_clang() {
  local nameOfMissingExecutable=""
  local cflagsCommon
  cflagsCommon="$(ie__construct_cc_options_common)"

  CC="$(command -v clang)"
  CXX="$(command -v clang++)"
  CPP="${CC} -E"
  LD="$(command -v lld)"
  AR="$(command -v llvm-ar)"
  AS="$(command -v llvm-as)"
  CPPFLAGS="-DFD_SETSIZE=10000 ${CPPFLAGS:-""}"
  CFLAGS="${cflagsCommon} ${CFLAGS:-""}"
  CXXFLAGS="${cflagsCommon} ${CXXFLAGS:-""}"
  LDFLAGS="-fuse-ld=lld -rtlib=compiler-rt ${LDFLAGS:-""}"

  if [ ! -x "${CC}" ]; then
    nameOfMissingExecutable="clang"
  elif [ ! -x "${CXX}" ]; then
    nameOfMissingExecutable="clang++"
  elif [ -z "${CPP}" ]; then
    nameOfMissingExecutable="clang -E"
  elif [ ! -x "${LD}" ]; then
    nameOfMissingExecutable="lld"
  elif [ ! -x "${AR}" ]; then
    nameOfMissingExecutable="llvm-ar"
  elif [ ! -x "${AS}" ]; then
    nameOfMissingExecutable="llvm-as"
  fi

  if [ -n "${nameOfMissingExecutable}" ]; then
    err "${nameOfMissingExecutable} not found on PATH"
    exit 1
  fi
}

ie__export_cc_options() {
  log_info "Exporting compiler environment variables"
  export CC
  export CXX
  export CPP
  export LD
  export AR
  export AS
  export LDFLAGS
  export CPPFLAGS
  export CFLAGS
  export CXXFLAGS
}

ie__construct_cc_options() {
  if "${USE_CLANG}"; then
    ie__construct_cc_options_clang
  else
    ie__construct_cc_options_gcc
  fi

  ie__export_cc_options
}

ie__confirm_installation() {
  local configureCmd="${1}"
  local response=""

  while ! printf '%s' "${response}" | grep -q '[YyNn]'; do
    command cat <<EOF
This script will now install Emacs using the following compiler options:

CC      = '${CC}'
CXX     = '${CXX}'
LD      = '${LD}'
EOF

    if [ -n "${CPP}" ]; then
      command cat <<EOF
CPP = '${CPP}'
EOF
    fi

    if [ -n "${AR}" ]; then
      command cat <<EOF
AR = '${AR}'
EOF
    fi

    if [ -n "${AS}" ]; then
      command cat <<EOF
AS = '${AS}'
EOF
    fi

    if [ -n "${LDFLAGS}" ]; then
      command cat <<EOF
LDFLAGS = '${LDFLAGS}'
EOF
    fi

    if [ -n "${CPPFLAGS}" ]; then
      command cat <<EOF
CPPFLAGS = '${CPPFLAGS}'
EOF
    fi

    if [ -n "${CFLAGS}" ]; then
      command cat <<EOF
CFLAGS = '${CFLAGS}'
EOF
    fi

    if [ -n "${CXXFLAGS}" ]; then
      command cat <<EOF
CXXFLAGS = '${CXXFLAGS}'
EOF
    fi

    command cat <<EOF

And the following configuration command:

$(printf '%s' "${configureCmd}" | sed -E 's/\s+/\n  /g')

EOF

    if "${DOCS_HTML}"; then
      command cat <<EOF
HTML documentation will be generated.

EOF
    fi

    if "${DOCS_PDF}"; then
      command cat <<EOF
PDF documentation will be generated.

EOF
    fi

    command cat <<EOF
Continue? [y/n]
EOF
    read -r response
  done

  printf '%s' "${response}" | grep -q '[Yy]'
}

# Put together the options to pass to the './configure' script created by
# running './autogen.sh' in the Emacs repository root. Return the entire command
# to be evaluated for the configure step.
ie__construct_configure_cmd() {
  local osType=""
  local configureCmd="./configure \
    --prefix=${INSTALL_PREFIX} \
    --enable-year2038 \
    --enable-gcc-warnings=warn-only \
    --with-json \
    --with-tree-sitter \
    --with-imagemagick \
    --with-modules \
    --with-native-compilation=${NATIVE_COMP} \
    --with-gameuser=${GAME_USER} \
    --with-wide-int \
    --with-small-ja-dic \
    --without-compress-install \
    --program-transform-name=s/\([ec]tags\)/\1.emacs/"

  osType="$(getostype)"

  # Add OS-specific build options to the configure command.
  case "${osType}" in
  "Linux")
    configureCmd="${configureCmd} $(ie__linux_build_options)"
    ;;
  "Darwin")
    configureCmd="${configureCmd} $(ie__mac_build_options)"
    ;;
  esac

  if "${USE_CLANG}"; then
    configureCmd="${configureCmd} --enable-autodepend"
  fi

  if "${USE_LTO}"; then
    configureCmd="${configureCmd} --enable-link-time-optimization"
  fi

  if [ -n "${SOUND_SUPPORT}" ]; then
    {
      ie__check_sound &&
        configureCmd="${configureCmd} --with-sound=${SOUND_SUPPORT}"
    } || {
      exit 1
    }
  fi

  if "${USE_PGTK}"; then
    configureCmd="${configureCmd} --with-pgtk"
  elif [ "${osType}" = "Linux" ]; then
    # If we're on Linux and not using PGTK, we should fall back on the X Window
    # System.
    configureCmd="${configureCmd} --with-x"
  fi

  if [ -n "${EXTRA_CONFIG_ARGS}" ]; then
    # If the user passed extra configure arguments on the command line, add them
    # here.
    configureCmd="${configureCmd} ${EXTRA_CONFIG_ARGS}"
  fi

  log_info "Will configure Emacs build with: ${GREEN}${configureCmd}${NC}"
  printf '%s' "${configureCmd}"
}

# Compile Emacs source code. Optionally, generate documentation in HTML/PDF
# formats. This function presupposes that the user has already run the
# configure command.
ie__build_emacs() {
  log_info "Compiling Emacs from source"

  make bootstrap -j"${NUM_THREADS}"

  if "${DOCS_HTML}"; then
    log_info "Generating ${MAGENTA}HTML${NC} documentation"
    make html -j"$(nproc)"
  fi

  if "${DOCS_PDF}"; then
    log_info "Generating ${MAGENTA}PDF${NC} documentation"
    make pdf -j"$(nproc)"
  fi
}

# Run the `make install` commands necessary to install a freshly compiled Emacs
# distribution.
ie__install_emacs_build() {
  log_info "Installing new Emacs build"

  sudo make install

  if "${DOCS_HTML}"; then
    log_info "Installing generated HTML documentation"
    sudo make install-html
  fi

  if "${DOCS_PDF}"; then
    log_info "Installing generated PDF documentation"
    sudo make install-pdf
  fi
}

# Install emacs from source. This option is pretty hard to make portable, but
# I've done the best I can. You will need a lot of dependencies, and their names
# will change depending on you OS. Check my ubuntu_packages.txt and
# arch_packages.txt files to get a good idea of what you'll need.
ie__install_from_source() {
  local configureCmd=""

  if [ -d "${EMACS_DEST}" ]; then
    ie__backup_emacs_repository
  fi

  clone_or_update_git_repo "${EMACS_GIT_URL}" "${EMACS_DEST}"

  configureCmd="$(ie__construct_configure_cmd)"

  # Export appropriate C/C++ compiler environment variables
  ie__construct_cc_options

  if ! ie__confirm_installation "${configureCmd}"; then
    err "Installation terminated by user."
    return 1
  fi

  (
    log_info "Installing latest Emacs" &&
      cd "${EMACS_DEST}" &&
      ./autogen.sh &&
      eval "${configureCmd}" &&
      ie__build_emacs &&
      ie__install_emacs_build
  ) &&
    ie__remove_emacs_backup_repository
}
# }}}

main() {
  print_header "Installing Emacs (the best editor!)"
  ie__setup
  ie__install_from_source
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o ce:g:hj:lmn:ps: --long use-clang,docs-html,docs-pdf,extra-config:,gcc-version:,help,jobs:,use-lto,use-mold,native-comp:,pgtk,prefix:,sound: -n 'install_emacs' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -c | --use-clang)
    log_info "Using Clang compiler"
    USE_CLANG=true
    shift
    ;;

  --docs-html)
    DOCS_HTML=true
    shift
    ;;

  --docs-pdf)
    DOCS_PDF=true
    shift
    ;;

  -g | --gcc-version)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      IE_GCC_VERSION="${2}"
      IE_CC="gcc-${IE_GCC_VERSION}"
      IE_CXX="g++-${IE_GCC_VERSION}"
      shift 2
      ;;
    esac
    ;;

  -e | --extra-config)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      EXTRA_CONFIG_ARGS="${2}"
      shift 2
      ;;
    esac
    ;;

  -h | --help)
    _help
    exit 0
    ;;

  -j | --jobs)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      NUM_THREADS="${2}"
      log_info "Using ${MAGENTA}${NUM_THREADS}${NC} build threads"
      shift 2
      ;;
    esac
    ;;

  -l | --use-lto)
    log_info "Enabling ${CYAN}link-time optimization${NC}"
    USE_LTO=true
    shift
    ;;

  -m | --use-mold)
    log_info "Using ${CYAN}mold${NC} linker"
    USE_MOLD_LINKER=true
    shift
    ;;

  -n | --native-comp)
    case "$2" in
    "")
      shift 2
      ;;
    "aot" | "yes" | "no")
      log_info "Using native compilation: ${CYAN}${2}${NC}"
      NATIVE_COMP="${2}"
      shift 2
      ;;
    *)
      err "Unrecognized native compilation option: ${2}"
      exit 1
      ;;
    esac
    ;;

  --prefix)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      INSTALL_PREFIX="${2}"
      shift 2
      ;;
    esac
    ;;

  -p | --pgtk)
    log_info "Building with Pure GTK support"
    USE_PGTK=true
    shift
    ;;

  -s | --sound)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      log_info "Building with sound support for ${CYAN}${2}${NC}"
      SOUND_SUPPORT="${2}"
      shift 2
      ;;
    esac
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option ${1} to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker: