#!/usr/bin/env bash

# Trap errors and print error message
set -uo pipefail
trap 's=$?; echo "$0: Error on line "${LINENO}": ${BASH_COMMAND}"; exit $s' ERR

# Variables {{{
declare DOTFILES_HOME="${HOME}/.dotfiles"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

# Logging variables
declare LOG_TO_FILE=""
declare LOG_LEVEL=3

declare EMACS_HOME="${EMACS_CONFIG_HOME:-${HOME}/.emacs.d}"
declare MAIN_ORG_CONFIG_FILE="${EMACS_HOME}/my-init.org"
declare SUPER_CONFIG_FILE="${EMACS_HOME}/tjtrabue-emacs.el"
declare SUPER_CONFIG_DIR="${EMACS_HOME}/super_config"
declare SUPER_CONFIG_FILE_PREFIX="tjtrabue-emacs"
# }}}

# Imports {{{
. "${DOTFILES_HOME}/shell/common/source/common.sh" && src
# }}}

# Functions {{{
_help() {
  command cat <<EOF
${THIS_EXEC} | <insert description here>

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}

# Create the ~/.emacs.d/super_config/ directory.
mesc__make_directories() {
  log_info "Creating dir: ${BLUE}${SUPER_CONFIG_DIR}${NC}"
  rm -rf "${SUPER_CONFIG_DIR:?}"
  mkdir -p "${SUPER_CONFIG_DIR}"
}

# Print the path to the Elisp super config file at the given index.
mesc__get_super_config_file_path() {
  local super_config_index="${1}"
  local super_config_index_suffix

  # Add leading zeros to index in filename to ensure proper file load order.
  # For instance, files without leading zeros load in this order:
  #
  #   file_1.txt
  #   file_10.txt
  #   file_2.txt
  #
  # Whereas leading zeros fix this problem:
  #
  #  file_01.txt
  #  file_02.txt
  #  file_10.txt
  super_config_index_suffix="$(printf '%03d' "${super_config_index}")"

  printf '%s' \
    "${SUPER_CONFIG_DIR}/${SUPER_CONFIG_FILE_PREFIX}-${super_config_index_suffix}.el"
}

# Create the next super config file in ~/.emacs.d/super_config
mesc__make_super_config_file() {
  local super_config_index="${1}"
  local super_config_file

  super_config_file="$(mesc__get_super_config_file_path "${super_config_index}")"

  log_info "Creating new super config file: ${BLUE}${super_config_file}${NC}"

  # Use lexical binding by default in super config.
  command cat <<EOF >"${super_config_file}"
;;; -*- lexical-binding: t; -*-

;; This is an automatically-generated file. Do not edit it directly. Instead,
;; edit '~/.emacs.d/my-init.org', or any of the other configuration files in
;; '~/.emacs.d/plugin-notebook/', and then run:
;;
;;   ~/.dotfiles/bin/make_emacs_super_config

EOF
}

mesc__write_to_super_config_file() {
  local infile="${1}"
  local super_config_index="${2}"
  local super_config_file

  if [ ! -f "${infile}" ]; then
    err "${BLUE}${infile}${NC}: No such file"
    return 1
  fi

  super_config_file="$(mesc__get_super_config_file_path "${super_config_index}")"

  command cat "${infile}" >>"${super_config_file}"
}

mesc__tangle_all_org_config_files() {
  local elispScriptsDir="${EMACS_HOME}/scripts"

  log_info "Tangling all literate Org config files"
  emacs --batch --script "${elispScriptsDir}/tangle-org-files.el"
}

# Tangle and combine all Emacs configuration blocks held in literate Org files
# into one super Emacs configuration file.
mesc__create_super_config() {
  local pluginNotebookDir="${EMACS_HOME}/plugin-notebook"
  local f
  local count=0
  local super_config_index=0

  mesc__tangle_all_org_config_files

  # Write tangled main Org config file to its own super config file.
  mesc__make_super_config_file "${super_config_index}"
  mesc__write_to_super_config_file \
    "$(readlink "${MAIN_ORG_CONFIG_FILE}" | sed 's/\.org$/.el/')" \
    "${super_config_index}"

  ((count++))

  for f in "${pluginNotebookDir}"/*.el; do
    if ((count % 10 == 0)); then
      ((super_config_index++))
      mesc__make_super_config_file "${super_config_index}"
    fi
    mesc__write_to_super_config_file "${f}" "${super_config_index}"
    ((count++))
  done
}

main() {
  print_header "Creating Emacs super configuration file"
  mesc__make_directories
  mesc__create_super_config
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n '<name_here>' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
