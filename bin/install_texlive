#!/usr/bin/env bash

# Trap errors and print error message
set -euo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Variables {{{
declare DOTFILES_HOME="${HOME}/.dotfiles"
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"

# Parent directory for TexLive distributions.
declare TEXLIVE_DIR="/usr/local/texlive"

# Logging variables
declare LOG_TO_FILE=""
declare LOG_LEVEL=3
# }}}

# Imports {{{
. "${DOTFILES_HOME}/shell/common/source/common.sh" && src
# }}}

# Help/Usage {{{
_help() {
  command cat <<EOF
${THIS_EXEC} | Install latest LaTeX TexLive distribution

Install the latest TeX Live distribution on a UNIX OS. This is the preferred
approach to installing TeX Live, since system package repositories usually
contain out-of-date versions that are incompatible with the latest TeX Live
package repositories, meaning you cannot automatically install package using
'tlmgr install <package>'.

To update texlive, run the following commands:
  sudo tlmgr update --self
  sudo tlmgr update --all

To uninstall this distribution, the cleanest solution is to use
'sudo tlmgr remove --all --force'. If that does not work, the directories you
must remove will be named with the scheme:
  /usr/local/texlive/YYYY
  ~/.texliveYYYY

USAGE:
  ${THIS_EXEC} [OPTIONS]

OPTIONS:
  -h | --help
    Print the help message (this message) and exit.
EOF
}
# }}}

# Primary Functions {{{
itl__install_texlive() {
  local tempDir="/tmp"
  local texliveDownloadUrl="https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz"
  local tarFileName="install-tl-unx.tar.gz"

  log_info "Installing latest TeX Live distribution"
  (
    cd "${tempDir}" &&
      wget -q "${texliveDownloadUrl}" &&
      zcat <"${tarFileName}" | tar xf - &&
      (
        cd "$(find "${tempDir}" -maxdepth 1 -mindepth 1 \
          -type d -name 'install-tl-*')" &&
          sudo perl ./install-tl --paper=letter --no-interaction
      )
  ) &&
    rm -rf "${tempDir:?}"/install-tl-*
}

# We  want our user to own the texlive distribution dir.
# It will have a name like: /usr/local/texlive/2023
itl__update_texlive_permissions() {
  log_info "Making ${USER} owner of ${TEXLIVE_DIR}/* directories"
  find "${TEXLIVE_DIR}" -maxdepth 1 -mindepth 1 -type d \
    -execdir sudo chown -hR "${USER}" '{}' ';'
}

# Make sure tlmgr knows where to get updates.
itl__configure_tlmgr() {
  local tlmgrUpdateUrl="http://mirror.ctan.org/systems/texlive/tlnet"

  log_info "Configuring tlmgr"
  tlmgr option location "${tlmgrUpdateUrl}"
}

# Setup PATH, man db, texinfo config, etc.
itl__setup_paths() {
  local latestTexliveDir="$(printf '%s\n' "${TEXLIVE_DIR}"/20* |
    sort -n |
    tail -1)"
  local texliveBinDir="$(find "${latestTexliveDir}/bin" -maxdepth 1 \
    -mindepth 1 -type d)"
  local texliveInfoDir="${latestTexliveDir}/texmf-dist/doc/info"
  local texliveManDir="${latestTexliveDir}/texmf-dist/doc/man"
  local userInfoPathFile="${HOME}/.info_path"
  # The path to the manpage database file.
  local mandbFile="/etc/manpath.config"
  local distro="$(getdistro)"

  # Different Linux distros have different manpage database file locations. The
  # syntax should be the same regardless of file name or location.
  case "${distro}" in
  "Arch Linux")
    mandbFile="/etc/man_db.conf"
    ;;
  esac

  if [ -d "${texliveBinDir}" ]; then
    log_info 'Adding texlive binaries dir to $PATH'
    atp "${texliveBinDir}"
  else
    warn "Could not find texlive bin dir: ${BLUE}${texliveBinDir}${NC}"
  fi

  if [ -f "${mandbFile}" ]; then
    log_info "Adding texlive man path configuration"
    printf 'MANPATH_MAP %s %s\n' "${texliveBinDir}" "${texliveManDir}" |
      sudo tee -a "${mandbFile}" >>/dev/null 2>&1
  else
    warn "Could not find manpath config file at: ${BLUE}${mandbFile}${NC}"
  fi

  log_info "Adding texlive info path to ${BLUE}${userInfoPathFile}${NC}"
  printf '%s\n' "${texliveInfoDir}" >>"${userInfoPathFile}"
}

# Install some extra TexLive fonts that are not "free" in the FSF sense of the
# word, and are therefore not included with TexLive by default.
itl__install_non_free_fonts() {
  local nonFreeFontsInstallerUrl="https://www.tug.org/fonts/getnonfreefonts/install-getnonfreefonts"
  local tmpDir="/tmp"
  local nonFreeFontsInstaller="install-getnonfreefonts"

  log_info "Installing non-free TexLive fonts"
  (
    cd "${tmpDir}" &&
      wget -q "${nonFreeFontsInstallerUrl}" &&
      texlua "${nonFreeFontsInstaller}" &&
      getnonfreefonts --sys --all
  )
}

itl__link_texlive_font_config() {
  local latestTexliveDir="$(printf '%s\n' "${TEXLIVE_DIR}"/20* |
    sort -n |
    tail -1)"
  local texliveFontConfFile="${latestTexliveDir}/texmf-var/fonts/conf/texlive-fontconfig.conf"
  # TODO: Verify this destination works for Linux distros other than Ubuntu!
  local systemFontConfDest="/etc/fonts/conf.d/09-texlive-fonts.conf"

  if [ -f "${texliveFontConfFile}" ]; then
    log_info "Linking TexLive font config file to: ${BLUE}${systemFontConfDest}${NC}"
    sudo ln -sf "${texliveFontConfFile}" "${systemFontConfDest}"
  else
    err "Could not find TexLive font config file at: ${BLUE}${texliveFontConfFile}${NC}"
  fi
}

# Update caches for man page database, font cache, etc.
itl__update_caches() {
  log_info "Updating caches"
  sudo mandb
  sudo fc-cache -fsv
}

# Print the user a final informational message to ensure that they know which
# system files to edit/link.
itl__print_final_message() {
  command cat <<EOF
Done! Although this script SHOULD take care of these settings automatically,
make sure that this is prepended to your \$PATH environment variable:
  /usr/local/texlive/YYYY/bin/PLATFORM,
(PLATFORM will look something like 'x86_64-linux')

You will also want to add this line to your mandb config file
(Usually at '/etc/manpath.config' or '/etc/man_db.conf'):
  MANPATH_MAP /usr/local/texlive/YYYY/bin/PLATFORM /usr/local/texlive/YYYY/texmf-dist/doc/man

And add this line to your INFOPATH file (~/.info_path):
  /usr/local/texlive/YYYY/texmf-dist/doc/info
EOF
}

main() {
  itl__install_texlive &&
    itl__update_texlive_permissions &&
    itl__setup_paths &&
    itl__configure_tlmgr &&
    itl__install_non_free_fonts &&
    itl__link_texlive_font_config &&
    itl__update_caches &&
    itl__print_final_message
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'install_latest_texlive' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    _help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    err "Unknown option $1 to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${@}"

# vim:foldenable:foldmethod=marker:
