#!/usr/bin/env bash

# The clipboard CLI command to use
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"
declare CLIPBOARD_CMD=""
declare CONTENTS=""

# Help function {{{
clipboard__help() {
  command cat <<EOF
clipboard - dynamic wrapper around CLI clipboard programs

USAGE:
clipboard [-h] [--] [FILE [...]]

DESCRIPTION:
This program copies text from stdin (the default) or a file argument to the
system clipboard. The CLI tool used to interact with the system clipboard is
system-dependent. This command determines which tool to use dynmically so that
you don't have to remember which tools you can currently access.

EXAMPLES:
  $ cat README.md | clipboard

  $ clipboard file.txt

  $ printf "foo" | clipboard
EOF
}
# }}}

# Printing functions {{{
echoe() {
  local msg="${*}"
  printf "%s\n" "${msg}" 1>&2
}
# }}}

# Primary functions {{{
clipboard__get_clipboard_command() {
  local os="$(uname -s)"

  case "${os}" in
  "Darwin")
    CLIPBOARD_CMD="pbcopy"
    ;;
  *)
    CLIPBOARD_CMD="xclip -selection clipboard"
    ;;
  esac
}

clipboard__check_clipboard_program_exists() {
  local clipboardExecutable="$(echo "${CLIPBOARD_CMD}" | awk '{print $1}')"

  if [ -z "$(command -v "${clipboardExecutable}")" ]; then
    command cat <<EOF
Error: clipboard program "${clipboardExecutable}" not found on \$PATH. It may
not be installed. Please ensure this program is installed and on your \$PATH and
try again.
EOF
    exit 1
  fi
}

# Does the actual content copying.
clipboard__copy_contents_to_clipboard() {
  if [ -z "${CONTENTS}" ]; then
    eval "${CLIPBOARD_CMD} </dev/stdin"
  else
    eval "${CLIPBOARD_CMD} ${CONTENTS}"
  fi
}
# }}}

# Main function {{{
# Main point of entry for the program.
main() {
  CONTENTS="${*}"
  clipboard__get_clipboard_command
  clipboard__check_clipboard_program_exists
  clipboard__copy_contents_to_clipboard
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o h --long help -n 'clipboard' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    clipboard__help
    exit 0
    ;;

  --)
    shift
    break
    ;;

  *)
    echoe "Unknown option ${1} to ${THIS_EXEC}"
    exit 2
    ;;
  esac
done
# }}}

main "${*}"

# vim:foldenable:foldmethod=marker:
