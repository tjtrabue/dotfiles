#!/usr/bin/env bash

# Be extra strict, and fail if any irregularity is encountered.
set -Eeuo pipefail

# The clipboard CLI command to use
declare THIS_EXEC="$(basename "${BASH_SOURCE[0]}")"
declare CLIPBOARD_EXEC=""
declare CLIPBOARD_EXEC_OPTS=""
declare CONTENT_SOURCE="/dev/stdin"
declare CONTENTS=""

# Help function {{{
clipboard__usage() {
  command cat <<EOF
USAGE:
clipboard [-h]
          [-f FILE]
          [--]
          [CONTENTS]
EOF
}

clipboard__help() {
  command cat <<EOF
clipboard - dynamic wrapper around CLI clipboard programs

EOF
  clipboard__usage
  command cat <<EOF

DESCRIPTION:
This program copies text from stdin (the default) or a file argument to the
system clipboard. The CLI tool used to interact with the system clipboard is
system-dependent. This command determines which tool to use dynmically so that
you don't have to remember which tools you can currently access.

OPTIONS:
  -h | --help
    Print the help message and exit.

  -f | --file FILE
    Copy the contents of FILE to the clipboard. FILE can be a regular file or a
    file descriptor, such as '/dev/stdin', although stdin is always assumed if
    no primary arguments are provided.

EXAMPLES:
  # Primary arguments are copied to clipboard as strings, so this command copies
  # the string "foo" to the clipboard.
  $ clipboard "foo"

  # clipboard reads from stdin if no primary arguments are passed.
  $ cat README.md | clipboard

  # You can also use standard input redirection to read from files.
  $ clipboard <README.md

  # The -f option is used to specify a file to copy to the clipboard.
  # This form works exactly like the stdout redirection method above, and is
  # indeed an equivalent alternative.
  $ clipboard -f file.txt
EOF
}
# }}}

# Printing functions {{{
echoe() {
  local msg="${*}"
  printf "%s\n" "${msg}" 1>&2
}
# }}}

# Primary functions {{{

# Dynamically determine the CLI executable that interacts with the system
# clipboard.
clipboard__get_clipboard_executable() {
  local os="$(uname -s)"

  case "${os}" in
  "Darwin")
    CLIPBOARD_EXEC="pbcopy"
    ;;
  *)
    CLIPBOARD_EXEC="xclip"
    ;;
  esac
}

# Some clipboard CLI tools require optional arguments to work properly.
clipboard__get_clipboard_executable_options() {
  local os="$(uname -s)"

  case "${os}" in
  "Darwin")
    CLIPBOARD_EXEC_OPTS=""
    ;;
  *)
    CLIPBOARD_EXEC_OPTS="-selection clipboard"
    ;;
  esac
}

# Make sure the executable that interacts with the system clipboard exists on
# the user's PATH.
clipboard__check_clipboard_program_exists() {
  local clipboardExecutable="$(echo "${CLIPBOARD_EXEC}" | awk '{print $1}')"

  if [ -z "$(command -v "${clipboardExecutable}")" ]; then
    command cat <<EOF
Error: clipboard program "${clipboardExecutable}" not found on \$PATH. It may
not be installed. Please ensure this program is installed and on your \$PATH and
try again.
EOF
    exit 1
  fi
}

# Perform the actual content copying.
clipboard__copy_contents_to_clipboard() {
  local clipboardCmd="${CLIPBOARD_EXEC}"

  if [ -n "${CLIPBOARD_EXEC_OPTS}" ]; then
    clipboardCmd="${clipboardCmd} ${CLIPBOARD_EXEC_OPTS}"
  fi

  if [ -n "${CONTENTS}" ]; then
    eval "echo ${CONTENTS} | ${clipboardCmd}"
  else
    eval "${clipboardCmd} <${CONTENT_SOURCE}"
  fi
}
# }}}

# Main function {{{
# Main point of entry for the program.
main() {
  CONTENTS="$*"
  clipboard__get_clipboard_executable
  clipboard__get_clipboard_executable_options
  clipboard__check_clipboard_program_exists
  clipboard__copy_contents_to_clipboard
}
# }}}

# Parse CLI Options {{{
args=$(getopt -o hf: --long help,file: -n 'clipboard' -- "$@")
eval set -- "$args"

# extract options and their arguments into variables.
while true; do
  case "$1" in
  -h | --help)
    clipboard__help
    exit 0
    ;;

  -f | --file)
    case "$2" in
    "")
      shift 2
      ;;
    *)
      CONTENT_SOURCE="$2"
      shift 2
      ;;
    esac
    ;;

  --)
    shift
    break
    ;;

  *)
    echoe "Unknown option $1 to ${THIS_EXEC}"
    clipboard__usage
    exit 2
    ;;
  esac
done
# }}}

main "$*"

# vim:foldenable:foldmethod=marker:
